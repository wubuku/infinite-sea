// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.sui.contract.service;

import com.github.wubuku.sui.bean.*;
import com.github.wubuku.sui.utils.*;
import org.dddml.suiinfinitesea.domain.whitelist.*;
import org.dddml.suiinfinitesea.domain.*;
import org.dddml.suiinfinitesea.sui.contract.DomainBeanUtils;
import org.dddml.suiinfinitesea.sui.contract.Whitelist;
import org.dddml.suiinfinitesea.sui.contract.WhitelistEntry;
import org.dddml.suiinfinitesea.sui.contract.WhitelistEntryDynamicField;

import java.util.*;
import java.math.*;
import java.util.function.*;

public class SuiWhitelistStateRetriever {

    private SuiJsonRpcClient suiJsonRpcClient;

    private Function<String, WhitelistState.MutableWhitelistState> whitelistStateFactory;
    private BiFunction<WhitelistState, String, WhitelistEntryState.MutableWhitelistEntryState> whitelistEntryStateFactory;

    public SuiWhitelistStateRetriever(SuiJsonRpcClient suiJsonRpcClient,
                                  Function<String, WhitelistState.MutableWhitelistState> whitelistStateFactory,
                                  BiFunction<WhitelistState, String, WhitelistEntryState.MutableWhitelistEntryState> whitelistEntryStateFactory
    ) {
        this.suiJsonRpcClient = suiJsonRpcClient;
        this.whitelistStateFactory = whitelistStateFactory;
        this.whitelistEntryStateFactory = whitelistEntryStateFactory;
    }

    public WhitelistState retrieveWhitelistState(String objectId) {
        SuiMoveObjectResponse<Whitelist> getObjectDataResponse = suiJsonRpcClient.getMoveObject(
                objectId, new SuiObjectDataOptions(true, true, true, true, true, true, true), Whitelist.class
        );
        if (getObjectDataResponse.getData() == null) {
            return null;
        }
        Whitelist whitelist = getObjectDataResponse.getData().getContent().getFields();
        return toWhitelistState(whitelist);
    }

    private WhitelistState toWhitelistState(Whitelist whitelist) {
        WhitelistState.MutableWhitelistState whitelistState = whitelistStateFactory.apply(whitelist.getId().getId());
        whitelistState.setVersion(whitelist.getVersion());
        whitelistState.setPaused(whitelist.getPaused());
        if (whitelist.getEntries() != null) {
            String whitelistEntryTableId = whitelist.getEntries().getFields().getId().getId();
            List<WhitelistEntry> entries = getWhitelistEntries(whitelistEntryTableId);
            for (WhitelistEntry i : entries) {
                ((EntityStateCollection.ModifiableEntityStateCollection)whitelistState.getEntries()).add(toWhitelistEntryState(whitelistState, i));
            }
        }

        return whitelistState;
    }

    private WhitelistEntryState toWhitelistEntryState(WhitelistState whitelistState, WhitelistEntry whitelistEntry) {
        WhitelistEntryState.MutableWhitelistEntryState whitelistEntryState = whitelistEntryStateFactory.apply(whitelistState, whitelistEntry.getAccountAddress());
        whitelistEntryState.setName(whitelistEntry.getName());
        whitelistEntryState.setImageUrl(whitelistEntry.getImageUrl());
        whitelistEntryState.setDescription(whitelistEntry.getDescription());
        whitelistEntryState.setBackgroundColor(whitelistEntry.getBackgroundColor());
        whitelistEntryState.setRace(whitelistEntry.getRace());
        whitelistEntryState.setEyes(whitelistEntry.getEyes());
        whitelistEntryState.setMouth(whitelistEntry.getMouth());
        whitelistEntryState.setHaircut(whitelistEntry.getHaircut());
        whitelistEntryState.setSkin(whitelistEntry.getSkin());
        whitelistEntryState.setOutfit(whitelistEntry.getOutfit());
        whitelistEntryState.setAccessories(whitelistEntry.getAccessories());
        whitelistEntryState.setClaimed(whitelistEntry.getClaimed());
        whitelistEntryState.setPaused(whitelistEntry.getPaused());
        return whitelistEntryState;
    }

    private List<WhitelistEntry> getWhitelistEntries(String whitelistEntryTableId) {
        List<WhitelistEntry> whitelistEntries = new ArrayList<>();
        String cursor = null;
        while (true) {
            DynamicFieldPage<?> whitelistEntryFieldPage = suiJsonRpcClient.getDynamicFields(whitelistEntryTableId, cursor, null);
            for (DynamicFieldInfo whitelistEntryFieldInfo : whitelistEntryFieldPage.getData()) {
                String fieldObjectId = whitelistEntryFieldInfo.getObjectId();
                SuiMoveObjectResponse<WhitelistEntryDynamicField> getWhitelistEntryFieldResponse
                        = suiJsonRpcClient.getMoveObject(fieldObjectId, new SuiObjectDataOptions(true, true, true, true, true, true, true), WhitelistEntryDynamicField.class);
                WhitelistEntry whitelistEntry = getWhitelistEntryFieldResponse
                        .getData().getContent().getFields().getValue().getFields();
                whitelistEntries.add(whitelistEntry);
            }
            cursor = whitelistEntryFieldPage.getNextCursor();
            if (!Page.hasNextPage(whitelistEntryFieldPage)) {
                break;
            }
        }
        return whitelistEntries;
    }

    
}

