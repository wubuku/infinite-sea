// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.dddml.suiinfinitesea.domain.avatarchange.AbstractAvatarChangeEvent;
import org.dddml.suiinfinitesea.sui.contract.ContractConstants;
import org.dddml.suiinfinitesea.sui.contract.DomainBeanUtils;
import org.dddml.suiinfinitesea.sui.contract.SuiPackage;
import org.dddml.suiinfinitesea.sui.contract.avatarchange.AvatarChangeCreated;
import org.dddml.suiinfinitesea.sui.contract.avatarchange.AvatarChangeUpdated;
import org.dddml.suiinfinitesea.sui.contract.avatarchange.AvatarChangeDeleted;
import org.dddml.suiinfinitesea.sui.contract.repository.AvatarChangeEventRepository;
import org.dddml.suiinfinitesea.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class AvatarChangeEventService {

    public static final java.util.Set<String> DELETION_COMMAND_EVENTS = new java.util.HashSet<>(java.util.Arrays.asList("AvatarChangeDeleted"));

    public static boolean isDeletionCommand(String eventType) {
        return DELETION_COMMAND_EVENTS.contains(eventType);
    }

    public static boolean isDeletionCommand(AbstractAvatarChangeEvent e) {
        if (isDeletionCommand(e.getEventType())) {
            return true;
        }
        return false;
    }

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private AvatarChangeEventRepository avatarChangeEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractAvatarChangeEvent event) {
        event.setEventStatus("D");
        avatarChangeEventRepository.save(event);
    }

    @Transactional
    public void pullAvatarChangeCreatedEvents() {
        String packageId = getNftSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getAvatarChangeCreatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<AvatarChangeCreated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.AVATAR_CHANGE_MODULE_AVATAR_CHANGE_CREATED,
                    cursor, limit, false, AvatarChangeCreated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<AvatarChangeCreated> eventEnvelope : eventPage.getData()) {
                    saveAvatarChangeCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getAvatarChangeCreatedEventNextCursor() {
        AbstractAvatarChangeEvent lastEvent = avatarChangeEventRepository.findFirstAvatarChangeCreatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveAvatarChangeCreated(SuiMoveEventEnvelope<AvatarChangeCreated> eventEnvelope) {
        AbstractAvatarChangeEvent.AvatarChangeCreated avatarChangeCreated = DomainBeanUtils.toAvatarChangeCreated(eventEnvelope);
        if (avatarChangeEventRepository.findById(avatarChangeCreated.getAvatarChangeEventId()).isPresent()) {
            return;
        }
        avatarChangeEventRepository.save(avatarChangeCreated);
    }

    @Transactional
    public void pullAvatarChangeUpdatedEvents() {
        String packageId = getNftSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getAvatarChangeUpdatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<AvatarChangeUpdated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.AVATAR_CHANGE_MODULE_AVATAR_CHANGE_UPDATED,
                    cursor, limit, false, AvatarChangeUpdated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<AvatarChangeUpdated> eventEnvelope : eventPage.getData()) {
                    saveAvatarChangeUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getAvatarChangeUpdatedEventNextCursor() {
        AbstractAvatarChangeEvent lastEvent = avatarChangeEventRepository.findFirstAvatarChangeUpdatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveAvatarChangeUpdated(SuiMoveEventEnvelope<AvatarChangeUpdated> eventEnvelope) {
        AbstractAvatarChangeEvent.AvatarChangeUpdated avatarChangeUpdated = DomainBeanUtils.toAvatarChangeUpdated(eventEnvelope);
        if (avatarChangeEventRepository.findById(avatarChangeUpdated.getAvatarChangeEventId()).isPresent()) {
            return;
        }
        avatarChangeEventRepository.save(avatarChangeUpdated);
    }

    @Transactional
    public void pullAvatarChangeDeletedEvents() {
        String packageId = getNftSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getAvatarChangeDeletedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<AvatarChangeDeleted> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.AVATAR_CHANGE_MODULE_AVATAR_CHANGE_DELETED,
                    cursor, limit, false, AvatarChangeDeleted.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<AvatarChangeDeleted> eventEnvelope : eventPage.getData()) {
                    saveAvatarChangeDeleted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getAvatarChangeDeletedEventNextCursor() {
        AbstractAvatarChangeEvent lastEvent = avatarChangeEventRepository.findFirstAvatarChangeDeletedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveAvatarChangeDeleted(SuiMoveEventEnvelope<AvatarChangeDeleted> eventEnvelope) {
        AbstractAvatarChangeEvent.AvatarChangeDeleted avatarChangeDeleted = DomainBeanUtils.toAvatarChangeDeleted(eventEnvelope);
        if (avatarChangeEventRepository.findById(avatarChangeDeleted.getAvatarChangeEventId()).isPresent()) {
            return;
        }
        avatarChangeEventRepository.save(avatarChangeDeleted);
    }


    private String getNftSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.NFT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
