// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.dddml.suiinfinitesea.domain.whitelist.AbstractWhitelistEvent;
import org.dddml.suiinfinitesea.sui.contract.ContractConstants;
import org.dddml.suiinfinitesea.sui.contract.DomainBeanUtils;
import org.dddml.suiinfinitesea.sui.contract.SuiPackage;
import org.dddml.suiinfinitesea.sui.contract.whitelist.InitWhitelistEvent;
import org.dddml.suiinfinitesea.sui.contract.whitelist.WhitelistUpdated;
import org.dddml.suiinfinitesea.sui.contract.whitelist.WhitelistEntryAdded;
import org.dddml.suiinfinitesea.sui.contract.whitelist.WhitelistEntryUpdated;
import org.dddml.suiinfinitesea.sui.contract.whitelist.WhitelistClaimed;
import org.dddml.suiinfinitesea.sui.contract.whitelist.WhitelistCreated;
import org.dddml.suiinfinitesea.sui.contract.repository.WhitelistEventRepository;
import org.dddml.suiinfinitesea.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class WhitelistEventService {

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private WhitelistEventRepository whitelistEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractWhitelistEvent event) {
        event.setEventStatus("D");
        whitelistEventRepository.save(event);
    }

    @Transactional
    public void pullInitWhitelistEvents() {
        String packageId = getNftSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getInitWhitelistEventNextCursor();
        while (true) {
            PaginatedMoveEvents<InitWhitelistEvent> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.WHITELIST_MODULE_INIT_WHITELIST_EVENT,
                    cursor, limit, false, InitWhitelistEvent.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<InitWhitelistEvent> eventEnvelope : eventPage.getData()) {
                    saveInitWhitelistEvent(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getInitWhitelistEventNextCursor() {
        AbstractWhitelistEvent lastEvent = whitelistEventRepository.findFirstInitWhitelistEventByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveInitWhitelistEvent(SuiMoveEventEnvelope<InitWhitelistEvent> eventEnvelope) {
        AbstractWhitelistEvent.InitWhitelistEvent initWhitelistEvent = DomainBeanUtils.toInitWhitelistEvent(eventEnvelope);
        if (whitelistEventRepository.findById(initWhitelistEvent.getWhitelistEventId()).isPresent()) {
            return;
        }
        whitelistEventRepository.save(initWhitelistEvent);
    }

    @Transactional
    public void pullWhitelistUpdatedEvents() {
        String packageId = getNftSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getWhitelistUpdatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<WhitelistUpdated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.WHITELIST_MODULE_WHITELIST_UPDATED,
                    cursor, limit, false, WhitelistUpdated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<WhitelistUpdated> eventEnvelope : eventPage.getData()) {
                    saveWhitelistUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getWhitelistUpdatedEventNextCursor() {
        AbstractWhitelistEvent lastEvent = whitelistEventRepository.findFirstWhitelistUpdatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveWhitelistUpdated(SuiMoveEventEnvelope<WhitelistUpdated> eventEnvelope) {
        AbstractWhitelistEvent.WhitelistUpdated whitelistUpdated = DomainBeanUtils.toWhitelistUpdated(eventEnvelope);
        if (whitelistEventRepository.findById(whitelistUpdated.getWhitelistEventId()).isPresent()) {
            return;
        }
        whitelistEventRepository.save(whitelistUpdated);
    }

    @Transactional
    public void pullWhitelistEntryAddedEvents() {
        String packageId = getNftSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getWhitelistEntryAddedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<WhitelistEntryAdded> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.WHITELIST_MODULE_WHITELIST_ENTRY_ADDED,
                    cursor, limit, false, WhitelistEntryAdded.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<WhitelistEntryAdded> eventEnvelope : eventPage.getData()) {
                    saveWhitelistEntryAdded(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getWhitelistEntryAddedEventNextCursor() {
        AbstractWhitelistEvent lastEvent = whitelistEventRepository.findFirstWhitelistEntryAddedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveWhitelistEntryAdded(SuiMoveEventEnvelope<WhitelistEntryAdded> eventEnvelope) {
        AbstractWhitelistEvent.WhitelistEntryAdded whitelistEntryAdded = DomainBeanUtils.toWhitelistEntryAdded(eventEnvelope);
        if (whitelistEventRepository.findById(whitelistEntryAdded.getWhitelistEventId()).isPresent()) {
            return;
        }
        whitelistEventRepository.save(whitelistEntryAdded);
    }

    @Transactional
    public void pullWhitelistEntryUpdatedEvents() {
        String packageId = getNftSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getWhitelistEntryUpdatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<WhitelistEntryUpdated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.WHITELIST_MODULE_WHITELIST_ENTRY_UPDATED,
                    cursor, limit, false, WhitelistEntryUpdated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<WhitelistEntryUpdated> eventEnvelope : eventPage.getData()) {
                    saveWhitelistEntryUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getWhitelistEntryUpdatedEventNextCursor() {
        AbstractWhitelistEvent lastEvent = whitelistEventRepository.findFirstWhitelistEntryUpdatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveWhitelistEntryUpdated(SuiMoveEventEnvelope<WhitelistEntryUpdated> eventEnvelope) {
        AbstractWhitelistEvent.WhitelistEntryUpdated whitelistEntryUpdated = DomainBeanUtils.toWhitelistEntryUpdated(eventEnvelope);
        if (whitelistEventRepository.findById(whitelistEntryUpdated.getWhitelistEventId()).isPresent()) {
            return;
        }
        whitelistEventRepository.save(whitelistEntryUpdated);
    }

    @Transactional
    public void pullWhitelistClaimedEvents() {
        String packageId = getNftSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getWhitelistClaimedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<WhitelistClaimed> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.WHITELIST_MODULE_WHITELIST_CLAIMED,
                    cursor, limit, false, WhitelistClaimed.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<WhitelistClaimed> eventEnvelope : eventPage.getData()) {
                    saveWhitelistClaimed(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getWhitelistClaimedEventNextCursor() {
        AbstractWhitelistEvent lastEvent = whitelistEventRepository.findFirstWhitelistClaimedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveWhitelistClaimed(SuiMoveEventEnvelope<WhitelistClaimed> eventEnvelope) {
        AbstractWhitelistEvent.WhitelistClaimed whitelistClaimed = DomainBeanUtils.toWhitelistClaimed(eventEnvelope);
        if (whitelistEventRepository.findById(whitelistClaimed.getWhitelistEventId()).isPresent()) {
            return;
        }
        whitelistEventRepository.save(whitelistClaimed);
    }

    @Transactional
    public void pullWhitelistCreatedEvents() {
        String packageId = getNftSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getWhitelistCreatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<WhitelistCreated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.WHITELIST_MODULE_WHITELIST_CREATED,
                    cursor, limit, false, WhitelistCreated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<WhitelistCreated> eventEnvelope : eventPage.getData()) {
                    saveWhitelistCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getWhitelistCreatedEventNextCursor() {
        AbstractWhitelistEvent lastEvent = whitelistEventRepository.findFirstWhitelistCreatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveWhitelistCreated(SuiMoveEventEnvelope<WhitelistCreated> eventEnvelope) {
        AbstractWhitelistEvent.WhitelistCreated whitelistCreated = DomainBeanUtils.toWhitelistCreated(eventEnvelope);
        if (whitelistEventRepository.findById(whitelistCreated.getWhitelistEventId()).isPresent()) {
            return;
        }
        whitelistEventRepository.save(whitelistCreated);
    }


    private String getNftSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.NFT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
