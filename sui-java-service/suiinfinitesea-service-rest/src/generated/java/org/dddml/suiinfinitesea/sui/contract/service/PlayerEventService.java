// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.dddml.suiinfinitesea.domain.player.AbstractPlayerEvent;
import org.dddml.suiinfinitesea.sui.contract.ContractConstants;
import org.dddml.suiinfinitesea.sui.contract.DomainBeanUtils;
import org.dddml.suiinfinitesea.sui.contract.SuiPackage;
import org.dddml.suiinfinitesea.sui.contract.player.PlayerCreated;
import org.dddml.suiinfinitesea.sui.contract.player.IslandClaimed;
import org.dddml.suiinfinitesea.sui.contract.player.NftHolderIslandClaimed;
import org.dddml.suiinfinitesea.sui.contract.player.PlayerAirdropped;
import org.dddml.suiinfinitesea.sui.contract.player.PlayerIslandResourcesGathered;
import org.dddml.suiinfinitesea.sui.contract.repository.PlayerEventRepository;
import org.dddml.suiinfinitesea.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class PlayerEventService {

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private PlayerEventRepository playerEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractPlayerEvent event) {
        event.setEventStatus("D");
        playerEventRepository.save(event);
    }

    @Transactional
    public void pullPlayerCreatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPlayerCreatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PlayerCreated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PLAYER_MODULE_PLAYER_CREATED,
                    cursor, limit, false, PlayerCreated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PlayerCreated> eventEnvelope : eventPage.getData()) {
                    savePlayerCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPlayerCreatedEventNextCursor() {
        AbstractPlayerEvent lastEvent = playerEventRepository.findFirstPlayerCreatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePlayerCreated(SuiMoveEventEnvelope<PlayerCreated> eventEnvelope) {
        AbstractPlayerEvent.PlayerCreated playerCreated = DomainBeanUtils.toPlayerCreated(eventEnvelope);
        if (playerEventRepository.findById(playerCreated.getPlayerEventId()).isPresent()) {
            return;
        }
        playerEventRepository.save(playerCreated);
    }

    @Transactional
    public void pullIslandClaimedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getIslandClaimedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<IslandClaimed> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PLAYER_MODULE_ISLAND_CLAIMED,
                    cursor, limit, false, IslandClaimed.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<IslandClaimed> eventEnvelope : eventPage.getData()) {
                    saveIslandClaimed(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getIslandClaimedEventNextCursor() {
        AbstractPlayerEvent lastEvent = playerEventRepository.findFirstIslandClaimedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveIslandClaimed(SuiMoveEventEnvelope<IslandClaimed> eventEnvelope) {
        AbstractPlayerEvent.IslandClaimed islandClaimed = DomainBeanUtils.toIslandClaimed(eventEnvelope);
        if (playerEventRepository.findById(islandClaimed.getPlayerEventId()).isPresent()) {
            return;
        }
        playerEventRepository.save(islandClaimed);
    }

    @Transactional
    public void pullNftHolderIslandClaimedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getNftHolderIslandClaimedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<NftHolderIslandClaimed> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PLAYER_MODULE_NFT_HOLDER_ISLAND_CLAIMED,
                    cursor, limit, false, NftHolderIslandClaimed.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<NftHolderIslandClaimed> eventEnvelope : eventPage.getData()) {
                    saveNftHolderIslandClaimed(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getNftHolderIslandClaimedEventNextCursor() {
        AbstractPlayerEvent lastEvent = playerEventRepository.findFirstNftHolderIslandClaimedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveNftHolderIslandClaimed(SuiMoveEventEnvelope<NftHolderIslandClaimed> eventEnvelope) {
        AbstractPlayerEvent.NftHolderIslandClaimed nftHolderIslandClaimed = DomainBeanUtils.toNftHolderIslandClaimed(eventEnvelope);
        if (playerEventRepository.findById(nftHolderIslandClaimed.getPlayerEventId()).isPresent()) {
            return;
        }
        playerEventRepository.save(nftHolderIslandClaimed);
    }

    @Transactional
    public void pullPlayerAirdroppedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPlayerAirdroppedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PlayerAirdropped> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PLAYER_MODULE_PLAYER_AIRDROPPED,
                    cursor, limit, false, PlayerAirdropped.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PlayerAirdropped> eventEnvelope : eventPage.getData()) {
                    savePlayerAirdropped(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPlayerAirdroppedEventNextCursor() {
        AbstractPlayerEvent lastEvent = playerEventRepository.findFirstPlayerAirdroppedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePlayerAirdropped(SuiMoveEventEnvelope<PlayerAirdropped> eventEnvelope) {
        AbstractPlayerEvent.PlayerAirdropped playerAirdropped = DomainBeanUtils.toPlayerAirdropped(eventEnvelope);
        if (playerEventRepository.findById(playerAirdropped.getPlayerEventId()).isPresent()) {
            return;
        }
        playerEventRepository.save(playerAirdropped);
    }

    @Transactional
    public void pullPlayerIslandResourcesGatheredEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPlayerIslandResourcesGatheredEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PlayerIslandResourcesGathered> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PLAYER_MODULE_PLAYER_ISLAND_RESOURCES_GATHERED,
                    cursor, limit, false, PlayerIslandResourcesGathered.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PlayerIslandResourcesGathered> eventEnvelope : eventPage.getData()) {
                    savePlayerIslandResourcesGathered(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPlayerIslandResourcesGatheredEventNextCursor() {
        AbstractPlayerEvent lastEvent = playerEventRepository.findFirstPlayerIslandResourcesGatheredByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePlayerIslandResourcesGathered(SuiMoveEventEnvelope<PlayerIslandResourcesGathered> eventEnvelope) {
        AbstractPlayerEvent.PlayerIslandResourcesGathered playerIslandResourcesGathered = DomainBeanUtils.toPlayerIslandResourcesGathered(eventEnvelope);
        if (playerEventRepository.findById(playerIslandResourcesGathered.getPlayerEventId()).isPresent()) {
            return;
        }
        playerEventRepository.save(playerIslandResourcesGathered);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
