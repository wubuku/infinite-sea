// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.sui.contract.service;

import com.fasterxml.jackson.databind.ObjectMapper;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.bean.PaginatedEvents;
import com.github.wubuku.sui.bean.SuiEventEnvelope;
import com.github.wubuku.sui.bean.SuiEventFilter;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.dddml.suiinfinitesea.domain.experiencetable.AbstractExperienceTableEvent;
import org.dddml.suiinfinitesea.sui.contract.ContractConstants;
import org.dddml.suiinfinitesea.sui.contract.DomainBeanUtils;
import org.dddml.suiinfinitesea.sui.contract.SuiPackage;
import org.dddml.suiinfinitesea.sui.contract.experiencetable.InitExperienceTableEvent;
import org.dddml.suiinfinitesea.sui.contract.experiencetable.ExperienceLevelAdded;
import org.dddml.suiinfinitesea.sui.contract.experiencetable.ExperienceLevelUpdated;
import org.dddml.suiinfinitesea.sui.contract.repository.ExperienceTableEventRepository;
import org.dddml.suiinfinitesea.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class ExperienceTableEventService {
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private ExperienceTableEventRepository experienceTableEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractExperienceTableEvent event) {
        event.setEventStatus("D");
        experienceTableEventRepository.save(event);
    }

    @Transactional
    public void pullExperienceTableEvents() {
        String packageId = getCommonSuiPackageId();
        if (packageId == null) {
            return;
        }
        SuiEventFilter suiEventFilter = new SuiEventFilter.MoveEventModule(packageId, "experience_table");
        int limit = 10;
        EventId cursor = getExperienceTableEventNextCursor();
        while (true) {
            PaginatedEvents eventPage = suiJsonRpcClient.queryEvents(
                    suiEventFilter,
                    cursor, limit, false);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiEventEnvelope eventEnvelope : eventPage.getData()) {
                    String t = eventEnvelope.getType();
                    AbstractExperienceTableEvent e;
                    if (t.equals(packageId + "::" + ContractConstants.EXPERIENCE_TABLE_MODULE_INIT_EXPERIENCE_TABLE_EVENT)) {
                        e = DomainBeanUtils.toInitExperienceTableEvent(objectMapper.convertValue(eventEnvelope.getParsedJson(), InitExperienceTableEvent.class));
                    } else if (t.equals(packageId + "::" + ContractConstants.EXPERIENCE_TABLE_MODULE_EXPERIENCE_LEVEL_ADDED)) {
                        e = DomainBeanUtils.toExperienceLevelAdded(objectMapper.convertValue(eventEnvelope.getParsedJson(), ExperienceLevelAdded.class));
                    } else if (t.equals(packageId + "::" + ContractConstants.EXPERIENCE_TABLE_MODULE_EXPERIENCE_LEVEL_UPDATED)) {
                        e = DomainBeanUtils.toExperienceLevelUpdated(objectMapper.convertValue(eventEnvelope.getParsedJson(), ExperienceLevelUpdated.class));
                    } else {
                        e = null;
                    }
                    if (e != null) {
                        DomainBeanUtils.setExperienceTableEventEnvelopeProperties(e, eventEnvelope);
                        saveExperienceTableEvent(e);
                    }
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getExperienceTableEventNextCursor() {
        AbstractExperienceTableEvent lastEvent = experienceTableEventRepository.findFirstByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveExperienceTableEvent(AbstractExperienceTableEvent event) {
        if (experienceTableEventRepository.findById(event.getExperienceTableEventId()).isPresent()) {
            return;
        }
        experienceTableEventRepository.save(event);
    }


    private String getCommonSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.COMMON_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
