// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.sui.contract.taskservice;

import org.dddml.suiinfinitesea.domain.roster.AbstractRosterEvent;
import org.dddml.suiinfinitesea.sui.contract.repository.*;
import org.dddml.suiinfinitesea.sui.contract.service.*;
import org.dddml.suiinfinitesea.domain.roster.RosterStateQueryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class UpdateRosterStateTaskService {

    @Autowired
    private SuiRosterService suiRosterService;

    @Autowired
    private RosterEventRepository rosterEventRepository;

    @Autowired
    private RosterEventService rosterEventService;

    @Autowired
    private RosterStateQueryRepository rosterStateQueryRepository;

    @Scheduled(fixedDelayString = "${sui.contract.update-roster-states.fixed-delay:5000}")
    @Transactional
    public void updateRosterStates() {
        java.util.List<AbstractRosterEvent> es = rosterEventRepository.findByEventStatusIsNull();
        AbstractRosterEvent e = es.stream().findFirst().orElse(null);
        if (e != null) {
            String objectId = e.getId_();
            suiRosterService.updateRosterState(objectId);
            es.stream().filter(ee -> ee.getId_().equals(objectId))
                    .forEach(rosterEventService::updateStatusToProcessed);
        }
    }

    @Scheduled(fixedDelayString = "${sui.contract.update-all-roster-states.fixed-delay:50000}")
    @Transactional
    public void updateAllRosterStates() {
        rosterStateQueryRepository.getAll(0, Integer.MAX_VALUE).forEach(s -> {
            String objectId = s.getId_();
            suiRosterService.updateRosterState(objectId);
        });
    }
}
