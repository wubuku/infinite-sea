// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.sui.contract.service;

import com.fasterxml.jackson.databind.ObjectMapper;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedEvents;
import com.github.wubuku.sui.bean.SuiEventEnvelope;
import com.github.wubuku.sui.bean.SuiEventFilter;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.dddml.suiinfinitesea.domain.shipbattle.AbstractShipBattleEvent;
import org.dddml.suiinfinitesea.sui.contract.ContractConstants;
import org.dddml.suiinfinitesea.sui.contract.DomainBeanUtils;
import org.dddml.suiinfinitesea.sui.contract.SuiPackage;
import org.dddml.suiinfinitesea.sui.contract.shipbattle.ShipBattleInitiated;
import org.dddml.suiinfinitesea.sui.contract.shipbattle.ShipBattleMoveMade;
import org.dddml.suiinfinitesea.sui.contract.shipbattle.ShipBattleLootTaken;
import org.dddml.suiinfinitesea.sui.contract.repository.ShipBattleEventRepository;
import org.dddml.suiinfinitesea.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class ShipBattleEventService {
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private ShipBattleEventRepository shipBattleEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractShipBattleEvent event) {
        event.setEventStatus("D");
        shipBattleEventRepository.save(event);
    }

    @Transactional
    public void updateStatusToE(AbstractShipBattleEvent event) {
        event.setEventStatus("E");
        shipBattleEventRepository.save(event);
    }

    @Transactional
    public void pullShipBattleEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        SuiEventFilter suiEventFilter = new SuiEventFilter.MoveEventModule(packageId, "ship_battle");
        int limit = 10;
        EventId cursor = getShipBattleEventNextCursor();
        while (true) {
            PaginatedEvents eventPage = suiJsonRpcClient.queryEvents(
                    suiEventFilter,
                    cursor, limit, false);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiEventEnvelope eventEnvelope : eventPage.getData()) {
                    String t = eventEnvelope.getType();
                    AbstractShipBattleEvent e;
                    if (t.equals(packageId + "::" + ContractConstants.SHIP_BATTLE_MODULE_SHIP_BATTLE_INITIATED)) {
                        e = DomainBeanUtils.toShipBattleInitiated(objectMapper.convertValue(eventEnvelope.getParsedJson(), ShipBattleInitiated.class));
                    } else if (t.equals(packageId + "::" + ContractConstants.SHIP_BATTLE_MODULE_SHIP_BATTLE_MOVE_MADE)) {
                        e = DomainBeanUtils.toShipBattleMoveMade(objectMapper.convertValue(eventEnvelope.getParsedJson(), ShipBattleMoveMade.class));
                    } else if (t.equals(packageId + "::" + ContractConstants.SHIP_BATTLE_MODULE_SHIP_BATTLE_LOOT_TAKEN)) {
                        e = DomainBeanUtils.toShipBattleLootTaken(objectMapper.convertValue(eventEnvelope.getParsedJson(), ShipBattleLootTaken.class));
                    } else {
                        e = null;
                    }
                    if (e != null) {
                        DomainBeanUtils.setShipBattleEventEnvelopeProperties(e, eventEnvelope);
                        saveShipBattleEvent(e);
                    }
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getShipBattleEventNextCursor() {
        AbstractShipBattleEvent lastEvent = shipBattleEventRepository.findFirstByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveShipBattleEvent(AbstractShipBattleEvent event) {
        if (shipBattleEventRepository.findById(event.getShipBattleEventId()).isPresent()) {
            return;
        }
        shipBattleEventRepository.save(event);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
