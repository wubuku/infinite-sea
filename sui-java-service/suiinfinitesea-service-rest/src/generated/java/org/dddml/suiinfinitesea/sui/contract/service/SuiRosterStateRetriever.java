// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.sui.contract.service;

import com.github.wubuku.sui.bean.*;
import com.github.wubuku.sui.utils.*;
import org.dddml.suiinfinitesea.domain.roster.*;
import org.dddml.suiinfinitesea.domain.*;
import org.dddml.suiinfinitesea.sui.contract.DomainBeanUtils;
import org.dddml.suiinfinitesea.sui.contract.Roster;

import java.util.*;
import java.math.*;
import java.util.function.*;

public class SuiRosterStateRetriever {

    private SuiJsonRpcClient suiJsonRpcClient;

    private Function<RosterId, RosterState.MutableRosterState> rosterStateFactory;
    private BiFunction<RosterState, String, RosterShipsItemState.MutableRosterShipsItemState> rosterShipsItemStateFactory;

    public SuiRosterStateRetriever(SuiJsonRpcClient suiJsonRpcClient,
                                  Function<RosterId, RosterState.MutableRosterState> rosterStateFactory,
                                  BiFunction<RosterState, String, RosterShipsItemState.MutableRosterShipsItemState> rosterShipsItemStateFactory
    ) {
        this.suiJsonRpcClient = suiJsonRpcClient;
        this.rosterStateFactory = rosterStateFactory;
        this.rosterShipsItemStateFactory = rosterShipsItemStateFactory;
    }

    public RosterState retrieveRosterState(String objectId) {
        SuiMoveObjectResponse<Roster> getObjectDataResponse = suiJsonRpcClient.getMoveObject(
                objectId, new SuiObjectDataOptions(true, true, true, true, true, true, true), Roster.class
        );
        if (getObjectDataResponse.getData() == null) {
            return null;
        }
        Roster roster = getObjectDataResponse.getData().getContent().getFields();
        return toRosterState(roster);
    }

    private RosterState toRosterState(Roster roster) {
        RosterState.MutableRosterState rosterState = rosterStateFactory.apply(DomainBeanUtils.toRosterId(roster.getRosterId()));
        rosterState.setId_(roster.getId().getId());
        rosterState.setVersion(roster.getVersion());
        rosterState.setStatus(roster.getStatus());
        rosterState.setSpeed(roster.getSpeed());
        rosterState.setShipIds(new HashSet<>(Arrays.asList(roster.getShipIds())));
        rosterState.setShips(DomainBeanUtils.toObjectTable(roster.getShips()));
        rosterState.setUpdatedCoordinates(DomainBeanUtils.toCoordinates(roster.getUpdatedCoordinates()));
        rosterState.setCoordinatesUpdatedAt(roster.getCoordinatesUpdatedAt());
        rosterState.setTargetCoordinates(DomainBeanUtils.toCoordinates(roster.getTargetCoordinates()));
        rosterState.setSailDuration(roster.getSailDuration());
        rosterState.setShipBattleId(roster.getShipBattleId());
        rosterState.setEnvironmentOwned(roster.getEnvironmentOwned());
        rosterState.setBaseExperience(roster.getBaseExperience());
        rosterState.setEnergyVault(roster.getEnergyVault());
        if (roster.getShips() != null) {
            String rosterShipsItemTableId = roster.getShips().getFields().getId().getId();
            List<RosterShipsItemState> rosterShipsItems = getRosterShipsItems(rosterState, rosterShipsItemTableId);
            for (RosterShipsItemState i : rosterShipsItems) {
                ((EntityStateCollection.ModifiableEntityStateCollection)rosterState.getRosterShipsItems()).add(i);
            }
        }

        return rosterState;
    }

    private RosterShipsItemState toRosterShipsItemState(RosterState rosterState, String key, java.util.Map<String, Object> value) {
        RosterShipsItemState.MutableRosterShipsItemState rosterShipsItemState = rosterShipsItemStateFactory.apply(rosterState, key);
        rosterShipsItemState.setValue(value);
        return rosterShipsItemState;
    }

    private List<RosterShipsItemState> getRosterShipsItems(RosterState rosterState, String rosterShipsItemTableId) {
        List<RosterShipsItemState> rosterShipsItems = new ArrayList<>();
        String cursor = null;
        while (true) {
            DynamicFieldPage<String> rosterShipsItemFieldPage = suiJsonRpcClient.getDynamicFields(rosterShipsItemTableId, cursor, null, String.class);
            for (DynamicFieldInfo<String> rosterShipsItemFieldInfo : rosterShipsItemFieldPage.getData()) {
                String fieldObjectId = rosterShipsItemFieldInfo.getObjectId();
                SuiMoveObjectResponse<java.util.Map<String, Object>> getRosterShipsItemObjectResponse
                        = suiJsonRpcClient.getMoveObject(fieldObjectId, new SuiObjectDataOptions(true, true, true, true, true, true, true), new com.fasterxml.jackson.core.type.TypeReference<SuiMoveObjectResponse<java.util.Map<String, Object>>>() {});
                String key = rosterShipsItemFieldInfo.getName().getValue();
                java.util.Map<String, Object> value = getRosterShipsItemObjectResponse.getData().getContent().getFields();
                RosterShipsItemState rosterShipsItemState = toRosterShipsItemState(rosterState, key, value);
                rosterShipsItems.add(rosterShipsItemState);
            }
            cursor = rosterShipsItemFieldPage.getNextCursor();
            if (!Page.hasNextPage(rosterShipsItemFieldPage)) {
                break;
            }
        }
        return rosterShipsItems;
    }

    
}

