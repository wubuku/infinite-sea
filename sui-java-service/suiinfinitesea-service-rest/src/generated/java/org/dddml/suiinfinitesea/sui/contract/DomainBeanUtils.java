// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.sui.contract;

import java.math.*;
import java.util.*;

import com.github.wubuku.sui.bean.AbstractSuiEventEnvelope;
import com.github.wubuku.sui.bean.MoveEvent;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.bean.Table;
import com.github.wubuku.sui.bean.ObjectTable;
import org.dddml.suiinfinitesea.domain.avatar.AbstractAvatarEvent;
import org.dddml.suiinfinitesea.sui.contract.avatar.AvatarMinted;
import org.dddml.suiinfinitesea.sui.contract.avatar.AvatarUpdated;
import org.dddml.suiinfinitesea.sui.contract.avatar.AvatarBurned;
import org.dddml.suiinfinitesea.sui.contract.avatar.AvatarWhitelistMinted;
import org.dddml.suiinfinitesea.domain.avatarchange.AbstractAvatarChangeEvent;
import org.dddml.suiinfinitesea.sui.contract.avatarchange.AvatarChangeCreated;
import org.dddml.suiinfinitesea.sui.contract.avatarchange.AvatarChangeUpdated;
import org.dddml.suiinfinitesea.sui.contract.avatarchange.AvatarChangeDeleted;
import org.dddml.suiinfinitesea.domain.skillprocess.AbstractSkillProcessEvent;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.SkillProcessCreated;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.ProductionProcessStarted;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.ProductionProcessCompleted;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.ShipProductionProcessStarted;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.ShipProductionProcessCompleted;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.CreationProcessStarted;
import org.dddml.suiinfinitesea.sui.contract.skillprocess.CreationProcessCompleted;
import org.dddml.suiinfinitesea.domain.ship.AbstractShipEvent;
import org.dddml.suiinfinitesea.sui.contract.ship.ShipCreated;
import org.dddml.suiinfinitesea.domain.roster.AbstractRosterEvent;
import org.dddml.suiinfinitesea.sui.contract.roster.RosterCreated;
import org.dddml.suiinfinitesea.sui.contract.roster.EnvironmentRosterCreated;
import org.dddml.suiinfinitesea.sui.contract.roster.RosterShipAdded;
import org.dddml.suiinfinitesea.sui.contract.roster.RosterSetSail;
import org.dddml.suiinfinitesea.sui.contract.roster.RosterShipsPositionAdjusted;
import org.dddml.suiinfinitesea.sui.contract.roster.RosterShipTransferred;
import org.dddml.suiinfinitesea.sui.contract.roster.RosterShipInventoryTransferred;
import org.dddml.suiinfinitesea.sui.contract.roster.RosterShipInventoryTakenOut;
import org.dddml.suiinfinitesea.sui.contract.roster.RosterShipInventoryPutIn;
import org.dddml.suiinfinitesea.sui.contract.roster.RosterDeleted;
import org.dddml.suiinfinitesea.domain.shipbattle.AbstractShipBattleEvent;
import org.dddml.suiinfinitesea.sui.contract.shipbattle.ShipBattleInitiated;
import org.dddml.suiinfinitesea.sui.contract.shipbattle.ShipBattleMoveMade;
import org.dddml.suiinfinitesea.sui.contract.shipbattle.ShipBattleLootTaken;
import org.dddml.suiinfinitesea.domain.item.AbstractItemEvent;
import org.dddml.suiinfinitesea.sui.contract.item.ItemCreated;
import org.dddml.suiinfinitesea.sui.contract.item.ItemUpdated;
import org.dddml.suiinfinitesea.domain.itemcreation.AbstractItemCreationEvent;
import org.dddml.suiinfinitesea.sui.contract.itemcreation.ItemCreationCreated;
import org.dddml.suiinfinitesea.sui.contract.itemcreation.ItemCreationUpdated;
import org.dddml.suiinfinitesea.domain.itemproduction.AbstractItemProductionEvent;
import org.dddml.suiinfinitesea.sui.contract.itemproduction.ItemProductionCreated;
import org.dddml.suiinfinitesea.sui.contract.itemproduction.ItemProductionUpdated;
import org.dddml.suiinfinitesea.domain.player.AbstractPlayerEvent;
import org.dddml.suiinfinitesea.sui.contract.player.PlayerCreated;
import org.dddml.suiinfinitesea.sui.contract.player.IslandClaimed;
import org.dddml.suiinfinitesea.sui.contract.player.NftHolderIslandClaimed;
import org.dddml.suiinfinitesea.sui.contract.player.PlayerAirdropped;
import org.dddml.suiinfinitesea.sui.contract.player.PlayerIslandResourcesGathered;
import org.dddml.suiinfinitesea.domain.whitelist.AbstractWhitelistEvent;
import org.dddml.suiinfinitesea.sui.contract.whitelist.InitWhitelistEvent;
import org.dddml.suiinfinitesea.sui.contract.whitelist.WhitelistUpdated;
import org.dddml.suiinfinitesea.sui.contract.whitelist.WhitelistEntryAdded;
import org.dddml.suiinfinitesea.sui.contract.whitelist.WhitelistEntryUpdated;
import org.dddml.suiinfinitesea.sui.contract.whitelist.WhitelistClaimed;
import org.dddml.suiinfinitesea.sui.contract.whitelist.WhitelistCreated;
import org.dddml.suiinfinitesea.domain.map.AbstractMapEvent;
import org.dddml.suiinfinitesea.sui.contract.map.InitMapEvent;
import org.dddml.suiinfinitesea.sui.contract.map.IslandAdded;
import org.dddml.suiinfinitesea.sui.contract.map.MapIslandClaimed;
import org.dddml.suiinfinitesea.sui.contract.map.IslandResourcesGathered;
import org.dddml.suiinfinitesea.sui.contract.map.MapSettingsUpdated;
import org.dddml.suiinfinitesea.sui.contract.map.WhitelistedForClaimingIsland;
import org.dddml.suiinfinitesea.sui.contract.map.UnWhitelistedForClaimingIsland;
import org.dddml.suiinfinitesea.domain.experiencetable.AbstractExperienceTableEvent;
import org.dddml.suiinfinitesea.sui.contract.experiencetable.InitExperienceTableEvent;
import org.dddml.suiinfinitesea.sui.contract.experiencetable.ExperienceLevelAdded;
import org.dddml.suiinfinitesea.sui.contract.experiencetable.ExperienceLevelUpdated;

/**
 * Utils that convert beans in the contract package to domain beans.
 */
public class DomainBeanUtils {
    private DomainBeanUtils() {
    }

    public static org.dddml.suiinfinitesea.domain.Coordinates toCoordinates(Coordinates contractCoordinates) {
        if (contractCoordinates == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.Coordinates coordinates = new org.dddml.suiinfinitesea.domain.Coordinates();
        coordinates.setX(contractCoordinates.getFields().getX());
        coordinates.setY(contractCoordinates.getFields().getY());
        return coordinates;
    }

    public static org.dddml.suiinfinitesea.domain.Coordinates toCoordinates(CoordinatesForEvent contractCoordinates) {
        if (contractCoordinates == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.Coordinates coordinates = new org.dddml.suiinfinitesea.domain.Coordinates();
        coordinates.setX(contractCoordinates.getX());
        coordinates.setY(contractCoordinates.getY());
        return coordinates;
    }

    public static org.dddml.suiinfinitesea.domain.ExperienceLevel toExperienceLevel(ExperienceLevel contractExperienceLevel) {
        if (contractExperienceLevel == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.ExperienceLevel experienceLevel = new org.dddml.suiinfinitesea.domain.ExperienceLevel();
        experienceLevel.setLevel(contractExperienceLevel.getFields().getLevel());
        experienceLevel.setExperience(contractExperienceLevel.getFields().getExperience());
        experienceLevel.setDifference(contractExperienceLevel.getFields().getDifference());
        return experienceLevel;
    }

    public static org.dddml.suiinfinitesea.domain.ExperienceLevel toExperienceLevel(ExperienceLevelForEvent contractExperienceLevel) {
        if (contractExperienceLevel == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.ExperienceLevel experienceLevel = new org.dddml.suiinfinitesea.domain.ExperienceLevel();
        experienceLevel.setLevel(contractExperienceLevel.getLevel());
        experienceLevel.setExperience(contractExperienceLevel.getExperience());
        experienceLevel.setDifference(contractExperienceLevel.getDifference());
        return experienceLevel;
    }

    public static org.dddml.suiinfinitesea.domain.ItemIdQuantityPair toItemIdQuantityPair(ItemIdQuantityPair contractItemIdQuantityPair) {
        if (contractItemIdQuantityPair == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.ItemIdQuantityPair itemIdQuantityPair = new org.dddml.suiinfinitesea.domain.ItemIdQuantityPair();
        itemIdQuantityPair.setItemId(contractItemIdQuantityPair.getFields().getItemId());
        itemIdQuantityPair.setQuantity(contractItemIdQuantityPair.getFields().getQuantity());
        return itemIdQuantityPair;
    }

    public static org.dddml.suiinfinitesea.domain.ItemIdQuantityPair toItemIdQuantityPair(ItemIdQuantityPairForEvent contractItemIdQuantityPair) {
        if (contractItemIdQuantityPair == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.ItemIdQuantityPair itemIdQuantityPair = new org.dddml.suiinfinitesea.domain.ItemIdQuantityPair();
        itemIdQuantityPair.setItemId(contractItemIdQuantityPair.getItemId());
        itemIdQuantityPair.setQuantity(contractItemIdQuantityPair.getQuantity());
        return itemIdQuantityPair;
    }

    public static org.dddml.suiinfinitesea.domain.ItemIdQuantityPairs toItemIdQuantityPairs(ItemIdQuantityPairs contractItemIdQuantityPairs) {
        if (contractItemIdQuantityPairs == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.ItemIdQuantityPairs itemIdQuantityPairs = new org.dddml.suiinfinitesea.domain.ItemIdQuantityPairs();
        itemIdQuantityPairs.setItems(java.util.Arrays.stream(contractItemIdQuantityPairs.getFields().getItems()).map(x -> DomainBeanUtils.toItemIdQuantityPair(x)).collect(java.util.stream.Collectors.toList()));
        return itemIdQuantityPairs;
    }

    public static org.dddml.suiinfinitesea.domain.ItemIdQuantityPairs toItemIdQuantityPairs(ItemIdQuantityPairsForEvent contractItemIdQuantityPairs) {
        if (contractItemIdQuantityPairs == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.ItemIdQuantityPairs itemIdQuantityPairs = new org.dddml.suiinfinitesea.domain.ItemIdQuantityPairs();
        itemIdQuantityPairs.setItems(java.util.Arrays.stream(contractItemIdQuantityPairs.getItems()).map(x -> DomainBeanUtils.toItemIdQuantityPair(x)).collect(java.util.stream.Collectors.toList()));
        return itemIdQuantityPairs;
    }

    public static org.dddml.suiinfinitesea.domain.ObjectTable toObjectTable(ObjectTable contractObjectTable) {
        if (contractObjectTable == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.ObjectTable objectTable = new org.dddml.suiinfinitesea.domain.ObjectTable();
        objectTable.setId(contractObjectTable.getFields().getId().getId());
        objectTable.setSize(contractObjectTable.getFields().getSize());
        return objectTable;
    }

    public static org.dddml.suiinfinitesea.domain.RosterId toRosterId(RosterId contractRosterId) {
        if (contractRosterId == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.RosterId rosterId = new org.dddml.suiinfinitesea.domain.RosterId();
        rosterId.setPlayerId(contractRosterId.getFields().getPlayerId());
        rosterId.setSequenceNumber(contractRosterId.getFields().getSequenceNumber());
        return rosterId;
    }

    public static org.dddml.suiinfinitesea.domain.RosterId toRosterId(RosterIdForEvent contractRosterId) {
        if (contractRosterId == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.RosterId rosterId = new org.dddml.suiinfinitesea.domain.RosterId();
        rosterId.setPlayerId(contractRosterId.getPlayerId());
        rosterId.setSequenceNumber(contractRosterId.getSequenceNumber());
        return rosterId;
    }

    public static org.dddml.suiinfinitesea.domain.SkillProcessId toSkillProcessId(SkillProcessId contractSkillProcessId) {
        if (contractSkillProcessId == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.SkillProcessId skillProcessId = new org.dddml.suiinfinitesea.domain.SkillProcessId();
        skillProcessId.setSkillType(contractSkillProcessId.getFields().getSkillType());
        skillProcessId.setPlayerId(contractSkillProcessId.getFields().getPlayerId());
        skillProcessId.setSequenceNumber(contractSkillProcessId.getFields().getSequenceNumber());
        return skillProcessId;
    }

    public static org.dddml.suiinfinitesea.domain.SkillProcessId toSkillProcessId(SkillProcessIdForEvent contractSkillProcessId) {
        if (contractSkillProcessId == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.SkillProcessId skillProcessId = new org.dddml.suiinfinitesea.domain.SkillProcessId();
        skillProcessId.setSkillType(contractSkillProcessId.getSkillType());
        skillProcessId.setPlayerId(contractSkillProcessId.getPlayerId());
        skillProcessId.setSequenceNumber(contractSkillProcessId.getSequenceNumber());
        return skillProcessId;
    }

    public static org.dddml.suiinfinitesea.domain.SkillTypeItemIdPair toSkillTypeItemIdPair(SkillTypeItemIdPair contractSkillTypeItemIdPair) {
        if (contractSkillTypeItemIdPair == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.SkillTypeItemIdPair skillTypeItemIdPair = new org.dddml.suiinfinitesea.domain.SkillTypeItemIdPair();
        skillTypeItemIdPair.setSkillType(contractSkillTypeItemIdPair.getFields().getSkillType());
        skillTypeItemIdPair.setItemId(contractSkillTypeItemIdPair.getFields().getItemId());
        return skillTypeItemIdPair;
    }

    public static org.dddml.suiinfinitesea.domain.SkillTypeItemIdPair toSkillTypeItemIdPair(SkillTypeItemIdPairForEvent contractSkillTypeItemIdPair) {
        if (contractSkillTypeItemIdPair == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.SkillTypeItemIdPair skillTypeItemIdPair = new org.dddml.suiinfinitesea.domain.SkillTypeItemIdPair();
        skillTypeItemIdPair.setSkillType(contractSkillTypeItemIdPair.getSkillType());
        skillTypeItemIdPair.setItemId(contractSkillTypeItemIdPair.getItemId());
        return skillTypeItemIdPair;
    }

    public static org.dddml.suiinfinitesea.domain.SkillTypePlayerIdPair toSkillTypePlayerIdPair(SkillTypePlayerIdPair contractSkillTypePlayerIdPair) {
        if (contractSkillTypePlayerIdPair == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.SkillTypePlayerIdPair skillTypePlayerIdPair = new org.dddml.suiinfinitesea.domain.SkillTypePlayerIdPair();
        skillTypePlayerIdPair.setSkillType(contractSkillTypePlayerIdPair.getFields().getSkillType());
        skillTypePlayerIdPair.setPlayerId(contractSkillTypePlayerIdPair.getFields().getPlayerId());
        return skillTypePlayerIdPair;
    }

    public static org.dddml.suiinfinitesea.domain.SkillTypePlayerIdPair toSkillTypePlayerIdPair(SkillTypePlayerIdPairForEvent contractSkillTypePlayerIdPair) {
        if (contractSkillTypePlayerIdPair == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.SkillTypePlayerIdPair skillTypePlayerIdPair = new org.dddml.suiinfinitesea.domain.SkillTypePlayerIdPair();
        skillTypePlayerIdPair.setSkillType(contractSkillTypePlayerIdPair.getSkillType());
        skillTypePlayerIdPair.setPlayerId(contractSkillTypePlayerIdPair.getPlayerId());
        return skillTypePlayerIdPair;
    }

    public static org.dddml.suiinfinitesea.domain.Table toTable(Table contractTable) {
        if (contractTable == null) {
            return null;
        }
        org.dddml.suiinfinitesea.domain.Table table = new org.dddml.suiinfinitesea.domain.Table();
        table.setId(contractTable.getFields().getId().getId());
        table.setSize(contractTable.getFields().getSize());
        return table;
    }


    public static AbstractAvatarEvent.AvatarMinted toAvatarMinted(SuiMoveEventEnvelope<AvatarMinted> eventEnvelope) {
        AvatarMinted contractEvent = eventEnvelope.getParsedJson();
        AbstractAvatarEvent.AvatarMinted avatarMinted = toAvatarMinted(contractEvent);
        setAvatarEventEnvelopeProperties(avatarMinted, eventEnvelope);
        return avatarMinted;
    }

    public static AbstractAvatarEvent.AvatarMinted toAvatarMinted(AvatarMinted contractEvent) {
        AbstractAvatarEvent.AvatarMinted avatarMinted = new AbstractAvatarEvent.AvatarMinted();
        avatarMinted.setId(contractEvent.getId());
        avatarMinted.setOwner(contractEvent.getOwner());
        avatarMinted.setName(contractEvent.getName());
        avatarMinted.setImageUrl(contractEvent.getImageUrl());
        avatarMinted.setDescription(contractEvent.getDescription());
        avatarMinted.setBackgroundColor(contractEvent.getBackgroundColor());
        avatarMinted.setRace(contractEvent.getRace());
        avatarMinted.setEyes(contractEvent.getEyes());
        avatarMinted.setMouth(contractEvent.getMouth());
        avatarMinted.setHaircut(contractEvent.getHaircut());
        avatarMinted.setSkin(contractEvent.getSkin());
        avatarMinted.setOutfit(contractEvent.getOutfit());
        avatarMinted.setAccessories(contractEvent.getAccessories());
        avatarMinted.setAura(contractEvent.getAura());
        avatarMinted.setSymbols(contractEvent.getSymbols());
        avatarMinted.setEffects(contractEvent.getEffects());
        avatarMinted.setBackgrounds(contractEvent.getBackgrounds());
        avatarMinted.setDecorations(contractEvent.getDecorations());
        avatarMinted.setBadges(contractEvent.getBadges());
        avatarMinted.setVersion(BigInteger.valueOf(-1));
        return avatarMinted;
    }

    public static AbstractAvatarEvent.AvatarUpdated toAvatarUpdated(SuiMoveEventEnvelope<AvatarUpdated> eventEnvelope) {
        AvatarUpdated contractEvent = eventEnvelope.getParsedJson();
        AbstractAvatarEvent.AvatarUpdated avatarUpdated = toAvatarUpdated(contractEvent);
        setAvatarEventEnvelopeProperties(avatarUpdated, eventEnvelope);
        return avatarUpdated;
    }

    public static AbstractAvatarEvent.AvatarUpdated toAvatarUpdated(AvatarUpdated contractEvent) {
        AbstractAvatarEvent.AvatarUpdated avatarUpdated = new AbstractAvatarEvent.AvatarUpdated();
        avatarUpdated.setId(contractEvent.getId());
        avatarUpdated.setVersion(contractEvent.getVersion());
        return avatarUpdated;
    }

    public static AbstractAvatarEvent.AvatarBurned toAvatarBurned(SuiMoveEventEnvelope<AvatarBurned> eventEnvelope) {
        AvatarBurned contractEvent = eventEnvelope.getParsedJson();
        AbstractAvatarEvent.AvatarBurned avatarBurned = toAvatarBurned(contractEvent);
        setAvatarEventEnvelopeProperties(avatarBurned, eventEnvelope);
        return avatarBurned;
    }

    public static AbstractAvatarEvent.AvatarBurned toAvatarBurned(AvatarBurned contractEvent) {
        AbstractAvatarEvent.AvatarBurned avatarBurned = new AbstractAvatarEvent.AvatarBurned();
        avatarBurned.setId(contractEvent.getId());
        avatarBurned.setVersion(contractEvent.getVersion());
        return avatarBurned;
    }

    public static AbstractAvatarEvent.AvatarWhitelistMinted toAvatarWhitelistMinted(SuiMoveEventEnvelope<AvatarWhitelistMinted> eventEnvelope) {
        AvatarWhitelistMinted contractEvent = eventEnvelope.getParsedJson();
        AbstractAvatarEvent.AvatarWhitelistMinted avatarWhitelistMinted = toAvatarWhitelistMinted(contractEvent);
        setAvatarEventEnvelopeProperties(avatarWhitelistMinted, eventEnvelope);
        return avatarWhitelistMinted;
    }

    public static AbstractAvatarEvent.AvatarWhitelistMinted toAvatarWhitelistMinted(AvatarWhitelistMinted contractEvent) {
        AbstractAvatarEvent.AvatarWhitelistMinted avatarWhitelistMinted = new AbstractAvatarEvent.AvatarWhitelistMinted();
        avatarWhitelistMinted.setId(contractEvent.getId());
        avatarWhitelistMinted.setOwner(contractEvent.getOwner());
        avatarWhitelistMinted.setName(contractEvent.getName());
        avatarWhitelistMinted.setImageUrl(contractEvent.getImageUrl());
        avatarWhitelistMinted.setDescription(contractEvent.getDescription());
        avatarWhitelistMinted.setBackgroundColor(contractEvent.getBackgroundColor());
        avatarWhitelistMinted.setRace(contractEvent.getRace());
        avatarWhitelistMinted.setEyes(contractEvent.getEyes());
        avatarWhitelistMinted.setMouth(contractEvent.getMouth());
        avatarWhitelistMinted.setHaircut(contractEvent.getHaircut());
        avatarWhitelistMinted.setSkin(contractEvent.getSkin());
        avatarWhitelistMinted.setOutfit(contractEvent.getOutfit());
        avatarWhitelistMinted.setAccessories(contractEvent.getAccessories());
        avatarWhitelistMinted.setVersion(BigInteger.valueOf(-1));
        return avatarWhitelistMinted;
    }

    public static AbstractAvatarChangeEvent.AvatarChangeCreated toAvatarChangeCreated(SuiMoveEventEnvelope<AvatarChangeCreated> eventEnvelope) {
        AvatarChangeCreated contractEvent = eventEnvelope.getParsedJson();
        AbstractAvatarChangeEvent.AvatarChangeCreated avatarChangeCreated = toAvatarChangeCreated(contractEvent);
        setAvatarChangeEventEnvelopeProperties(avatarChangeCreated, eventEnvelope);
        return avatarChangeCreated;
    }

    public static AbstractAvatarChangeEvent.AvatarChangeCreated toAvatarChangeCreated(AvatarChangeCreated contractEvent) {
        AbstractAvatarChangeEvent.AvatarChangeCreated avatarChangeCreated = new AbstractAvatarChangeEvent.AvatarChangeCreated();
        avatarChangeCreated.setId_(contractEvent.getId());
        avatarChangeCreated.setAvatarId(contractEvent.getAvatarId());
        avatarChangeCreated.setImageUrl(contractEvent.getImageUrl());
        avatarChangeCreated.setBackgroundColor(contractEvent.getBackgroundColor());
        avatarChangeCreated.setHaircut(contractEvent.getHaircut());
        avatarChangeCreated.setOutfit(contractEvent.getOutfit());
        avatarChangeCreated.setAccessories(contractEvent.getAccessories());
        avatarChangeCreated.setAura(contractEvent.getAura());
        avatarChangeCreated.setSymbols(contractEvent.getSymbols());
        avatarChangeCreated.setEffects(contractEvent.getEffects());
        avatarChangeCreated.setBackgrounds(contractEvent.getBackgrounds());
        avatarChangeCreated.setDecorations(contractEvent.getDecorations());
        avatarChangeCreated.setBadges(contractEvent.getBadges());
        avatarChangeCreated.setVersion(BigInteger.valueOf(-1));
        return avatarChangeCreated;
    }

    public static AbstractAvatarChangeEvent.AvatarChangeUpdated toAvatarChangeUpdated(SuiMoveEventEnvelope<AvatarChangeUpdated> eventEnvelope) {
        AvatarChangeUpdated contractEvent = eventEnvelope.getParsedJson();
        AbstractAvatarChangeEvent.AvatarChangeUpdated avatarChangeUpdated = toAvatarChangeUpdated(contractEvent);
        setAvatarChangeEventEnvelopeProperties(avatarChangeUpdated, eventEnvelope);
        return avatarChangeUpdated;
    }

    public static AbstractAvatarChangeEvent.AvatarChangeUpdated toAvatarChangeUpdated(AvatarChangeUpdated contractEvent) {
        AbstractAvatarChangeEvent.AvatarChangeUpdated avatarChangeUpdated = new AbstractAvatarChangeEvent.AvatarChangeUpdated();
        avatarChangeUpdated.setId_(contractEvent.getId());
        avatarChangeUpdated.setAvatarId(contractEvent.getAvatarId());
        avatarChangeUpdated.setImageUrl(contractEvent.getImageUrl());
        avatarChangeUpdated.setBackgroundColor(contractEvent.getBackgroundColor());
        avatarChangeUpdated.setHaircut(contractEvent.getHaircut());
        avatarChangeUpdated.setOutfit(contractEvent.getOutfit());
        avatarChangeUpdated.setAccessories(contractEvent.getAccessories());
        avatarChangeUpdated.setAura(contractEvent.getAura());
        avatarChangeUpdated.setSymbols(contractEvent.getSymbols());
        avatarChangeUpdated.setEffects(contractEvent.getEffects());
        avatarChangeUpdated.setBackgrounds(contractEvent.getBackgrounds());
        avatarChangeUpdated.setDecorations(contractEvent.getDecorations());
        avatarChangeUpdated.setBadges(contractEvent.getBadges());
        avatarChangeUpdated.setVersion(contractEvent.getVersion());
        return avatarChangeUpdated;
    }

    public static AbstractAvatarChangeEvent.AvatarChangeDeleted toAvatarChangeDeleted(SuiMoveEventEnvelope<AvatarChangeDeleted> eventEnvelope) {
        AvatarChangeDeleted contractEvent = eventEnvelope.getParsedJson();
        AbstractAvatarChangeEvent.AvatarChangeDeleted avatarChangeDeleted = toAvatarChangeDeleted(contractEvent);
        setAvatarChangeEventEnvelopeProperties(avatarChangeDeleted, eventEnvelope);
        return avatarChangeDeleted;
    }

    public static AbstractAvatarChangeEvent.AvatarChangeDeleted toAvatarChangeDeleted(AvatarChangeDeleted contractEvent) {
        AbstractAvatarChangeEvent.AvatarChangeDeleted avatarChangeDeleted = new AbstractAvatarChangeEvent.AvatarChangeDeleted();
        avatarChangeDeleted.setId_(contractEvent.getId());
        avatarChangeDeleted.setAvatarId(contractEvent.getAvatarId());
        avatarChangeDeleted.setVersion(contractEvent.getVersion());
        return avatarChangeDeleted;
    }

    public static AbstractSkillProcessEvent.SkillProcessCreated toSkillProcessCreated(SuiMoveEventEnvelope<SkillProcessCreated> eventEnvelope) {
        SkillProcessCreated contractEvent = eventEnvelope.getParsedJson();
        AbstractSkillProcessEvent.SkillProcessCreated skillProcessCreated = toSkillProcessCreated(contractEvent);
        setSkillProcessEventEnvelopeProperties(skillProcessCreated, eventEnvelope);
        return skillProcessCreated;
    }

    public static AbstractSkillProcessEvent.SkillProcessCreated toSkillProcessCreated(SkillProcessCreated contractEvent) {
        AbstractSkillProcessEvent.SkillProcessCreated skillProcessCreated = new AbstractSkillProcessEvent.SkillProcessCreated();
        skillProcessCreated.setId_(contractEvent.getId());
        skillProcessCreated.setSkillProcessId(DomainBeanUtils.toSkillProcessId(contractEvent.getSkillProcessId()));
        skillProcessCreated.setVersion(BigInteger.valueOf(-1));
        return skillProcessCreated;
    }

    public static AbstractSkillProcessEvent.ProductionProcessStarted toProductionProcessStarted(SuiMoveEventEnvelope<ProductionProcessStarted> eventEnvelope) {
        ProductionProcessStarted contractEvent = eventEnvelope.getParsedJson();
        AbstractSkillProcessEvent.ProductionProcessStarted productionProcessStarted = toProductionProcessStarted(contractEvent);
        setSkillProcessEventEnvelopeProperties(productionProcessStarted, eventEnvelope);
        return productionProcessStarted;
    }

    public static AbstractSkillProcessEvent.ProductionProcessStarted toProductionProcessStarted(ProductionProcessStarted contractEvent) {
        AbstractSkillProcessEvent.ProductionProcessStarted productionProcessStarted = new AbstractSkillProcessEvent.ProductionProcessStarted();
        productionProcessStarted.setId_(contractEvent.getId());
        productionProcessStarted.setSkillProcessId(DomainBeanUtils.toSkillProcessId(contractEvent.getSkillProcessId()));
        productionProcessStarted.setBatchSize(contractEvent.getBatchSize());
        productionProcessStarted.setItemId(contractEvent.getItemId());
        productionProcessStarted.setEnergyCost(contractEvent.getEnergyCost());
        productionProcessStarted.setStartedAt(contractEvent.getStartedAt());
        productionProcessStarted.setCreationTime(contractEvent.getCreationTime());
        productionProcessStarted.setProductionMaterials(DomainBeanUtils.toItemIdQuantityPairs(contractEvent.getProductionMaterials()));
        productionProcessStarted.setVersion(contractEvent.getVersion());
        return productionProcessStarted;
    }

    public static AbstractSkillProcessEvent.ProductionProcessCompleted toProductionProcessCompleted(SuiMoveEventEnvelope<ProductionProcessCompleted> eventEnvelope) {
        ProductionProcessCompleted contractEvent = eventEnvelope.getParsedJson();
        AbstractSkillProcessEvent.ProductionProcessCompleted productionProcessCompleted = toProductionProcessCompleted(contractEvent);
        setSkillProcessEventEnvelopeProperties(productionProcessCompleted, eventEnvelope);
        return productionProcessCompleted;
    }

    public static AbstractSkillProcessEvent.ProductionProcessCompleted toProductionProcessCompleted(ProductionProcessCompleted contractEvent) {
        AbstractSkillProcessEvent.ProductionProcessCompleted productionProcessCompleted = new AbstractSkillProcessEvent.ProductionProcessCompleted();
        productionProcessCompleted.setId_(contractEvent.getId());
        productionProcessCompleted.setSkillProcessId(DomainBeanUtils.toSkillProcessId(contractEvent.getSkillProcessId()));
        productionProcessCompleted.setItemId(contractEvent.getItemId());
        productionProcessCompleted.setStartedAt(contractEvent.getStartedAt());
        productionProcessCompleted.setCreationTime(contractEvent.getCreationTime());
        productionProcessCompleted.setEndedAt(contractEvent.getEndedAt());
        productionProcessCompleted.setSuccessful(contractEvent.getSuccessful());
        productionProcessCompleted.setQuantity(contractEvent.getQuantity());
        productionProcessCompleted.setExperience(contractEvent.getExperience());
        productionProcessCompleted.setNewLevel(contractEvent.getNewLevel());
        productionProcessCompleted.setVersion(contractEvent.getVersion());
        return productionProcessCompleted;
    }

    public static AbstractSkillProcessEvent.ShipProductionProcessStarted toShipProductionProcessStarted(SuiMoveEventEnvelope<ShipProductionProcessStarted> eventEnvelope) {
        ShipProductionProcessStarted contractEvent = eventEnvelope.getParsedJson();
        AbstractSkillProcessEvent.ShipProductionProcessStarted shipProductionProcessStarted = toShipProductionProcessStarted(contractEvent);
        setSkillProcessEventEnvelopeProperties(shipProductionProcessStarted, eventEnvelope);
        return shipProductionProcessStarted;
    }

    public static AbstractSkillProcessEvent.ShipProductionProcessStarted toShipProductionProcessStarted(ShipProductionProcessStarted contractEvent) {
        AbstractSkillProcessEvent.ShipProductionProcessStarted shipProductionProcessStarted = new AbstractSkillProcessEvent.ShipProductionProcessStarted();
        shipProductionProcessStarted.setId_(contractEvent.getId());
        shipProductionProcessStarted.setSkillProcessId(DomainBeanUtils.toSkillProcessId(contractEvent.getSkillProcessId()));
        shipProductionProcessStarted.setItemId(contractEvent.getItemId());
        shipProductionProcessStarted.setEnergyCost(contractEvent.getEnergyCost());
        shipProductionProcessStarted.setStartedAt(contractEvent.getStartedAt());
        shipProductionProcessStarted.setCreationTime(contractEvent.getCreationTime());
        shipProductionProcessStarted.setProductionMaterials(DomainBeanUtils.toItemIdQuantityPairs(contractEvent.getProductionMaterials()));
        shipProductionProcessStarted.setVersion(contractEvent.getVersion());
        return shipProductionProcessStarted;
    }

    public static AbstractSkillProcessEvent.ShipProductionProcessCompleted toShipProductionProcessCompleted(SuiMoveEventEnvelope<ShipProductionProcessCompleted> eventEnvelope) {
        ShipProductionProcessCompleted contractEvent = eventEnvelope.getParsedJson();
        AbstractSkillProcessEvent.ShipProductionProcessCompleted shipProductionProcessCompleted = toShipProductionProcessCompleted(contractEvent);
        setSkillProcessEventEnvelopeProperties(shipProductionProcessCompleted, eventEnvelope);
        return shipProductionProcessCompleted;
    }

    public static AbstractSkillProcessEvent.ShipProductionProcessCompleted toShipProductionProcessCompleted(ShipProductionProcessCompleted contractEvent) {
        AbstractSkillProcessEvent.ShipProductionProcessCompleted shipProductionProcessCompleted = new AbstractSkillProcessEvent.ShipProductionProcessCompleted();
        shipProductionProcessCompleted.setId_(contractEvent.getId());
        shipProductionProcessCompleted.setSkillProcessId(DomainBeanUtils.toSkillProcessId(contractEvent.getSkillProcessId()));
        shipProductionProcessCompleted.setItemId(contractEvent.getItemId());
        shipProductionProcessCompleted.setStartedAt(contractEvent.getStartedAt());
        shipProductionProcessCompleted.setCreationTime(contractEvent.getCreationTime());
        shipProductionProcessCompleted.setEndedAt(contractEvent.getEndedAt());
        shipProductionProcessCompleted.setSuccessful(contractEvent.getSuccessful());
        shipProductionProcessCompleted.setQuantity(contractEvent.getQuantity());
        shipProductionProcessCompleted.setExperience(contractEvent.getExperience());
        shipProductionProcessCompleted.setNewLevel(contractEvent.getNewLevel());
        shipProductionProcessCompleted.setVersion(contractEvent.getVersion());
        return shipProductionProcessCompleted;
    }

    public static AbstractSkillProcessEvent.CreationProcessStarted toCreationProcessStarted(SuiMoveEventEnvelope<CreationProcessStarted> eventEnvelope) {
        CreationProcessStarted contractEvent = eventEnvelope.getParsedJson();
        AbstractSkillProcessEvent.CreationProcessStarted creationProcessStarted = toCreationProcessStarted(contractEvent);
        setSkillProcessEventEnvelopeProperties(creationProcessStarted, eventEnvelope);
        return creationProcessStarted;
    }

    public static AbstractSkillProcessEvent.CreationProcessStarted toCreationProcessStarted(CreationProcessStarted contractEvent) {
        AbstractSkillProcessEvent.CreationProcessStarted creationProcessStarted = new AbstractSkillProcessEvent.CreationProcessStarted();
        creationProcessStarted.setId_(contractEvent.getId());
        creationProcessStarted.setSkillProcessId(DomainBeanUtils.toSkillProcessId(contractEvent.getSkillProcessId()));
        creationProcessStarted.setBatchSize(contractEvent.getBatchSize());
        creationProcessStarted.setItemId(contractEvent.getItemId());
        creationProcessStarted.setEnergyCost(contractEvent.getEnergyCost());
        creationProcessStarted.setResourceCost(contractEvent.getResourceCost());
        creationProcessStarted.setStartedAt(contractEvent.getStartedAt());
        creationProcessStarted.setCreationTime(contractEvent.getCreationTime());
        creationProcessStarted.setVersion(contractEvent.getVersion());
        return creationProcessStarted;
    }

    public static AbstractSkillProcessEvent.CreationProcessCompleted toCreationProcessCompleted(SuiMoveEventEnvelope<CreationProcessCompleted> eventEnvelope) {
        CreationProcessCompleted contractEvent = eventEnvelope.getParsedJson();
        AbstractSkillProcessEvent.CreationProcessCompleted creationProcessCompleted = toCreationProcessCompleted(contractEvent);
        setSkillProcessEventEnvelopeProperties(creationProcessCompleted, eventEnvelope);
        return creationProcessCompleted;
    }

    public static AbstractSkillProcessEvent.CreationProcessCompleted toCreationProcessCompleted(CreationProcessCompleted contractEvent) {
        AbstractSkillProcessEvent.CreationProcessCompleted creationProcessCompleted = new AbstractSkillProcessEvent.CreationProcessCompleted();
        creationProcessCompleted.setId_(contractEvent.getId());
        creationProcessCompleted.setSkillProcessId(DomainBeanUtils.toSkillProcessId(contractEvent.getSkillProcessId()));
        creationProcessCompleted.setItemId(contractEvent.getItemId());
        creationProcessCompleted.setStartedAt(contractEvent.getStartedAt());
        creationProcessCompleted.setCreationTime(contractEvent.getCreationTime());
        creationProcessCompleted.setEndedAt(contractEvent.getEndedAt());
        creationProcessCompleted.setSuccessful(contractEvent.getSuccessful());
        creationProcessCompleted.setQuantity(contractEvent.getQuantity());
        creationProcessCompleted.setExperience(contractEvent.getExperience());
        creationProcessCompleted.setNewLevel(contractEvent.getNewLevel());
        creationProcessCompleted.setVersion(contractEvent.getVersion());
        return creationProcessCompleted;
    }

    public static AbstractShipEvent.ShipCreated toShipCreated(SuiMoveEventEnvelope<ShipCreated> eventEnvelope) {
        ShipCreated contractEvent = eventEnvelope.getParsedJson();
        AbstractShipEvent.ShipCreated shipCreated = toShipCreated(contractEvent);
        setShipEventEnvelopeProperties(shipCreated, eventEnvelope);
        return shipCreated;
    }

    public static AbstractShipEvent.ShipCreated toShipCreated(ShipCreated contractEvent) {
        AbstractShipEvent.ShipCreated shipCreated = new AbstractShipEvent.ShipCreated();
        shipCreated.setId(contractEvent.getId());
        shipCreated.setOwner(contractEvent.getOwner());
        shipCreated.setHealthPoints(contractEvent.getHealthPoints());
        shipCreated.setAttack(contractEvent.getAttack());
        shipCreated.setProtection(contractEvent.getProtection());
        shipCreated.setSpeed(contractEvent.getSpeed());
        shipCreated.setBuildingExpenses(DomainBeanUtils.toItemIdQuantityPairs(contractEvent.getBuildingExpenses()));
        shipCreated.setVersion(BigInteger.valueOf(-1));
        return shipCreated;
    }

    public static AbstractRosterEvent.RosterCreated toRosterCreated(SuiMoveEventEnvelope<RosterCreated> eventEnvelope) {
        RosterCreated contractEvent = eventEnvelope.getParsedJson();
        AbstractRosterEvent.RosterCreated rosterCreated = toRosterCreated(contractEvent);
        setRosterEventEnvelopeProperties(rosterCreated, eventEnvelope);
        return rosterCreated;
    }

    public static AbstractRosterEvent.RosterCreated toRosterCreated(RosterCreated contractEvent) {
        AbstractRosterEvent.RosterCreated rosterCreated = new AbstractRosterEvent.RosterCreated();
        rosterCreated.setId_(contractEvent.getId());
        rosterCreated.setRosterId(DomainBeanUtils.toRosterId(contractEvent.getRosterId()));
        rosterCreated.setStatus(contractEvent.getStatus());
        rosterCreated.setSpeed(contractEvent.getSpeed());
        rosterCreated.setUpdatedCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getUpdatedCoordinates()));
        rosterCreated.setCoordinatesUpdatedAt(contractEvent.getCoordinatesUpdatedAt());
        rosterCreated.setTargetCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getTargetCoordinates()));
        rosterCreated.setOriginCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getOriginCoordinates()));
        rosterCreated.setShipBattleId(contractEvent.getShipBattleId());
        rosterCreated.setVersion(BigInteger.valueOf(-1));
        return rosterCreated;
    }

    public static AbstractRosterEvent.EnvironmentRosterCreated toEnvironmentRosterCreated(SuiMoveEventEnvelope<EnvironmentRosterCreated> eventEnvelope) {
        EnvironmentRosterCreated contractEvent = eventEnvelope.getParsedJson();
        AbstractRosterEvent.EnvironmentRosterCreated environmentRosterCreated = toEnvironmentRosterCreated(contractEvent);
        setRosterEventEnvelopeProperties(environmentRosterCreated, eventEnvelope);
        return environmentRosterCreated;
    }

    public static AbstractRosterEvent.EnvironmentRosterCreated toEnvironmentRosterCreated(EnvironmentRosterCreated contractEvent) {
        AbstractRosterEvent.EnvironmentRosterCreated environmentRosterCreated = new AbstractRosterEvent.EnvironmentRosterCreated();
        environmentRosterCreated.setId_(contractEvent.getId());
        environmentRosterCreated.setRosterId(DomainBeanUtils.toRosterId(contractEvent.getRosterId()));
        environmentRosterCreated.setCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getCoordinates()));
        environmentRosterCreated.setShipResourceQuantity(contractEvent.getShipResourceQuantity());
        environmentRosterCreated.setShipBaseResourceQuantity(contractEvent.getShipBaseResourceQuantity());
        environmentRosterCreated.setBaseExperience(contractEvent.getBaseExperience());
        environmentRosterCreated.setVersion(BigInteger.valueOf(-1));
        return environmentRosterCreated;
    }

    public static AbstractRosterEvent.RosterShipAdded toRosterShipAdded(SuiMoveEventEnvelope<RosterShipAdded> eventEnvelope) {
        RosterShipAdded contractEvent = eventEnvelope.getParsedJson();
        AbstractRosterEvent.RosterShipAdded rosterShipAdded = toRosterShipAdded(contractEvent);
        setRosterEventEnvelopeProperties(rosterShipAdded, eventEnvelope);
        return rosterShipAdded;
    }

    public static AbstractRosterEvent.RosterShipAdded toRosterShipAdded(RosterShipAdded contractEvent) {
        AbstractRosterEvent.RosterShipAdded rosterShipAdded = new AbstractRosterEvent.RosterShipAdded();
        rosterShipAdded.setId_(contractEvent.getId());
        rosterShipAdded.setRosterId(DomainBeanUtils.toRosterId(contractEvent.getRosterId()));
        rosterShipAdded.setShip(contractEvent.getShip());
        rosterShipAdded.setPosition(contractEvent.getPosition());
        rosterShipAdded.setVersion(contractEvent.getVersion());
        return rosterShipAdded;
    }

    public static AbstractRosterEvent.RosterSetSail toRosterSetSail(SuiMoveEventEnvelope<RosterSetSail> eventEnvelope) {
        RosterSetSail contractEvent = eventEnvelope.getParsedJson();
        AbstractRosterEvent.RosterSetSail rosterSetSail = toRosterSetSail(contractEvent);
        setRosterEventEnvelopeProperties(rosterSetSail, eventEnvelope);
        return rosterSetSail;
    }

    public static AbstractRosterEvent.RosterSetSail toRosterSetSail(RosterSetSail contractEvent) {
        AbstractRosterEvent.RosterSetSail rosterSetSail = new AbstractRosterEvent.RosterSetSail();
        rosterSetSail.setId_(contractEvent.getId());
        rosterSetSail.setRosterId(DomainBeanUtils.toRosterId(contractEvent.getRosterId()));
        rosterSetSail.setTargetCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getTargetCoordinates()));
        rosterSetSail.setSailDuration(contractEvent.getSailDuration());
        rosterSetSail.setSetSailAt(contractEvent.getSetSailAt());
        rosterSetSail.setUpdatedCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getUpdatedCoordinates()));
        rosterSetSail.setEnergyCost(contractEvent.getEnergyCost());
        rosterSetSail.setVersion(contractEvent.getVersion());
        return rosterSetSail;
    }

    public static AbstractRosterEvent.RosterShipsPositionAdjusted toRosterShipsPositionAdjusted(SuiMoveEventEnvelope<RosterShipsPositionAdjusted> eventEnvelope) {
        RosterShipsPositionAdjusted contractEvent = eventEnvelope.getParsedJson();
        AbstractRosterEvent.RosterShipsPositionAdjusted rosterShipsPositionAdjusted = toRosterShipsPositionAdjusted(contractEvent);
        setRosterEventEnvelopeProperties(rosterShipsPositionAdjusted, eventEnvelope);
        return rosterShipsPositionAdjusted;
    }

    public static AbstractRosterEvent.RosterShipsPositionAdjusted toRosterShipsPositionAdjusted(RosterShipsPositionAdjusted contractEvent) {
        AbstractRosterEvent.RosterShipsPositionAdjusted rosterShipsPositionAdjusted = new AbstractRosterEvent.RosterShipsPositionAdjusted();
        rosterShipsPositionAdjusted.setId_(contractEvent.getId());
        rosterShipsPositionAdjusted.setRosterId(DomainBeanUtils.toRosterId(contractEvent.getRosterId()));
        rosterShipsPositionAdjusted.setPositions(contractEvent.getPositions());
        rosterShipsPositionAdjusted.setShipIds(contractEvent.getShipIds());
        rosterShipsPositionAdjusted.setVersion(contractEvent.getVersion());
        return rosterShipsPositionAdjusted;
    }

    public static AbstractRosterEvent.RosterShipTransferred toRosterShipTransferred(SuiMoveEventEnvelope<RosterShipTransferred> eventEnvelope) {
        RosterShipTransferred contractEvent = eventEnvelope.getParsedJson();
        AbstractRosterEvent.RosterShipTransferred rosterShipTransferred = toRosterShipTransferred(contractEvent);
        setRosterEventEnvelopeProperties(rosterShipTransferred, eventEnvelope);
        return rosterShipTransferred;
    }

    public static AbstractRosterEvent.RosterShipTransferred toRosterShipTransferred(RosterShipTransferred contractEvent) {
        AbstractRosterEvent.RosterShipTransferred rosterShipTransferred = new AbstractRosterEvent.RosterShipTransferred();
        rosterShipTransferred.setId_(contractEvent.getId());
        rosterShipTransferred.setRosterId(DomainBeanUtils.toRosterId(contractEvent.getRosterId()));
        rosterShipTransferred.setShipId(contractEvent.getShipId());
        rosterShipTransferred.setToRosterId(DomainBeanUtils.toRosterId(contractEvent.getToRosterId()));
        rosterShipTransferred.setToPosition(contractEvent.getToPosition());
        rosterShipTransferred.setVersion(contractEvent.getVersion());
        return rosterShipTransferred;
    }

    public static AbstractRosterEvent.RosterShipInventoryTransferred toRosterShipInventoryTransferred(SuiMoveEventEnvelope<RosterShipInventoryTransferred> eventEnvelope) {
        RosterShipInventoryTransferred contractEvent = eventEnvelope.getParsedJson();
        AbstractRosterEvent.RosterShipInventoryTransferred rosterShipInventoryTransferred = toRosterShipInventoryTransferred(contractEvent);
        setRosterEventEnvelopeProperties(rosterShipInventoryTransferred, eventEnvelope);
        return rosterShipInventoryTransferred;
    }

    public static AbstractRosterEvent.RosterShipInventoryTransferred toRosterShipInventoryTransferred(RosterShipInventoryTransferred contractEvent) {
        AbstractRosterEvent.RosterShipInventoryTransferred rosterShipInventoryTransferred = new AbstractRosterEvent.RosterShipInventoryTransferred();
        rosterShipInventoryTransferred.setId_(contractEvent.getId());
        rosterShipInventoryTransferred.setRosterId(DomainBeanUtils.toRosterId(contractEvent.getRosterId()));
        rosterShipInventoryTransferred.setFromShipId(contractEvent.getFromShipId());
        rosterShipInventoryTransferred.setToShipId(contractEvent.getToShipId());
        rosterShipInventoryTransferred.setItemIdQuantityPairs(DomainBeanUtils.toItemIdQuantityPairs(contractEvent.getItemIdQuantityPairs()));
        rosterShipInventoryTransferred.setVersion(contractEvent.getVersion());
        return rosterShipInventoryTransferred;
    }

    public static AbstractRosterEvent.RosterShipInventoryTakenOut toRosterShipInventoryTakenOut(SuiMoveEventEnvelope<RosterShipInventoryTakenOut> eventEnvelope) {
        RosterShipInventoryTakenOut contractEvent = eventEnvelope.getParsedJson();
        AbstractRosterEvent.RosterShipInventoryTakenOut rosterShipInventoryTakenOut = toRosterShipInventoryTakenOut(contractEvent);
        setRosterEventEnvelopeProperties(rosterShipInventoryTakenOut, eventEnvelope);
        return rosterShipInventoryTakenOut;
    }

    public static AbstractRosterEvent.RosterShipInventoryTakenOut toRosterShipInventoryTakenOut(RosterShipInventoryTakenOut contractEvent) {
        AbstractRosterEvent.RosterShipInventoryTakenOut rosterShipInventoryTakenOut = new AbstractRosterEvent.RosterShipInventoryTakenOut();
        rosterShipInventoryTakenOut.setId_(contractEvent.getId());
        rosterShipInventoryTakenOut.setRosterId(DomainBeanUtils.toRosterId(contractEvent.getRosterId()));
        rosterShipInventoryTakenOut.setShipId(contractEvent.getShipId());
        rosterShipInventoryTakenOut.setItemIdQuantityPairs(DomainBeanUtils.toItemIdQuantityPairs(contractEvent.getItemIdQuantityPairs()));
        rosterShipInventoryTakenOut.setUpdatedCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getUpdatedCoordinates()));
        rosterShipInventoryTakenOut.setVersion(contractEvent.getVersion());
        return rosterShipInventoryTakenOut;
    }

    public static AbstractRosterEvent.RosterShipInventoryPutIn toRosterShipInventoryPutIn(SuiMoveEventEnvelope<RosterShipInventoryPutIn> eventEnvelope) {
        RosterShipInventoryPutIn contractEvent = eventEnvelope.getParsedJson();
        AbstractRosterEvent.RosterShipInventoryPutIn rosterShipInventoryPutIn = toRosterShipInventoryPutIn(contractEvent);
        setRosterEventEnvelopeProperties(rosterShipInventoryPutIn, eventEnvelope);
        return rosterShipInventoryPutIn;
    }

    public static AbstractRosterEvent.RosterShipInventoryPutIn toRosterShipInventoryPutIn(RosterShipInventoryPutIn contractEvent) {
        AbstractRosterEvent.RosterShipInventoryPutIn rosterShipInventoryPutIn = new AbstractRosterEvent.RosterShipInventoryPutIn();
        rosterShipInventoryPutIn.setId_(contractEvent.getId());
        rosterShipInventoryPutIn.setRosterId(DomainBeanUtils.toRosterId(contractEvent.getRosterId()));
        rosterShipInventoryPutIn.setShipId(contractEvent.getShipId());
        rosterShipInventoryPutIn.setItemIdQuantityPairs(DomainBeanUtils.toItemIdQuantityPairs(contractEvent.getItemIdQuantityPairs()));
        rosterShipInventoryPutIn.setUpdatedCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getUpdatedCoordinates()));
        rosterShipInventoryPutIn.setVersion(contractEvent.getVersion());
        return rosterShipInventoryPutIn;
    }

    public static AbstractRosterEvent.RosterDeleted toRosterDeleted(SuiMoveEventEnvelope<RosterDeleted> eventEnvelope) {
        RosterDeleted contractEvent = eventEnvelope.getParsedJson();
        AbstractRosterEvent.RosterDeleted rosterDeleted = toRosterDeleted(contractEvent);
        setRosterEventEnvelopeProperties(rosterDeleted, eventEnvelope);
        return rosterDeleted;
    }

    public static AbstractRosterEvent.RosterDeleted toRosterDeleted(RosterDeleted contractEvent) {
        AbstractRosterEvent.RosterDeleted rosterDeleted = new AbstractRosterEvent.RosterDeleted();
        rosterDeleted.setId_(contractEvent.getId());
        rosterDeleted.setRosterId(DomainBeanUtils.toRosterId(contractEvent.getRosterId()));
        rosterDeleted.setVersion(contractEvent.getVersion());
        return rosterDeleted;
    }

    public static AbstractShipBattleEvent.ShipBattleInitiated toShipBattleInitiated(SuiMoveEventEnvelope<ShipBattleInitiated> eventEnvelope) {
        ShipBattleInitiated contractEvent = eventEnvelope.getParsedJson();
        AbstractShipBattleEvent.ShipBattleInitiated shipBattleInitiated = toShipBattleInitiated(contractEvent);
        setShipBattleEventEnvelopeProperties(shipBattleInitiated, eventEnvelope);
        return shipBattleInitiated;
    }

    public static AbstractShipBattleEvent.ShipBattleInitiated toShipBattleInitiated(ShipBattleInitiated contractEvent) {
        AbstractShipBattleEvent.ShipBattleInitiated shipBattleInitiated = new AbstractShipBattleEvent.ShipBattleInitiated();
        shipBattleInitiated.setId(contractEvent.getId());
        shipBattleInitiated.setInitiatorCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getInitiatorCoordinates()));
        shipBattleInitiated.setResponderCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getResponderCoordinates()));
        shipBattleInitiated.setInitiatorId(contractEvent.getInitiatorId());
        shipBattleInitiated.setResponderId(contractEvent.getResponderId());
        shipBattleInitiated.setStartedAt(contractEvent.getStartedAt());
        shipBattleInitiated.setFirstRoundMover(contractEvent.getFirstRoundMover());
        shipBattleInitiated.setFirstRoundAttackerShip(contractEvent.getFirstRoundAttackerShip());
        shipBattleInitiated.setFirstRoundDefenderShip(contractEvent.getFirstRoundDefenderShip());
        shipBattleInitiated.setVersion(BigInteger.valueOf(-1));
        return shipBattleInitiated;
    }

    public static AbstractShipBattleEvent.ShipBattleMoveMade toShipBattleMoveMade(SuiMoveEventEnvelope<ShipBattleMoveMade> eventEnvelope) {
        ShipBattleMoveMade contractEvent = eventEnvelope.getParsedJson();
        AbstractShipBattleEvent.ShipBattleMoveMade shipBattleMoveMade = toShipBattleMoveMade(contractEvent);
        setShipBattleEventEnvelopeProperties(shipBattleMoveMade, eventEnvelope);
        return shipBattleMoveMade;
    }

    public static AbstractShipBattleEvent.ShipBattleMoveMade toShipBattleMoveMade(ShipBattleMoveMade contractEvent) {
        AbstractShipBattleEvent.ShipBattleMoveMade shipBattleMoveMade = new AbstractShipBattleEvent.ShipBattleMoveMade();
        shipBattleMoveMade.setId(contractEvent.getId());
        shipBattleMoveMade.setAttackerCommand(contractEvent.getAttackerCommand());
        shipBattleMoveMade.setDefenderCommand(contractEvent.getDefenderCommand());
        shipBattleMoveMade.setRoundNumber(contractEvent.getRoundNumber());
        shipBattleMoveMade.setDefenderDamageTaken(contractEvent.getDefenderDamageTaken());
        shipBattleMoveMade.setAttackerDamageTaken(contractEvent.getAttackerDamageTaken());
        shipBattleMoveMade.setIsBattleEnded(contractEvent.getIsBattleEnded());
        shipBattleMoveMade.setWinner(contractEvent.getWinner());
        shipBattleMoveMade.setNextRoundStartedAt(contractEvent.getNextRoundStartedAt());
        shipBattleMoveMade.setNextRoundMover(contractEvent.getNextRoundMover());
        shipBattleMoveMade.setNextRoundAttackerShip(contractEvent.getNextRoundAttackerShip());
        shipBattleMoveMade.setNextRoundDefenderShip(contractEvent.getNextRoundDefenderShip());
        shipBattleMoveMade.setVersion(contractEvent.getVersion());
        return shipBattleMoveMade;
    }

    public static AbstractShipBattleEvent.ShipBattleLootTaken toShipBattleLootTaken(SuiMoveEventEnvelope<ShipBattleLootTaken> eventEnvelope) {
        ShipBattleLootTaken contractEvent = eventEnvelope.getParsedJson();
        AbstractShipBattleEvent.ShipBattleLootTaken shipBattleLootTaken = toShipBattleLootTaken(contractEvent);
        setShipBattleEventEnvelopeProperties(shipBattleLootTaken, eventEnvelope);
        return shipBattleLootTaken;
    }

    public static AbstractShipBattleEvent.ShipBattleLootTaken toShipBattleLootTaken(ShipBattleLootTaken contractEvent) {
        AbstractShipBattleEvent.ShipBattleLootTaken shipBattleLootTaken = new AbstractShipBattleEvent.ShipBattleLootTaken();
        shipBattleLootTaken.setId(contractEvent.getId());
        shipBattleLootTaken.setChoice(contractEvent.getChoice());
        shipBattleLootTaken.setLoot(java.util.Arrays.stream(contractEvent.getLoot()).map(DomainBeanUtils::toItemIdQuantityPair).toArray(org.dddml.suiinfinitesea.domain.ItemIdQuantityPair[]::new));
        shipBattleLootTaken.setLootedAt(contractEvent.getLootedAt());
        shipBattleLootTaken.setIncreasedExperience(contractEvent.getIncreasedExperience());
        shipBattleLootTaken.setNewLevel(contractEvent.getNewLevel());
        shipBattleLootTaken.setLoserIncreasedExperience(contractEvent.getLoserIncreasedExperience());
        shipBattleLootTaken.setLoserNewLevel(contractEvent.getLoserNewLevel());
        shipBattleLootTaken.setVersion(contractEvent.getVersion());
        return shipBattleLootTaken;
    }

    public static AbstractItemEvent.ItemCreated toItemCreated(SuiMoveEventEnvelope<ItemCreated> eventEnvelope) {
        ItemCreated contractEvent = eventEnvelope.getParsedJson();
        AbstractItemEvent.ItemCreated itemCreated = toItemCreated(contractEvent);
        setItemEventEnvelopeProperties(itemCreated, eventEnvelope);
        return itemCreated;
    }

    public static AbstractItemEvent.ItemCreated toItemCreated(ItemCreated contractEvent) {
        AbstractItemEvent.ItemCreated itemCreated = new AbstractItemEvent.ItemCreated();
        itemCreated.setId_(contractEvent.getId());
        itemCreated.setItemId(contractEvent.getItemId());
        itemCreated.setName(contractEvent.getName());
        itemCreated.setRequiredForCompletion(contractEvent.getRequiredForCompletion());
        itemCreated.setSellsFor(contractEvent.getSellsFor());
        itemCreated.setVersion(BigInteger.valueOf(-1));
        return itemCreated;
    }

    public static AbstractItemEvent.ItemUpdated toItemUpdated(SuiMoveEventEnvelope<ItemUpdated> eventEnvelope) {
        ItemUpdated contractEvent = eventEnvelope.getParsedJson();
        AbstractItemEvent.ItemUpdated itemUpdated = toItemUpdated(contractEvent);
        setItemEventEnvelopeProperties(itemUpdated, eventEnvelope);
        return itemUpdated;
    }

    public static AbstractItemEvent.ItemUpdated toItemUpdated(ItemUpdated contractEvent) {
        AbstractItemEvent.ItemUpdated itemUpdated = new AbstractItemEvent.ItemUpdated();
        itemUpdated.setId_(contractEvent.getId());
        itemUpdated.setItemId(contractEvent.getItemId());
        itemUpdated.setName(contractEvent.getName());
        itemUpdated.setRequiredForCompletion(contractEvent.getRequiredForCompletion());
        itemUpdated.setSellsFor(contractEvent.getSellsFor());
        itemUpdated.setVersion(contractEvent.getVersion());
        return itemUpdated;
    }

    public static AbstractItemCreationEvent.ItemCreationCreated toItemCreationCreated(SuiMoveEventEnvelope<ItemCreationCreated> eventEnvelope) {
        ItemCreationCreated contractEvent = eventEnvelope.getParsedJson();
        AbstractItemCreationEvent.ItemCreationCreated itemCreationCreated = toItemCreationCreated(contractEvent);
        setItemCreationEventEnvelopeProperties(itemCreationCreated, eventEnvelope);
        return itemCreationCreated;
    }

    public static AbstractItemCreationEvent.ItemCreationCreated toItemCreationCreated(ItemCreationCreated contractEvent) {
        AbstractItemCreationEvent.ItemCreationCreated itemCreationCreated = new AbstractItemCreationEvent.ItemCreationCreated();
        itemCreationCreated.setId_(contractEvent.getId());
        itemCreationCreated.setItemCreationId(DomainBeanUtils.toSkillTypeItemIdPair(contractEvent.getItemCreationId()));
        itemCreationCreated.setResourceCost(contractEvent.getResourceCost());
        itemCreationCreated.setRequirementsLevel(contractEvent.getRequirementsLevel());
        itemCreationCreated.setBaseQuantity(contractEvent.getBaseQuantity());
        itemCreationCreated.setBaseExperience(contractEvent.getBaseExperience());
        itemCreationCreated.setBaseCreationTime(contractEvent.getBaseCreationTime());
        itemCreationCreated.setEnergyCost(contractEvent.getEnergyCost());
        itemCreationCreated.setSuccessRate(contractEvent.getSuccessRate());
        itemCreationCreated.setVersion(BigInteger.valueOf(-1));
        return itemCreationCreated;
    }

    public static AbstractItemCreationEvent.ItemCreationUpdated toItemCreationUpdated(SuiMoveEventEnvelope<ItemCreationUpdated> eventEnvelope) {
        ItemCreationUpdated contractEvent = eventEnvelope.getParsedJson();
        AbstractItemCreationEvent.ItemCreationUpdated itemCreationUpdated = toItemCreationUpdated(contractEvent);
        setItemCreationEventEnvelopeProperties(itemCreationUpdated, eventEnvelope);
        return itemCreationUpdated;
    }

    public static AbstractItemCreationEvent.ItemCreationUpdated toItemCreationUpdated(ItemCreationUpdated contractEvent) {
        AbstractItemCreationEvent.ItemCreationUpdated itemCreationUpdated = new AbstractItemCreationEvent.ItemCreationUpdated();
        itemCreationUpdated.setId_(contractEvent.getId());
        itemCreationUpdated.setItemCreationId(DomainBeanUtils.toSkillTypeItemIdPair(contractEvent.getItemCreationId()));
        itemCreationUpdated.setResourceCost(contractEvent.getResourceCost());
        itemCreationUpdated.setRequirementsLevel(contractEvent.getRequirementsLevel());
        itemCreationUpdated.setBaseQuantity(contractEvent.getBaseQuantity());
        itemCreationUpdated.setBaseExperience(contractEvent.getBaseExperience());
        itemCreationUpdated.setBaseCreationTime(contractEvent.getBaseCreationTime());
        itemCreationUpdated.setEnergyCost(contractEvent.getEnergyCost());
        itemCreationUpdated.setSuccessRate(contractEvent.getSuccessRate());
        itemCreationUpdated.setVersion(contractEvent.getVersion());
        return itemCreationUpdated;
    }

    public static AbstractItemProductionEvent.ItemProductionCreated toItemProductionCreated(SuiMoveEventEnvelope<ItemProductionCreated> eventEnvelope) {
        ItemProductionCreated contractEvent = eventEnvelope.getParsedJson();
        AbstractItemProductionEvent.ItemProductionCreated itemProductionCreated = toItemProductionCreated(contractEvent);
        setItemProductionEventEnvelopeProperties(itemProductionCreated, eventEnvelope);
        return itemProductionCreated;
    }

    public static AbstractItemProductionEvent.ItemProductionCreated toItemProductionCreated(ItemProductionCreated contractEvent) {
        AbstractItemProductionEvent.ItemProductionCreated itemProductionCreated = new AbstractItemProductionEvent.ItemProductionCreated();
        itemProductionCreated.setId_(contractEvent.getId());
        itemProductionCreated.setItemProductionId(DomainBeanUtils.toSkillTypeItemIdPair(contractEvent.getItemProductionId()));
        itemProductionCreated.setProductionMaterials(DomainBeanUtils.toItemIdQuantityPairs(contractEvent.getProductionMaterials()));
        itemProductionCreated.setRequirementsLevel(contractEvent.getRequirementsLevel());
        itemProductionCreated.setBaseQuantity(contractEvent.getBaseQuantity());
        itemProductionCreated.setBaseExperience(contractEvent.getBaseExperience());
        itemProductionCreated.setBaseCreationTime(contractEvent.getBaseCreationTime());
        itemProductionCreated.setEnergyCost(contractEvent.getEnergyCost());
        itemProductionCreated.setSuccessRate(contractEvent.getSuccessRate());
        itemProductionCreated.setVersion(BigInteger.valueOf(-1));
        return itemProductionCreated;
    }

    public static AbstractItemProductionEvent.ItemProductionUpdated toItemProductionUpdated(SuiMoveEventEnvelope<ItemProductionUpdated> eventEnvelope) {
        ItemProductionUpdated contractEvent = eventEnvelope.getParsedJson();
        AbstractItemProductionEvent.ItemProductionUpdated itemProductionUpdated = toItemProductionUpdated(contractEvent);
        setItemProductionEventEnvelopeProperties(itemProductionUpdated, eventEnvelope);
        return itemProductionUpdated;
    }

    public static AbstractItemProductionEvent.ItemProductionUpdated toItemProductionUpdated(ItemProductionUpdated contractEvent) {
        AbstractItemProductionEvent.ItemProductionUpdated itemProductionUpdated = new AbstractItemProductionEvent.ItemProductionUpdated();
        itemProductionUpdated.setId_(contractEvent.getId());
        itemProductionUpdated.setItemProductionId(DomainBeanUtils.toSkillTypeItemIdPair(contractEvent.getItemProductionId()));
        itemProductionUpdated.setProductionMaterials(DomainBeanUtils.toItemIdQuantityPairs(contractEvent.getProductionMaterials()));
        itemProductionUpdated.setRequirementsLevel(contractEvent.getRequirementsLevel());
        itemProductionUpdated.setBaseQuantity(contractEvent.getBaseQuantity());
        itemProductionUpdated.setBaseExperience(contractEvent.getBaseExperience());
        itemProductionUpdated.setBaseCreationTime(contractEvent.getBaseCreationTime());
        itemProductionUpdated.setEnergyCost(contractEvent.getEnergyCost());
        itemProductionUpdated.setSuccessRate(contractEvent.getSuccessRate());
        itemProductionUpdated.setVersion(contractEvent.getVersion());
        return itemProductionUpdated;
    }

    public static AbstractPlayerEvent.PlayerCreated toPlayerCreated(SuiMoveEventEnvelope<PlayerCreated> eventEnvelope) {
        PlayerCreated contractEvent = eventEnvelope.getParsedJson();
        AbstractPlayerEvent.PlayerCreated playerCreated = toPlayerCreated(contractEvent);
        setPlayerEventEnvelopeProperties(playerCreated, eventEnvelope);
        return playerCreated;
    }

    public static AbstractPlayerEvent.PlayerCreated toPlayerCreated(PlayerCreated contractEvent) {
        AbstractPlayerEvent.PlayerCreated playerCreated = new AbstractPlayerEvent.PlayerCreated();
        playerCreated.setId(contractEvent.getId());
        playerCreated.setName(contractEvent.getName());
        playerCreated.setOwner(contractEvent.getOwner());
        playerCreated.setVersion(BigInteger.valueOf(-1));
        return playerCreated;
    }

    public static AbstractPlayerEvent.IslandClaimed toIslandClaimed(SuiMoveEventEnvelope<IslandClaimed> eventEnvelope) {
        IslandClaimed contractEvent = eventEnvelope.getParsedJson();
        AbstractPlayerEvent.IslandClaimed islandClaimed = toIslandClaimed(contractEvent);
        setPlayerEventEnvelopeProperties(islandClaimed, eventEnvelope);
        return islandClaimed;
    }

    public static AbstractPlayerEvent.IslandClaimed toIslandClaimed(IslandClaimed contractEvent) {
        AbstractPlayerEvent.IslandClaimed islandClaimed = new AbstractPlayerEvent.IslandClaimed();
        islandClaimed.setId(contractEvent.getId());
        islandClaimed.setCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getCoordinates()));
        islandClaimed.setClaimedAt(contractEvent.getClaimedAt());
        islandClaimed.setVersion(contractEvent.getVersion());
        return islandClaimed;
    }

    public static AbstractPlayerEvent.NftHolderIslandClaimed toNftHolderIslandClaimed(SuiMoveEventEnvelope<NftHolderIslandClaimed> eventEnvelope) {
        NftHolderIslandClaimed contractEvent = eventEnvelope.getParsedJson();
        AbstractPlayerEvent.NftHolderIslandClaimed nftHolderIslandClaimed = toNftHolderIslandClaimed(contractEvent);
        setPlayerEventEnvelopeProperties(nftHolderIslandClaimed, eventEnvelope);
        return nftHolderIslandClaimed;
    }

    public static AbstractPlayerEvent.NftHolderIslandClaimed toNftHolderIslandClaimed(NftHolderIslandClaimed contractEvent) {
        AbstractPlayerEvent.NftHolderIslandClaimed nftHolderIslandClaimed = new AbstractPlayerEvent.NftHolderIslandClaimed();
        nftHolderIslandClaimed.setId(contractEvent.getId());
        nftHolderIslandClaimed.setCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getCoordinates()));
        nftHolderIslandClaimed.setClaimedAt(contractEvent.getClaimedAt());
        nftHolderIslandClaimed.setVersion(contractEvent.getVersion());
        return nftHolderIslandClaimed;
    }

    public static AbstractPlayerEvent.PlayerAirdropped toPlayerAirdropped(SuiMoveEventEnvelope<PlayerAirdropped> eventEnvelope) {
        PlayerAirdropped contractEvent = eventEnvelope.getParsedJson();
        AbstractPlayerEvent.PlayerAirdropped playerAirdropped = toPlayerAirdropped(contractEvent);
        setPlayerEventEnvelopeProperties(playerAirdropped, eventEnvelope);
        return playerAirdropped;
    }

    public static AbstractPlayerEvent.PlayerAirdropped toPlayerAirdropped(PlayerAirdropped contractEvent) {
        AbstractPlayerEvent.PlayerAirdropped playerAirdropped = new AbstractPlayerEvent.PlayerAirdropped();
        playerAirdropped.setId(contractEvent.getId());
        playerAirdropped.setItemId(contractEvent.getItemId());
        playerAirdropped.setQuantity(contractEvent.getQuantity());
        playerAirdropped.setVersion(contractEvent.getVersion());
        return playerAirdropped;
    }

    public static AbstractPlayerEvent.PlayerIslandResourcesGathered toPlayerIslandResourcesGathered(SuiMoveEventEnvelope<PlayerIslandResourcesGathered> eventEnvelope) {
        PlayerIslandResourcesGathered contractEvent = eventEnvelope.getParsedJson();
        AbstractPlayerEvent.PlayerIslandResourcesGathered playerIslandResourcesGathered = toPlayerIslandResourcesGathered(contractEvent);
        setPlayerEventEnvelopeProperties(playerIslandResourcesGathered, eventEnvelope);
        return playerIslandResourcesGathered;
    }

    public static AbstractPlayerEvent.PlayerIslandResourcesGathered toPlayerIslandResourcesGathered(PlayerIslandResourcesGathered contractEvent) {
        AbstractPlayerEvent.PlayerIslandResourcesGathered playerIslandResourcesGathered = new AbstractPlayerEvent.PlayerIslandResourcesGathered();
        playerIslandResourcesGathered.setId(contractEvent.getId());
        playerIslandResourcesGathered.setVersion(contractEvent.getVersion());
        return playerIslandResourcesGathered;
    }

    public static AbstractWhitelistEvent.InitWhitelistEvent toInitWhitelistEvent(SuiMoveEventEnvelope<InitWhitelistEvent> eventEnvelope) {
        InitWhitelistEvent contractEvent = eventEnvelope.getParsedJson();
        AbstractWhitelistEvent.InitWhitelistEvent initWhitelistEvent = toInitWhitelistEvent(contractEvent);
        setWhitelistEventEnvelopeProperties(initWhitelistEvent, eventEnvelope);
        return initWhitelistEvent;
    }

    public static AbstractWhitelistEvent.InitWhitelistEvent toInitWhitelistEvent(InitWhitelistEvent contractEvent) {
        AbstractWhitelistEvent.InitWhitelistEvent initWhitelistEvent = new AbstractWhitelistEvent.InitWhitelistEvent();
        initWhitelistEvent.setId(contractEvent.getId());
        initWhitelistEvent.setVersion(BigInteger.valueOf(-1));
        return initWhitelistEvent;
    }

    public static AbstractWhitelistEvent.WhitelistUpdated toWhitelistUpdated(SuiMoveEventEnvelope<WhitelistUpdated> eventEnvelope) {
        WhitelistUpdated contractEvent = eventEnvelope.getParsedJson();
        AbstractWhitelistEvent.WhitelistUpdated whitelistUpdated = toWhitelistUpdated(contractEvent);
        setWhitelistEventEnvelopeProperties(whitelistUpdated, eventEnvelope);
        return whitelistUpdated;
    }

    public static AbstractWhitelistEvent.WhitelistUpdated toWhitelistUpdated(WhitelistUpdated contractEvent) {
        AbstractWhitelistEvent.WhitelistUpdated whitelistUpdated = new AbstractWhitelistEvent.WhitelistUpdated();
        whitelistUpdated.setId(contractEvent.getId());
        whitelistUpdated.setPaused(contractEvent.getPaused());
        whitelistUpdated.setVersion(contractEvent.getVersion());
        return whitelistUpdated;
    }

    public static AbstractWhitelistEvent.WhitelistEntryAdded toWhitelistEntryAdded(SuiMoveEventEnvelope<WhitelistEntryAdded> eventEnvelope) {
        WhitelistEntryAdded contractEvent = eventEnvelope.getParsedJson();
        AbstractWhitelistEvent.WhitelistEntryAdded whitelistEntryAdded = toWhitelistEntryAdded(contractEvent);
        setWhitelistEventEnvelopeProperties(whitelistEntryAdded, eventEnvelope);
        return whitelistEntryAdded;
    }

    public static AbstractWhitelistEvent.WhitelistEntryAdded toWhitelistEntryAdded(WhitelistEntryAdded contractEvent) {
        AbstractWhitelistEvent.WhitelistEntryAdded whitelistEntryAdded = new AbstractWhitelistEvent.WhitelistEntryAdded();
        whitelistEntryAdded.setId(contractEvent.getId());
        whitelistEntryAdded.setAccountAddress(contractEvent.getAccountAddress());
        whitelistEntryAdded.setName(contractEvent.getName());
        whitelistEntryAdded.setImageUrl(contractEvent.getImageUrl());
        whitelistEntryAdded.setDescription(contractEvent.getDescription());
        whitelistEntryAdded.setBackgroundColor(contractEvent.getBackgroundColor());
        whitelistEntryAdded.setRace(contractEvent.getRace());
        whitelistEntryAdded.setEyes(contractEvent.getEyes());
        whitelistEntryAdded.setMouth(contractEvent.getMouth());
        whitelistEntryAdded.setHaircut(contractEvent.getHaircut());
        whitelistEntryAdded.setSkin(contractEvent.getSkin());
        whitelistEntryAdded.setOutfit(contractEvent.getOutfit());
        whitelistEntryAdded.setAccessories(contractEvent.getAccessories());
        whitelistEntryAdded.setVersion(contractEvent.getVersion());
        return whitelistEntryAdded;
    }

    public static AbstractWhitelistEvent.WhitelistEntryUpdated toWhitelistEntryUpdated(SuiMoveEventEnvelope<WhitelistEntryUpdated> eventEnvelope) {
        WhitelistEntryUpdated contractEvent = eventEnvelope.getParsedJson();
        AbstractWhitelistEvent.WhitelistEntryUpdated whitelistEntryUpdated = toWhitelistEntryUpdated(contractEvent);
        setWhitelistEventEnvelopeProperties(whitelistEntryUpdated, eventEnvelope);
        return whitelistEntryUpdated;
    }

    public static AbstractWhitelistEvent.WhitelistEntryUpdated toWhitelistEntryUpdated(WhitelistEntryUpdated contractEvent) {
        AbstractWhitelistEvent.WhitelistEntryUpdated whitelistEntryUpdated = new AbstractWhitelistEvent.WhitelistEntryUpdated();
        whitelistEntryUpdated.setId(contractEvent.getId());
        whitelistEntryUpdated.setAccountAddress(contractEvent.getAccountAddress());
        whitelistEntryUpdated.setName(contractEvent.getName());
        whitelistEntryUpdated.setImageUrl(contractEvent.getImageUrl());
        whitelistEntryUpdated.setDescription(contractEvent.getDescription());
        whitelistEntryUpdated.setBackgroundColor(contractEvent.getBackgroundColor());
        whitelistEntryUpdated.setRace(contractEvent.getRace());
        whitelistEntryUpdated.setEyes(contractEvent.getEyes());
        whitelistEntryUpdated.setMouth(contractEvent.getMouth());
        whitelistEntryUpdated.setHaircut(contractEvent.getHaircut());
        whitelistEntryUpdated.setSkin(contractEvent.getSkin());
        whitelistEntryUpdated.setOutfit(contractEvent.getOutfit());
        whitelistEntryUpdated.setAccessories(contractEvent.getAccessories());
        whitelistEntryUpdated.setClaimed(contractEvent.getClaimed());
        whitelistEntryUpdated.setPaused(contractEvent.getPaused());
        whitelistEntryUpdated.setVersion(contractEvent.getVersion());
        return whitelistEntryUpdated;
    }

    public static AbstractWhitelistEvent.WhitelistClaimed toWhitelistClaimed(SuiMoveEventEnvelope<WhitelistClaimed> eventEnvelope) {
        WhitelistClaimed contractEvent = eventEnvelope.getParsedJson();
        AbstractWhitelistEvent.WhitelistClaimed whitelistClaimed = toWhitelistClaimed(contractEvent);
        setWhitelistEventEnvelopeProperties(whitelistClaimed, eventEnvelope);
        return whitelistClaimed;
    }

    public static AbstractWhitelistEvent.WhitelistClaimed toWhitelistClaimed(WhitelistClaimed contractEvent) {
        AbstractWhitelistEvent.WhitelistClaimed whitelistClaimed = new AbstractWhitelistEvent.WhitelistClaimed();
        whitelistClaimed.setId(contractEvent.getId());
        whitelistClaimed.setAccountAddress(contractEvent.getAccountAddress());
        whitelistClaimed.setVersion(contractEvent.getVersion());
        return whitelistClaimed;
    }

    public static AbstractWhitelistEvent.WhitelistCreated toWhitelistCreated(SuiMoveEventEnvelope<WhitelistCreated> eventEnvelope) {
        WhitelistCreated contractEvent = eventEnvelope.getParsedJson();
        AbstractWhitelistEvent.WhitelistCreated whitelistCreated = toWhitelistCreated(contractEvent);
        setWhitelistEventEnvelopeProperties(whitelistCreated, eventEnvelope);
        return whitelistCreated;
    }

    public static AbstractWhitelistEvent.WhitelistCreated toWhitelistCreated(WhitelistCreated contractEvent) {
        AbstractWhitelistEvent.WhitelistCreated whitelistCreated = new AbstractWhitelistEvent.WhitelistCreated();
        whitelistCreated.setId(contractEvent.getId());
        whitelistCreated.setVersion(BigInteger.valueOf(-1));
        return whitelistCreated;
    }

    public static AbstractMapEvent.InitMapEvent toInitMapEvent(SuiMoveEventEnvelope<InitMapEvent> eventEnvelope) {
        InitMapEvent contractEvent = eventEnvelope.getParsedJson();
        AbstractMapEvent.InitMapEvent initMapEvent = toInitMapEvent(contractEvent);
        setMapEventEnvelopeProperties(initMapEvent, eventEnvelope);
        return initMapEvent;
    }

    public static AbstractMapEvent.InitMapEvent toInitMapEvent(InitMapEvent contractEvent) {
        AbstractMapEvent.InitMapEvent initMapEvent = new AbstractMapEvent.InitMapEvent();
        initMapEvent.setId(contractEvent.getId());
        initMapEvent.setVersion(BigInteger.valueOf(-1));
        return initMapEvent;
    }

    public static AbstractMapEvent.IslandAdded toIslandAdded(SuiMoveEventEnvelope<IslandAdded> eventEnvelope) {
        IslandAdded contractEvent = eventEnvelope.getParsedJson();
        AbstractMapEvent.IslandAdded islandAdded = toIslandAdded(contractEvent);
        setMapEventEnvelopeProperties(islandAdded, eventEnvelope);
        return islandAdded;
    }

    public static AbstractMapEvent.IslandAdded toIslandAdded(IslandAdded contractEvent) {
        AbstractMapEvent.IslandAdded islandAdded = new AbstractMapEvent.IslandAdded();
        islandAdded.setId(contractEvent.getId());
        islandAdded.setCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getCoordinates()));
        islandAdded.setResources(DomainBeanUtils.toItemIdQuantityPairs(contractEvent.getResources()));
        islandAdded.setVersion(contractEvent.getVersion());
        return islandAdded;
    }

    public static AbstractMapEvent.MapIslandClaimed toMapIslandClaimed(SuiMoveEventEnvelope<MapIslandClaimed> eventEnvelope) {
        MapIslandClaimed contractEvent = eventEnvelope.getParsedJson();
        AbstractMapEvent.MapIslandClaimed mapIslandClaimed = toMapIslandClaimed(contractEvent);
        setMapEventEnvelopeProperties(mapIslandClaimed, eventEnvelope);
        return mapIslandClaimed;
    }

    public static AbstractMapEvent.MapIslandClaimed toMapIslandClaimed(MapIslandClaimed contractEvent) {
        AbstractMapEvent.MapIslandClaimed mapIslandClaimed = new AbstractMapEvent.MapIslandClaimed();
        mapIslandClaimed.setId(contractEvent.getId());
        mapIslandClaimed.setCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getCoordinates()));
        mapIslandClaimed.setClaimedBy(contractEvent.getClaimedBy());
        mapIslandClaimed.setClaimedAt(contractEvent.getClaimedAt());
        mapIslandClaimed.setVersion(contractEvent.getVersion());
        return mapIslandClaimed;
    }

    public static AbstractMapEvent.IslandResourcesGathered toIslandResourcesGathered(SuiMoveEventEnvelope<IslandResourcesGathered> eventEnvelope) {
        IslandResourcesGathered contractEvent = eventEnvelope.getParsedJson();
        AbstractMapEvent.IslandResourcesGathered islandResourcesGathered = toIslandResourcesGathered(contractEvent);
        setMapEventEnvelopeProperties(islandResourcesGathered, eventEnvelope);
        return islandResourcesGathered;
    }

    public static AbstractMapEvent.IslandResourcesGathered toIslandResourcesGathered(IslandResourcesGathered contractEvent) {
        AbstractMapEvent.IslandResourcesGathered islandResourcesGathered = new AbstractMapEvent.IslandResourcesGathered();
        islandResourcesGathered.setId(contractEvent.getId());
        islandResourcesGathered.setPlayerId(contractEvent.getPlayerId());
        islandResourcesGathered.setCoordinates(DomainBeanUtils.toCoordinates(contractEvent.getCoordinates()));
        islandResourcesGathered.setResources(java.util.Arrays.stream(contractEvent.getResources()).map(DomainBeanUtils::toItemIdQuantityPair).toArray(org.dddml.suiinfinitesea.domain.ItemIdQuantityPair[]::new));
        islandResourcesGathered.setGatheredAt(contractEvent.getGatheredAt());
        islandResourcesGathered.setVersion(contractEvent.getVersion());
        return islandResourcesGathered;
    }

    public static AbstractMapEvent.MapSettingsUpdated toMapSettingsUpdated(SuiMoveEventEnvelope<MapSettingsUpdated> eventEnvelope) {
        MapSettingsUpdated contractEvent = eventEnvelope.getParsedJson();
        AbstractMapEvent.MapSettingsUpdated mapSettingsUpdated = toMapSettingsUpdated(contractEvent);
        setMapEventEnvelopeProperties(mapSettingsUpdated, eventEnvelope);
        return mapSettingsUpdated;
    }

    public static AbstractMapEvent.MapSettingsUpdated toMapSettingsUpdated(MapSettingsUpdated contractEvent) {
        AbstractMapEvent.MapSettingsUpdated mapSettingsUpdated = new AbstractMapEvent.MapSettingsUpdated();
        mapSettingsUpdated.setId(contractEvent.getId());
        mapSettingsUpdated.setClaimIslandSetting(contractEvent.getClaimIslandSetting());
        mapSettingsUpdated.setVersion(contractEvent.getVersion());
        return mapSettingsUpdated;
    }

    public static AbstractMapEvent.WhitelistedForClaimingIsland toWhitelistedForClaimingIsland(SuiMoveEventEnvelope<WhitelistedForClaimingIsland> eventEnvelope) {
        WhitelistedForClaimingIsland contractEvent = eventEnvelope.getParsedJson();
        AbstractMapEvent.WhitelistedForClaimingIsland whitelistedForClaimingIsland = toWhitelistedForClaimingIsland(contractEvent);
        setMapEventEnvelopeProperties(whitelistedForClaimingIsland, eventEnvelope);
        return whitelistedForClaimingIsland;
    }

    public static AbstractMapEvent.WhitelistedForClaimingIsland toWhitelistedForClaimingIsland(WhitelistedForClaimingIsland contractEvent) {
        AbstractMapEvent.WhitelistedForClaimingIsland whitelistedForClaimingIsland = new AbstractMapEvent.WhitelistedForClaimingIsland();
        whitelistedForClaimingIsland.setId(contractEvent.getId());
        whitelistedForClaimingIsland.setAccountAddress(contractEvent.getAccountAddress());
        whitelistedForClaimingIsland.setVersion(contractEvent.getVersion());
        return whitelistedForClaimingIsland;
    }

    public static AbstractMapEvent.UnWhitelistedForClaimingIsland toUnWhitelistedForClaimingIsland(SuiMoveEventEnvelope<UnWhitelistedForClaimingIsland> eventEnvelope) {
        UnWhitelistedForClaimingIsland contractEvent = eventEnvelope.getParsedJson();
        AbstractMapEvent.UnWhitelistedForClaimingIsland unWhitelistedForClaimingIsland = toUnWhitelistedForClaimingIsland(contractEvent);
        setMapEventEnvelopeProperties(unWhitelistedForClaimingIsland, eventEnvelope);
        return unWhitelistedForClaimingIsland;
    }

    public static AbstractMapEvent.UnWhitelistedForClaimingIsland toUnWhitelistedForClaimingIsland(UnWhitelistedForClaimingIsland contractEvent) {
        AbstractMapEvent.UnWhitelistedForClaimingIsland unWhitelistedForClaimingIsland = new AbstractMapEvent.UnWhitelistedForClaimingIsland();
        unWhitelistedForClaimingIsland.setId(contractEvent.getId());
        unWhitelistedForClaimingIsland.setAccountAddress(contractEvent.getAccountAddress());
        unWhitelistedForClaimingIsland.setVersion(contractEvent.getVersion());
        return unWhitelistedForClaimingIsland;
    }

    public static AbstractExperienceTableEvent.InitExperienceTableEvent toInitExperienceTableEvent(SuiMoveEventEnvelope<InitExperienceTableEvent> eventEnvelope) {
        InitExperienceTableEvent contractEvent = eventEnvelope.getParsedJson();
        AbstractExperienceTableEvent.InitExperienceTableEvent initExperienceTableEvent = toInitExperienceTableEvent(contractEvent);
        setExperienceTableEventEnvelopeProperties(initExperienceTableEvent, eventEnvelope);
        return initExperienceTableEvent;
    }

    public static AbstractExperienceTableEvent.InitExperienceTableEvent toInitExperienceTableEvent(InitExperienceTableEvent contractEvent) {
        AbstractExperienceTableEvent.InitExperienceTableEvent initExperienceTableEvent = new AbstractExperienceTableEvent.InitExperienceTableEvent();
        initExperienceTableEvent.setId(contractEvent.getId());
        initExperienceTableEvent.setVersion(BigInteger.valueOf(-1));
        return initExperienceTableEvent;
    }

    public static AbstractExperienceTableEvent.ExperienceLevelAdded toExperienceLevelAdded(SuiMoveEventEnvelope<ExperienceLevelAdded> eventEnvelope) {
        ExperienceLevelAdded contractEvent = eventEnvelope.getParsedJson();
        AbstractExperienceTableEvent.ExperienceLevelAdded experienceLevelAdded = toExperienceLevelAdded(contractEvent);
        setExperienceTableEventEnvelopeProperties(experienceLevelAdded, eventEnvelope);
        return experienceLevelAdded;
    }

    public static AbstractExperienceTableEvent.ExperienceLevelAdded toExperienceLevelAdded(ExperienceLevelAdded contractEvent) {
        AbstractExperienceTableEvent.ExperienceLevelAdded experienceLevelAdded = new AbstractExperienceTableEvent.ExperienceLevelAdded();
        experienceLevelAdded.setId(contractEvent.getId());
        experienceLevelAdded.setLevel(contractEvent.getLevel());
        experienceLevelAdded.setExperience(contractEvent.getExperience());
        experienceLevelAdded.setDifference(contractEvent.getDifference());
        experienceLevelAdded.setVersion(contractEvent.getVersion());
        return experienceLevelAdded;
    }

    public static AbstractExperienceTableEvent.ExperienceLevelUpdated toExperienceLevelUpdated(SuiMoveEventEnvelope<ExperienceLevelUpdated> eventEnvelope) {
        ExperienceLevelUpdated contractEvent = eventEnvelope.getParsedJson();
        AbstractExperienceTableEvent.ExperienceLevelUpdated experienceLevelUpdated = toExperienceLevelUpdated(contractEvent);
        setExperienceTableEventEnvelopeProperties(experienceLevelUpdated, eventEnvelope);
        return experienceLevelUpdated;
    }

    public static AbstractExperienceTableEvent.ExperienceLevelUpdated toExperienceLevelUpdated(ExperienceLevelUpdated contractEvent) {
        AbstractExperienceTableEvent.ExperienceLevelUpdated experienceLevelUpdated = new AbstractExperienceTableEvent.ExperienceLevelUpdated();
        experienceLevelUpdated.setId(contractEvent.getId());
        experienceLevelUpdated.setLevel(contractEvent.getLevel());
        experienceLevelUpdated.setExperience(contractEvent.getExperience());
        experienceLevelUpdated.setDifference(contractEvent.getDifference());
        experienceLevelUpdated.setVersion(contractEvent.getVersion());
        return experienceLevelUpdated;
    }

    public static void setAvatarEventEnvelopeProperties(AbstractAvatarEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setAvatarChangeEventEnvelopeProperties(AbstractAvatarChangeEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setSkillProcessEventEnvelopeProperties(AbstractSkillProcessEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setShipEventEnvelopeProperties(AbstractShipEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setRosterEventEnvelopeProperties(AbstractRosterEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setShipBattleEventEnvelopeProperties(AbstractShipBattleEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setItemEventEnvelopeProperties(AbstractItemEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setItemCreationEventEnvelopeProperties(AbstractItemCreationEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setItemProductionEventEnvelopeProperties(AbstractItemProductionEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setPlayerEventEnvelopeProperties(AbstractPlayerEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setWhitelistEventEnvelopeProperties(AbstractWhitelistEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setMapEventEnvelopeProperties(AbstractMapEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setExperienceTableEventEnvelopeProperties(AbstractExperienceTableEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.dddml.suiinfinitesea.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    private static void setEventEnvelopeProperties(org.dddml.suiinfinitesea.domain.SuiEventEnvelope.MutableSuiEventEnvelope event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        event.setSuiTimestamp(eventEnvelope.getTimestampMs());
        event.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        event.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));
    }

    private static void setEventEnvelopeProperties(org.dddml.suiinfinitesea.domain.SuiMoveEvent.MutableSuiMoveEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        event.setSuiPackageId(eventEnvelope.getPackageId());
        event.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        event.setSuiSender(eventEnvelope.getSender());
    }

    public static List<String> extractTypeArguments(String type) {
        int i = type.indexOf("<");
        int j = type.lastIndexOf(">");
        if (i > 0 && j > i && j == type.length() - 1) {
            String typeArguments = type.substring(i + 1, j);
            String[] typeArgumentArray = typeArguments.split(",");
            return Arrays.stream(typeArgumentArray).map(String::trim).collect(java.util.stream.Collectors.toList());
        } else {
            return Collections.emptyList();
        }
    }
}
