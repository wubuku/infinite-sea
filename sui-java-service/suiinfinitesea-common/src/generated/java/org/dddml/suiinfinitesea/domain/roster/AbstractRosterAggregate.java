// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain.roster;

import java.util.*;
import org.dddml.suiinfinitesea.domain.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.suiinfinitesea.specialization.*;

public abstract class AbstractRosterAggregate extends AbstractAggregate implements RosterAggregate {
    private RosterState.MutableRosterState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractRosterAggregate(RosterState state) {
        this.state = (RosterState.MutableRosterState)state;
    }

    public RosterState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        RosterCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleRosterAggregate extends AbstractRosterAggregate {
        public SimpleRosterAggregate(RosterState state) {
            super(state);
        }

        @Override
        public void create(Integer status, Long speed, Coordinates updatedCoordinates, BigInteger coordinatesUpdatedAt, Coordinates targetCoordinates, Coordinates originCoordinates, String shipBattleId, Long offChainVersion, String commandId, String requesterId, RosterCommands.Create c) {
            java.util.function.Supplier<RosterEvent.RosterCreated> eventFactory = () -> newRosterCreated(status, speed, updatedCoordinates, coordinatesUpdatedAt, targetCoordinates, originCoordinates, shipBattleId, offChainVersion, commandId, requesterId);
            RosterEvent.RosterCreated e;
            try {
                e = verifyCreate(eventFactory, status, speed, updatedCoordinates, coordinatesUpdatedAt, targetCoordinates, originCoordinates, shipBattleId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void createEnvironmentRoster(Coordinates coordinates, Long shipResourceQuantity, Long shipBaseResourceQuantity, Long baseExperience, String clock, Long offChainVersion, String commandId, String requesterId, RosterCommands.CreateEnvironmentRoster c) {
            java.util.function.Supplier<RosterEvent.EnvironmentRosterCreated> eventFactory = () -> newEnvironmentRosterCreated(coordinates, shipResourceQuantity, shipBaseResourceQuantity, baseExperience, clock, offChainVersion, commandId, requesterId);
            RosterEvent.EnvironmentRosterCreated e;
            try {
                e = verifyCreateEnvironmentRoster(eventFactory, coordinates, shipResourceQuantity, shipBaseResourceQuantity, baseExperience, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void addShip(String ship, BigInteger position, Long offChainVersion, String commandId, String requesterId, RosterCommands.AddShip c) {
            java.util.function.Supplier<RosterEvent.RosterShipAdded> eventFactory = () -> newRosterShipAdded(ship, position, offChainVersion, commandId, requesterId);
            RosterEvent.RosterShipAdded e;
            try {
                e = verifyAddShip(eventFactory, ship, position, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void updateLocation(String clock, Coordinates updatedCoordinates, Long offChainVersion, String commandId, String requesterId, RosterCommands.UpdateLocation c) {
            java.util.function.Supplier<RosterEvent.RosterLocationUpdated> eventFactory = () -> newRosterLocationUpdated(clock, updatedCoordinates, offChainVersion, commandId, requesterId);
            RosterEvent.RosterLocationUpdated e;
            try {
                e = verifyUpdateLocation(eventFactory, updatedCoordinates, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void adjustShipsPosition(String player, BigInteger[] positions, String[] shipIds, Long offChainVersion, String commandId, String requesterId, RosterCommands.AdjustShipsPosition c) {
            java.util.function.Supplier<RosterEvent.RosterShipsPositionAdjusted> eventFactory = () -> newRosterShipsPositionAdjusted(player, positions, shipIds, offChainVersion, commandId, requesterId);
            RosterEvent.RosterShipsPositionAdjusted e;
            try {
                e = verifyAdjustShipsPosition(eventFactory, player, positions, shipIds, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void transferShip(String player, String shipId, RosterId toRoster, BigInteger toPosition, Long offChainVersion, String commandId, String requesterId, RosterCommands.TransferShip c) {
            java.util.function.Supplier<RosterEvent.RosterShipTransferred> eventFactory = () -> newRosterShipTransferred(player, shipId, toRoster, toPosition, offChainVersion, commandId, requesterId);
            RosterEvent.RosterShipTransferred e;
            try {
                e = verifyTransferShip(eventFactory, player, shipId, toRoster, toPosition, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void transferShipInventory(String player, String fromShipId, String toShipId, ItemIdQuantityPairs itemIdQuantityPairs, Long offChainVersion, String commandId, String requesterId, RosterCommands.TransferShipInventory c) {
            java.util.function.Supplier<RosterEvent.RosterShipInventoryTransferred> eventFactory = () -> newRosterShipInventoryTransferred(player, fromShipId, toShipId, itemIdQuantityPairs, offChainVersion, commandId, requesterId);
            RosterEvent.RosterShipInventoryTransferred e;
            try {
                e = verifyTransferShipInventory(eventFactory, player, fromShipId, toShipId, itemIdQuantityPairs, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void takeOutShipInventory(String player, String clock, String shipId, ItemIdQuantityPairs itemIdQuantityPairs, Coordinates updatedCoordinates, Long offChainVersion, String commandId, String requesterId, RosterCommands.TakeOutShipInventory c) {
            java.util.function.Supplier<RosterEvent.RosterShipInventoryTakenOut> eventFactory = () -> newRosterShipInventoryTakenOut(player, clock, shipId, itemIdQuantityPairs, updatedCoordinates, offChainVersion, commandId, requesterId);
            RosterEvent.RosterShipInventoryTakenOut e;
            try {
                e = verifyTakeOutShipInventory(eventFactory, player, shipId, itemIdQuantityPairs, updatedCoordinates, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void putInShipInventory(String player, String clock, String shipId, ItemIdQuantityPairs itemIdQuantityPairs, Coordinates updatedCoordinates, Long offChainVersion, String commandId, String requesterId, RosterCommands.PutInShipInventory c) {
            java.util.function.Supplier<RosterEvent.RosterShipInventoryPutIn> eventFactory = () -> newRosterShipInventoryPutIn(player, clock, shipId, itemIdQuantityPairs, updatedCoordinates, offChainVersion, commandId, requesterId);
            RosterEvent.RosterShipInventoryPutIn e;
            try {
                e = verifyPutInShipInventory(eventFactory, player, shipId, itemIdQuantityPairs, updatedCoordinates, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected RosterEvent.RosterCreated verifyCreate(java.util.function.Supplier<RosterEvent.RosterCreated> eventFactory, Integer status, Long speed, Coordinates updatedCoordinates, BigInteger coordinatesUpdatedAt, Coordinates targetCoordinates, Coordinates originCoordinates, String shipBattleId, RosterCommands.Create c) {
            Integer Status = status;
            Long Speed = speed;
            Coordinates UpdatedCoordinates = updatedCoordinates;
            BigInteger CoordinatesUpdatedAt = coordinatesUpdatedAt;
            Coordinates TargetCoordinates = targetCoordinates;
            Coordinates OriginCoordinates = originCoordinates;
            String ShipBattleId = shipBattleId;

            RosterEvent.RosterCreated e = (RosterEvent.RosterCreated) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, RosterState.class, Integer.class, Long.class, Coordinates.class, BigInteger.class, Coordinates.class, Coordinates.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), status, speed, updatedCoordinates, coordinatesUpdatedAt, targetCoordinates, originCoordinates, shipBattleId, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class CreateLogic {
//    public static RosterEvent.RosterCreated verify(java.util.function.Supplier<RosterEvent.RosterCreated> eventFactory, RosterState rosterState, Integer status, Long speed, Coordinates updatedCoordinates, BigInteger coordinatesUpdatedAt, Coordinates targetCoordinates, Coordinates originCoordinates, String shipBattleId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected RosterEvent.EnvironmentRosterCreated verifyCreateEnvironmentRoster(java.util.function.Supplier<RosterEvent.EnvironmentRosterCreated> eventFactory, Coordinates coordinates, Long shipResourceQuantity, Long shipBaseResourceQuantity, Long baseExperience, RosterCommands.CreateEnvironmentRoster c) {
            Coordinates Coordinates = coordinates;
            Long ShipResourceQuantity = shipResourceQuantity;
            Long ShipBaseResourceQuantity = shipBaseResourceQuantity;
            Long BaseExperience = baseExperience;

            RosterEvent.EnvironmentRosterCreated e = (RosterEvent.EnvironmentRosterCreated) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.CreateEnvironmentRosterLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, RosterState.class, Coordinates.class, Long.class, Long.class, Long.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), coordinates, shipResourceQuantity, shipBaseResourceQuantity, baseExperience, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class CreateEnvironmentRosterLogic {
//    public static RosterEvent.EnvironmentRosterCreated verify(java.util.function.Supplier<RosterEvent.EnvironmentRosterCreated> eventFactory, RosterState rosterState, Coordinates coordinates, Long shipResourceQuantity, Long shipBaseResourceQuantity, Long baseExperience, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected RosterEvent.RosterShipAdded verifyAddShip(java.util.function.Supplier<RosterEvent.RosterShipAdded> eventFactory, String ship, BigInteger position, RosterCommands.AddShip c) {
            String Ship = ship;
            BigInteger Position = position;

            RosterEvent.RosterShipAdded e = (RosterEvent.RosterShipAdded) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.AddShipLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, RosterState.class, String.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), ship, position, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class AddShipLogic {
//    public static RosterEvent.RosterShipAdded verify(java.util.function.Supplier<RosterEvent.RosterShipAdded> eventFactory, RosterState rosterState, String ship, BigInteger position, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected RosterEvent.RosterSetSail verifySetSail(java.util.function.Supplier<RosterEvent.RosterSetSail> eventFactory, String player, Coordinates targetCoordinates, BigInteger sailDuration, Coordinates updatedCoordinates, RosterCommands.SetSail c) {
            String Player = player;
            Coordinates TargetCoordinates = targetCoordinates;
            BigInteger SailDuration = sailDuration;
            Coordinates UpdatedCoordinates = updatedCoordinates;

            RosterEvent.RosterSetSail e = (RosterEvent.RosterSetSail) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.SetSailLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, RosterState.class, Coordinates.class, BigInteger.class, Coordinates.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), player, targetCoordinates, sailDuration, updatedCoordinates, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class SetSailLogic {
//    public static RosterEvent.RosterSetSail verify(java.util.function.Supplier<RosterEvent.RosterSetSail> eventFactory, RosterState rosterState, String player, Coordinates targetCoordinates, BigInteger sailDuration, Coordinates updatedCoordinates, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected RosterEvent.RosterLocationUpdated verifyUpdateLocation(java.util.function.Supplier<RosterEvent.RosterLocationUpdated> eventFactory, Coordinates updatedCoordinates, RosterCommands.UpdateLocation c) {
            Coordinates UpdatedCoordinates = updatedCoordinates;

            RosterEvent.RosterLocationUpdated e = (RosterEvent.RosterLocationUpdated) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.UpdateLocationLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, RosterState.class, Coordinates.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), updatedCoordinates, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class UpdateLocationLogic {
//    public static RosterEvent.RosterLocationUpdated verify(java.util.function.Supplier<RosterEvent.RosterLocationUpdated> eventFactory, RosterState rosterState, Coordinates updatedCoordinates, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected RosterEvent.RosterShipsPositionAdjusted verifyAdjustShipsPosition(java.util.function.Supplier<RosterEvent.RosterShipsPositionAdjusted> eventFactory, String player, BigInteger[] positions, String[] shipIds, RosterCommands.AdjustShipsPosition c) {
            String Player = player;
            BigInteger[] Positions = positions;
            String[] ShipIds = shipIds;

            RosterEvent.RosterShipsPositionAdjusted e = (RosterEvent.RosterShipsPositionAdjusted) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.AdjustShipsPositionLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, RosterState.class, BigInteger[].class, String[].class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), player, positions, shipIds, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class AdjustShipsPositionLogic {
//    public static RosterEvent.RosterShipsPositionAdjusted verify(java.util.function.Supplier<RosterEvent.RosterShipsPositionAdjusted> eventFactory, RosterState rosterState, String player, BigInteger[] positions, String[] shipIds, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected RosterEvent.RosterShipTransferred verifyTransferShip(java.util.function.Supplier<RosterEvent.RosterShipTransferred> eventFactory, String player, String shipId, RosterId toRoster, BigInteger toPosition, RosterCommands.TransferShip c) {
            String Player = player;
            String ShipId = shipId;
            RosterId ToRoster = toRoster;
            BigInteger ToPosition = toPosition;

            RosterEvent.RosterShipTransferred e = (RosterEvent.RosterShipTransferred) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.TransferShipLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, RosterState.class, String.class, RosterId.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), player, shipId, toRoster, toPosition, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class TransferShipLogic {
//    public static RosterEvent.RosterShipTransferred verify(java.util.function.Supplier<RosterEvent.RosterShipTransferred> eventFactory, RosterState rosterState, String player, String shipId, RosterId toRoster, BigInteger toPosition, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected RosterEvent.RosterShipInventoryTransferred verifyTransferShipInventory(java.util.function.Supplier<RosterEvent.RosterShipInventoryTransferred> eventFactory, String player, String fromShipId, String toShipId, ItemIdQuantityPairs itemIdQuantityPairs, RosterCommands.TransferShipInventory c) {
            String Player = player;
            String FromShipId = fromShipId;
            String ToShipId = toShipId;
            ItemIdQuantityPairs ItemIdQuantityPairs = itemIdQuantityPairs;

            RosterEvent.RosterShipInventoryTransferred e = (RosterEvent.RosterShipInventoryTransferred) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.TransferShipInventoryLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, RosterState.class, String.class, String.class, ItemIdQuantityPairs.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), player, fromShipId, toShipId, itemIdQuantityPairs, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class TransferShipInventoryLogic {
//    public static RosterEvent.RosterShipInventoryTransferred verify(java.util.function.Supplier<RosterEvent.RosterShipInventoryTransferred> eventFactory, RosterState rosterState, String player, String fromShipId, String toShipId, ItemIdQuantityPairs itemIdQuantityPairs, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected RosterEvent.RosterShipInventoryTakenOut verifyTakeOutShipInventory(java.util.function.Supplier<RosterEvent.RosterShipInventoryTakenOut> eventFactory, String player, String shipId, ItemIdQuantityPairs itemIdQuantityPairs, Coordinates updatedCoordinates, RosterCommands.TakeOutShipInventory c) {
            String Player = player;
            String ShipId = shipId;
            ItemIdQuantityPairs ItemIdQuantityPairs = itemIdQuantityPairs;
            Coordinates UpdatedCoordinates = updatedCoordinates;

            RosterEvent.RosterShipInventoryTakenOut e = (RosterEvent.RosterShipInventoryTakenOut) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.TakeOutShipInventoryLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, RosterState.class, String.class, ItemIdQuantityPairs.class, Coordinates.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), player, shipId, itemIdQuantityPairs, updatedCoordinates, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class TakeOutShipInventoryLogic {
//    public static RosterEvent.RosterShipInventoryTakenOut verify(java.util.function.Supplier<RosterEvent.RosterShipInventoryTakenOut> eventFactory, RosterState rosterState, String player, String shipId, ItemIdQuantityPairs itemIdQuantityPairs, Coordinates updatedCoordinates, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected RosterEvent.RosterShipInventoryPutIn verifyPutInShipInventory(java.util.function.Supplier<RosterEvent.RosterShipInventoryPutIn> eventFactory, String player, String shipId, ItemIdQuantityPairs itemIdQuantityPairs, Coordinates updatedCoordinates, RosterCommands.PutInShipInventory c) {
            String Player = player;
            String ShipId = shipId;
            ItemIdQuantityPairs ItemIdQuantityPairs = itemIdQuantityPairs;
            Coordinates UpdatedCoordinates = updatedCoordinates;

            RosterEvent.RosterShipInventoryPutIn e = (RosterEvent.RosterShipInventoryPutIn) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.PutInShipInventoryLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, RosterState.class, String.class, ItemIdQuantityPairs.class, Coordinates.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), player, shipId, itemIdQuantityPairs, updatedCoordinates, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class PutInShipInventoryLogic {
//    public static RosterEvent.RosterShipInventoryPutIn verify(java.util.function.Supplier<RosterEvent.RosterShipInventoryPutIn> eventFactory, RosterState rosterState, String player, String shipId, ItemIdQuantityPairs itemIdQuantityPairs, Coordinates updatedCoordinates, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractRosterEvent.RosterCreated newRosterCreated(Integer status, Long speed, Coordinates updatedCoordinates, BigInteger coordinatesUpdatedAt, Coordinates targetCoordinates, Coordinates originCoordinates, String shipBattleId, Long offChainVersion, String commandId, String requesterId) {
            RosterEventId eventId = new RosterEventId(getState().getRosterId(), null);
            AbstractRosterEvent.RosterCreated e = new AbstractRosterEvent.RosterCreated();

            e.getDynamicProperties().put("status", status);
            e.getDynamicProperties().put("speed", speed);
            e.getDynamicProperties().put("updatedCoordinates", updatedCoordinates);
            e.getDynamicProperties().put("coordinatesUpdatedAt", coordinatesUpdatedAt);
            e.getDynamicProperties().put("targetCoordinates", targetCoordinates);
            e.getDynamicProperties().put("originCoordinates", originCoordinates);
            e.getDynamicProperties().put("shipBattleId", shipBattleId);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setRosterEventId(eventId);
            return e;
        }

        protected AbstractRosterEvent.EnvironmentRosterCreated newEnvironmentRosterCreated(Coordinates coordinates, Long shipResourceQuantity, Long shipBaseResourceQuantity, Long baseExperience, String clock, Long offChainVersion, String commandId, String requesterId) {
            RosterEventId eventId = new RosterEventId(getState().getRosterId(), null);
            AbstractRosterEvent.EnvironmentRosterCreated e = new AbstractRosterEvent.EnvironmentRosterCreated();

            e.getDynamicProperties().put("coordinates", coordinates);
            e.getDynamicProperties().put("shipResourceQuantity", shipResourceQuantity);
            e.getDynamicProperties().put("shipBaseResourceQuantity", shipBaseResourceQuantity);
            e.getDynamicProperties().put("baseExperience", baseExperience);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setRosterEventId(eventId);
            return e;
        }

        protected AbstractRosterEvent.RosterShipAdded newRosterShipAdded(String ship, BigInteger position, Long offChainVersion, String commandId, String requesterId) {
            RosterEventId eventId = new RosterEventId(getState().getRosterId(), null);
            AbstractRosterEvent.RosterShipAdded e = new AbstractRosterEvent.RosterShipAdded();

            e.getDynamicProperties().put("ship", ship);
            e.getDynamicProperties().put("position", position);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setRosterEventId(eventId);
            return e;
        }

        protected AbstractRosterEvent.RosterLocationUpdated newRosterLocationUpdated(String clock, Coordinates updatedCoordinates, Long offChainVersion, String commandId, String requesterId) {
            RosterEventId eventId = new RosterEventId(getState().getRosterId(), null);
            AbstractRosterEvent.RosterLocationUpdated e = new AbstractRosterEvent.RosterLocationUpdated();

            e.getDynamicProperties().put("updatedCoordinates", updatedCoordinates);
            e.setCoordinatesUpdatedAt(null);
            e.setNewStatus(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setRosterEventId(eventId);
            return e;
        }

        protected AbstractRosterEvent.RosterShipsPositionAdjusted newRosterShipsPositionAdjusted(String player, BigInteger[] positions, String[] shipIds, Long offChainVersion, String commandId, String requesterId) {
            RosterEventId eventId = new RosterEventId(getState().getRosterId(), null);
            AbstractRosterEvent.RosterShipsPositionAdjusted e = new AbstractRosterEvent.RosterShipsPositionAdjusted();

            e.getDynamicProperties().put("positions", positions);
            e.getDynamicProperties().put("shipIds", shipIds);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setRosterEventId(eventId);
            return e;
        }

        protected AbstractRosterEvent.RosterShipTransferred newRosterShipTransferred(String player, String shipId, RosterId toRoster, BigInteger toPosition, Long offChainVersion, String commandId, String requesterId) {
            RosterEventId eventId = new RosterEventId(getState().getRosterId(), null);
            AbstractRosterEvent.RosterShipTransferred e = new AbstractRosterEvent.RosterShipTransferred();

            e.getDynamicProperties().put("shipId", shipId);
            e.setToRosterId(null);
            e.getDynamicProperties().put("toPosition", toPosition);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setRosterEventId(eventId);
            return e;
        }

        protected AbstractRosterEvent.RosterShipInventoryTransferred newRosterShipInventoryTransferred(String player, String fromShipId, String toShipId, ItemIdQuantityPairs itemIdQuantityPairs, Long offChainVersion, String commandId, String requesterId) {
            RosterEventId eventId = new RosterEventId(getState().getRosterId(), null);
            AbstractRosterEvent.RosterShipInventoryTransferred e = new AbstractRosterEvent.RosterShipInventoryTransferred();

            e.getDynamicProperties().put("fromShipId", fromShipId);
            e.getDynamicProperties().put("toShipId", toShipId);
            e.getDynamicProperties().put("itemIdQuantityPairs", itemIdQuantityPairs);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setRosterEventId(eventId);
            return e;
        }

        protected AbstractRosterEvent.RosterShipInventoryTakenOut newRosterShipInventoryTakenOut(String player, String clock, String shipId, ItemIdQuantityPairs itemIdQuantityPairs, Coordinates updatedCoordinates, Long offChainVersion, String commandId, String requesterId) {
            RosterEventId eventId = new RosterEventId(getState().getRosterId(), null);
            AbstractRosterEvent.RosterShipInventoryTakenOut e = new AbstractRosterEvent.RosterShipInventoryTakenOut();

            e.getDynamicProperties().put("shipId", shipId);
            e.getDynamicProperties().put("itemIdQuantityPairs", itemIdQuantityPairs);
            e.getDynamicProperties().put("updatedCoordinates", updatedCoordinates);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setRosterEventId(eventId);
            return e;
        }

        protected AbstractRosterEvent.RosterShipInventoryPutIn newRosterShipInventoryPutIn(String player, String clock, String shipId, ItemIdQuantityPairs itemIdQuantityPairs, Coordinates updatedCoordinates, Long offChainVersion, String commandId, String requesterId) {
            RosterEventId eventId = new RosterEventId(getState().getRosterId(), null);
            AbstractRosterEvent.RosterShipInventoryPutIn e = new AbstractRosterEvent.RosterShipInventoryPutIn();

            e.getDynamicProperties().put("shipId", shipId);
            e.getDynamicProperties().put("itemIdQuantityPairs", itemIdQuantityPairs);
            e.getDynamicProperties().put("updatedCoordinates", updatedCoordinates);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setRosterEventId(eventId);
            return e;
        }

    }

}

