// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain.avatarchange;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.suiinfinitesea.domain.*;
import org.dddml.suiinfinitesea.specialization.*;

public abstract class AbstractAvatarChangeApplicationService implements AvatarChangeApplicationService {

    private EventStore eventStore;

    protected EventStore getEventStore()
    {
        return eventStore;
    }

    private AvatarChangeStateRepository stateRepository;

    protected AvatarChangeStateRepository getStateRepository() {
        return stateRepository;
    }

    private AvatarChangeStateQueryRepository stateQueryRepository;

    protected AvatarChangeStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    private AggregateEventListener<AvatarChangeAggregate, AvatarChangeState> aggregateEventListener;

    public AggregateEventListener<AvatarChangeAggregate, AvatarChangeState> getAggregateEventListener() {
        return aggregateEventListener;
    }

    public void setAggregateEventListener(AggregateEventListener<AvatarChangeAggregate, AvatarChangeState> eventListener) {
        this.aggregateEventListener = eventListener;
    }

    public AbstractAvatarChangeApplicationService(EventStore eventStore, AvatarChangeStateRepository stateRepository, AvatarChangeStateQueryRepository stateQueryRepository) {
        this.eventStore = eventStore;
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
    }

    public void when(AvatarChangeCommands.Create c) {
        update(c, ar -> ar.create(c.getImageUrl(), c.getBackgroundColor(), c.getHaircut(), c.getOutfit(), c.getAccessories(), c.getAura(), c.getSymbols(), c.getEffects(), c.getBackgrounds(), c.getDecorations(), c.getBadges(), c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public void when(AvatarChangeCommands.Update c) {
        update(c, ar -> ar.update(c.getImageUrl(), c.getBackgroundColor(), c.getHaircut(), c.getOutfit(), c.getAccessories(), c.getAura(), c.getSymbols(), c.getEffects(), c.getBackgrounds(), c.getDecorations(), c.getBadges(), c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public void when(AvatarChangeCommands.Delete c) {
        update(c, ar -> ar.delete(c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public AvatarChangeState get(String id) {
        AvatarChangeState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<AvatarChangeState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<AvatarChangeState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<AvatarChangeState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<AvatarChangeState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public AvatarChangeEvent getEvent(String avatarId, long version) {
        AvatarChangeEvent e = (AvatarChangeEvent)getEventStore().getEvent(toEventStoreAggregateId(avatarId), version);
        if (e != null) {
            ((AvatarChangeEvent.SqlAvatarChangeEvent)e).setEventReadOnly(true); 
        } else if (version == -1) {
            return getEvent(avatarId, 0);
        }
        return e;
    }

    public AvatarChangeState getHistoryState(String avatarId, long version) {
        EventStream eventStream = getEventStore().loadEventStream(AbstractAvatarChangeEvent.class, toEventStoreAggregateId(avatarId), version - 1);
        return new AbstractAvatarChangeState.SimpleAvatarChangeState(eventStream.getEvents());
    }


    public AvatarChangeAggregate getAvatarChangeAggregate(AvatarChangeState state) {
        return new AbstractAvatarChangeAggregate.SimpleAvatarChangeAggregate(state);
    }

    public EventStoreAggregateId toEventStoreAggregateId(String aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(AvatarChangeCommand c, Consumer<AvatarChangeAggregate> action) {
        String aggregateId = c.getAvatarId();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        AvatarChangeState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        AvatarChangeAggregate aggregate = getAvatarChangeAggregate(state);
        aggregate.throwOnInvalidStateTransition(c);
        action.accept(aggregate);
        persist(eventStoreAggregateId, c.getOffChainVersion() == null ? AvatarChangeState.VERSION_NULL : c.getOffChainVersion(), aggregate, state); // State version may be null!

    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, AvatarChangeAggregate aggregate, AvatarChangeState state) {
        getEventStore().appendEvents(eventStoreAggregateId, version, 
            aggregate.getChanges(), (events) -> { 
                getStateRepository().save(state); 
            });
        if (aggregateEventListener != null) {
            aggregateEventListener.eventAppended(new AggregateEvent<>(aggregate, state, aggregate.getChanges()));
        }
    }

    protected boolean isDuplicateCommand(AvatarChangeCommand command, EventStoreAggregateId eventStoreAggregateId, AvatarChangeState state) {
        boolean duplicate = false;
        if (command.getOffChainVersion() == null) { command.setOffChainVersion(AvatarChangeState.VERSION_NULL); }
        if (state.getOffChainVersion() != null && state.getOffChainVersion() > command.getOffChainVersion()) {
            Event lastEvent = getEventStore().getEvent(AbstractAvatarChangeEvent.class, eventStoreAggregateId, command.getOffChainVersion());
            if (lastEvent != null && lastEvent instanceof AbstractEvent
               && command.getCommandId() != null && command.getCommandId().equals(((AbstractEvent) lastEvent).getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    public static class SimpleAvatarChangeApplicationService extends AbstractAvatarChangeApplicationService {
        public SimpleAvatarChangeApplicationService(EventStore eventStore, AvatarChangeStateRepository stateRepository, AvatarChangeStateQueryRepository stateQueryRepository)
        {
            super(eventStore, stateRepository, stateQueryRepository);
        }
    }

}

