// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain.whitelist;

import java.util.*;
import java.math.*;
import java.util.Date;
import java.math.BigInteger;
import org.dddml.suiinfinitesea.domain.*;
import org.dddml.suiinfinitesea.specialization.*;
import org.dddml.suiinfinitesea.domain.whitelist.WhitelistEvent.*;

public abstract class AbstractWhitelistState implements WhitelistState.SqlWhitelistState, Saveable {

    private String id;

    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    private Boolean paused;

    public Boolean getPaused() {
        return this.paused;
    }

    public void setPaused(Boolean paused) {
        this.paused = paused;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    private BigInteger version;

    public BigInteger getVersion() {
        return this.version;
    }

    public void setVersion(BigInteger version) {
        this.version = version;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Set<WhitelistEntryState> protectedEntries = new HashSet<>();

    protected Set<WhitelistEntryState> getProtectedEntries() {
        return this.protectedEntries;
    }

    protected void setProtectedEntries(Set<WhitelistEntryState> protectedEntries) {
        this.protectedEntries = protectedEntries;
    }

    private EntityStateCollection<String, WhitelistEntryState> entries;

    public EntityStateCollection<String, WhitelistEntryState> getEntries() {
        return this.entries;
    }

    public void setEntries(EntityStateCollection<String, WhitelistEntryState> entries) {
        this.entries = entries;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractWhitelistState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setId(((WhitelistEvent.SqlWhitelistEvent) events.get(0)).getWhitelistEventId().getId());
            for (Event e : events) {
                mutate(e);
                this.setOffChainVersion((this.getOffChainVersion() == null ? WhitelistState.VERSION_NULL : this.getOffChainVersion()) + 1);
            }
        }
    }


    public AbstractWhitelistState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        entries = new SimpleWhitelistEntryStateCollection();
    }

    @Override
    public int hashCode() {
        return getId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof WhitelistState) {
            return Objects.equals(this.getId(), ((WhitelistState)obj).getId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else if (e instanceof AbstractWhitelistEvent.InitWhitelistEvent) {
            when((AbstractWhitelistEvent.InitWhitelistEvent)e);
        } else if (e instanceof AbstractWhitelistEvent.WhitelistUpdated) {
            when((AbstractWhitelistEvent.WhitelistUpdated)e);
        } else if (e instanceof AbstractWhitelistEvent.WhitelistEntryAdded) {
            when((AbstractWhitelistEvent.WhitelistEntryAdded)e);
        } else if (e instanceof AbstractWhitelistEvent.WhitelistEntryUpdated) {
            when((AbstractWhitelistEvent.WhitelistEntryUpdated)e);
        } else if (e instanceof AbstractWhitelistEvent.WhitelistCreated) {
            when((AbstractWhitelistEvent.WhitelistCreated)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(WhitelistState s) {
        if (s == this) {
            return;
        }
        this.setPaused(s.getPaused());
        this.setActive(s.getActive());
        this.setVersion(s.getVersion());

        if (s.getEntries() != null) {
            Iterable<WhitelistEntryState> iterable;
            if (s.getEntries().isLazy()) {
                iterable = s.getEntries().getLoadedStates();
            } else {
                iterable = s.getEntries();
            }
            if (iterable != null) {
                for (WhitelistEntryState ss : iterable) {
                    WhitelistEntryState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, WhitelistEntryState>)this.getEntries()).getOrAddDefault(ss.getAccountAddress());
                    ((AbstractWhitelistEntryState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getEntries() != null) {
            if (s.getEntries() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getEntries()).getRemovedStates() != null) {
                    for (WhitelistEntryState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, WhitelistEntryState>)s.getEntries()).getRemovedStates()) {
                        WhitelistEntryState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, WhitelistEntryState>)this.getEntries()).getOrAddDefault(ss.getAccountAddress());
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getEntries()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getEntries().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getEntries().stream().map(i -> i.getAccountAddress()).collect(java.util.stream.Collectors.toList()));
                    s.getEntries().forEach(i -> removedStateIds.remove(i.getAccountAddress()));
                    for (String i : removedStateIds) {
                        WhitelistEntryState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, WhitelistEntryState>)this.getEntries()).getOrAddDefault(i);
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getEntries()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(AbstractWhitelistEvent.InitWhitelistEvent e) {
        throwOnWrongEvent(e);

        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        WhitelistState updatedWhitelistState = (WhitelistState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.whitelist.__Init__Logic",
                    "mutate",
                    new Class[]{WhitelistState.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.whitelist;
//
//public class __Init__Logic {
//    public static WhitelistState mutate(WhitelistState whitelistState, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<WhitelistState, WhitelistState.MutableWhitelistState> mutationContext) {
//    }
//}

        if (this != updatedWhitelistState) { merge(updatedWhitelistState); } //else do nothing

    }

    public void when(AbstractWhitelistEvent.WhitelistUpdated e) {
        throwOnWrongEvent(e);

        Boolean paused = e.getPaused();
        Boolean Paused = paused;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        WhitelistState updatedWhitelistState = (WhitelistState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.whitelist.UpdateLogic",
                    "mutate",
                    new Class[]{WhitelistState.class, Boolean.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, paused, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.whitelist;
//
//public class UpdateLogic {
//    public static WhitelistState mutate(WhitelistState whitelistState, Boolean paused, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<WhitelistState, WhitelistState.MutableWhitelistState> mutationContext) {
//    }
//}

        if (this != updatedWhitelistState) { merge(updatedWhitelistState); } //else do nothing

    }

    public void when(AbstractWhitelistEvent.WhitelistEntryAdded e) {
        throwOnWrongEvent(e);

        String accountAddress = e.getAccountAddress();
        String AccountAddress = accountAddress;
        String name = e.getName();
        String Name = name;
        String imageUrl = e.getImageUrl();
        String ImageUrl = imageUrl;
        String description = e.getDescription();
        String Description = description;
        Long backgroundColor = e.getBackgroundColor();
        Long BackgroundColor = backgroundColor;
        Integer race = e.getRace();
        Integer Race = race;
        Integer eyes = e.getEyes();
        Integer Eyes = eyes;
        Integer mouth = e.getMouth();
        Integer Mouth = mouth;
        Integer haircut = e.getHaircut();
        Integer Haircut = haircut;
        Integer skin = e.getSkin();
        Integer Skin = skin;
        Integer outfit = e.getOutfit();
        Integer Outfit = outfit;
        Integer accessories = e.getAccessories();
        Integer Accessories = accessories;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        WhitelistState updatedWhitelistState = (WhitelistState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.whitelist.AddWhitelistEntryLogic",
                    "mutate",
                    new Class[]{WhitelistState.class, String.class, String.class, String.class, String.class, Long.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, accountAddress, name, imageUrl, description, backgroundColor, race, eyes, mouth, haircut, skin, outfit, accessories, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.whitelist;
//
//public class AddWhitelistEntryLogic {
//    public static WhitelistState mutate(WhitelistState whitelistState, String accountAddress, String name, String imageUrl, String description, Long backgroundColor, Integer race, Integer eyes, Integer mouth, Integer haircut, Integer skin, Integer outfit, Integer accessories, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<WhitelistState, WhitelistState.MutableWhitelistState> mutationContext) {
//    }
//}

        if (this != updatedWhitelistState) { merge(updatedWhitelistState); } //else do nothing

    }

    public void when(AbstractWhitelistEvent.WhitelistEntryUpdated e) {
        throwOnWrongEvent(e);

        String accountAddress = e.getAccountAddress();
        String AccountAddress = accountAddress;
        String name = e.getName();
        String Name = name;
        String imageUrl = e.getImageUrl();
        String ImageUrl = imageUrl;
        String description = e.getDescription();
        String Description = description;
        Long backgroundColor = e.getBackgroundColor();
        Long BackgroundColor = backgroundColor;
        Integer race = e.getRace();
        Integer Race = race;
        Integer eyes = e.getEyes();
        Integer Eyes = eyes;
        Integer mouth = e.getMouth();
        Integer Mouth = mouth;
        Integer haircut = e.getHaircut();
        Integer Haircut = haircut;
        Integer skin = e.getSkin();
        Integer Skin = skin;
        Integer outfit = e.getOutfit();
        Integer Outfit = outfit;
        Integer accessories = e.getAccessories();
        Integer Accessories = accessories;
        Boolean claimed = e.getClaimed();
        Boolean Claimed = claimed;
        Boolean paused = e.getPaused();
        Boolean Paused = paused;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        WhitelistState updatedWhitelistState = (WhitelistState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.whitelist.UpdateWhitelistEntryLogic",
                    "mutate",
                    new Class[]{WhitelistState.class, String.class, String.class, String.class, String.class, Long.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Boolean.class, Boolean.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, accountAddress, name, imageUrl, description, backgroundColor, race, eyes, mouth, haircut, skin, outfit, accessories, claimed, paused, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.whitelist;
//
//public class UpdateWhitelistEntryLogic {
//    public static WhitelistState mutate(WhitelistState whitelistState, String accountAddress, String name, String imageUrl, String description, Long backgroundColor, Integer race, Integer eyes, Integer mouth, Integer haircut, Integer skin, Integer outfit, Integer accessories, Boolean claimed, Boolean paused, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<WhitelistState, WhitelistState.MutableWhitelistState> mutationContext) {
//    }
//}

        if (this != updatedWhitelistState) { merge(updatedWhitelistState); } //else do nothing

    }

    public void when(AbstractWhitelistEvent.WhitelistClaimed e) {
        throwOnWrongEvent(e);

        String accountAddress = e.getAccountAddress();
        String AccountAddress = accountAddress;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        WhitelistState updatedWhitelistState = (WhitelistState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.whitelist.ClaimLogic",
                    "mutate",
                    new Class[]{WhitelistState.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, accountAddress, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.whitelist;
//
//public class ClaimLogic {
//    public static WhitelistState mutate(WhitelistState whitelistState, String accountAddress, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<WhitelistState, WhitelistState.MutableWhitelistState> mutationContext) {
//    }
//}

        if (this != updatedWhitelistState) { merge(updatedWhitelistState); } //else do nothing

    }

    public void when(AbstractWhitelistEvent.WhitelistCreated e) {
        throwOnWrongEvent(e);

        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        WhitelistState updatedWhitelistState = (WhitelistState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.whitelist.CreateLogic",
                    "mutate",
                    new Class[]{WhitelistState.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.whitelist;
//
//public class CreateLogic {
//    public static WhitelistState mutate(WhitelistState whitelistState, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<WhitelistState, WhitelistState.MutableWhitelistState> mutationContext) {
//    }
//}

        if (this != updatedWhitelistState) { merge(updatedWhitelistState); } //else do nothing

    }

    public void save() {
        if (entries instanceof Saveable) {
            ((Saveable)entries).save();
        }
    }

    protected void throwOnWrongEvent(WhitelistEvent event) {
        String stateEntityId = this.getId(); // Aggregate Id
        String eventEntityId = ((WhitelistEvent.SqlWhitelistEvent)event).getWhitelistEventId().getId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getOffChainVersion();

    }


    public static class SimpleWhitelistState extends AbstractWhitelistState {

        public SimpleWhitelistState() {
        }

        public SimpleWhitelistState(List<Event> events) {
            super(events);
        }

        public static SimpleWhitelistState newForReapplying() {
            SimpleWhitelistState s = new SimpleWhitelistState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleWhitelistEntryStateCollection implements EntityStateCollection.ModifiableEntityStateCollection<String, WhitelistEntryState>, Collection<WhitelistEntryState> {

        @Override
        public WhitelistEntryState get(String accountAddress) {
            return protectedEntries.stream().filter(
                            e -> e.getAccountAddress().equals(accountAddress))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<WhitelistEntryState> getLoadedStates() {
            return protectedEntries;
        }

        @Override
        public WhitelistEntryState getOrAddDefault(String accountAddress) {
            WhitelistEntryState s = get(accountAddress);
            if (s == null) {
                WhitelistEntryId globalId = new WhitelistEntryId(getId(), accountAddress);
                AbstractWhitelistEntryState state = new AbstractWhitelistEntryState.SimpleWhitelistEntryState();
                state.setWhitelistEntryId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedEntries.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedEntries.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedEntries.contains(o);
        }

        @Override
        public Iterator<WhitelistEntryState> iterator() {
            return protectedEntries.iterator();
        }

        @Override
        public java.util.stream.Stream<WhitelistEntryState> stream() {
            return protectedEntries.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedEntries.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedEntries.toArray(a);
        }

        @Override
        public boolean add(WhitelistEntryState s) {
            if (s instanceof AbstractWhitelistEntryState) {
                AbstractWhitelistEntryState state = (AbstractWhitelistEntryState) s;
                state.setProtectedWhitelistState(AbstractWhitelistState.this);
            }
            return protectedEntries.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractWhitelistEntryState) {
                AbstractWhitelistEntryState s = (AbstractWhitelistEntryState) o;
                s.setProtectedWhitelistState(null);
            }
            return protectedEntries.remove(o);
        }

        @Override
        public boolean removeState(WhitelistEntryState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedEntries.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends WhitelistEntryState> c) {
            return protectedEntries.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedEntries.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedEntries.retainAll(c);
        }

        @Override
        public void clear() {
            protectedEntries.clear();
        }
    }


}

