// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain.roster;

import java.util.*;
import java.math.*;
import org.dddml.suiinfinitesea.domain.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.suiinfinitesea.specialization.*;
import org.dddml.suiinfinitesea.domain.roster.RosterEvent.*;

public abstract class AbstractRosterState implements RosterState.SqlRosterState, Saveable {

    private RosterId rosterId;

    public RosterId getRosterId() {
        return this.rosterId;
    }

    public void setRosterId(RosterId rosterId) {
        this.rosterId = rosterId;
    }

    private String id_;

    public String getId_() {
        return this.id_;
    }

    public void setId_(String id) {
        this.id_ = id;
    }

    private Integer status;

    public Integer getStatus() {
        return this.status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    private Long speed;

    public Long getSpeed() {
        return this.speed;
    }

    public void setSpeed(Long speed) {
        this.speed = speed;
    }

    private ObjectTable ships;

    public ObjectTable getShips() {
        return this.ships;
    }

    public void setShips(ObjectTable ships) {
        this.ships = ships;
    }

    private Coordinates updatedCoordinates;

    public Coordinates getUpdatedCoordinates() {
        return this.updatedCoordinates;
    }

    public void setUpdatedCoordinates(Coordinates updatedCoordinates) {
        this.updatedCoordinates = updatedCoordinates;
    }

    private BigInteger coordinatesUpdatedAt;

    public BigInteger getCoordinatesUpdatedAt() {
        return this.coordinatesUpdatedAt;
    }

    public void setCoordinatesUpdatedAt(BigInteger coordinatesUpdatedAt) {
        this.coordinatesUpdatedAt = coordinatesUpdatedAt;
    }

    private Coordinates targetCoordinates;

    public Coordinates getTargetCoordinates() {
        return this.targetCoordinates;
    }

    public void setTargetCoordinates(Coordinates targetCoordinates) {
        this.targetCoordinates = targetCoordinates;
    }

    private Coordinates originCoordinates;

    public Coordinates getOriginCoordinates() {
        return this.originCoordinates;
    }

    public void setOriginCoordinates(Coordinates originCoordinates) {
        this.originCoordinates = originCoordinates;
    }

    private BigInteger sailDuration;

    public BigInteger getSailDuration() {
        return this.sailDuration;
    }

    public void setSailDuration(BigInteger sailDuration) {
        this.sailDuration = sailDuration;
    }

    private BigInteger setSailAt;

    public BigInteger getSetSailAt() {
        return this.setSailAt;
    }

    public void setSetSailAt(BigInteger setSailAt) {
        this.setSailAt = setSailAt;
    }

    private String shipBattleId;

    public String getShipBattleId() {
        return this.shipBattleId;
    }

    public void setShipBattleId(String shipBattleId) {
        this.shipBattleId = shipBattleId;
    }

    private Boolean environmentOwned;

    public Boolean getEnvironmentOwned() {
        return this.environmentOwned;
    }

    public void setEnvironmentOwned(Boolean environmentOwned) {
        this.environmentOwned = environmentOwned;
    }

    private Long baseExperience;

    public Long getBaseExperience() {
        return this.baseExperience;
    }

    public void setBaseExperience(Long baseExperience) {
        this.baseExperience = baseExperience;
    }

    private java.math.BigInteger energyVault;

    public java.math.BigInteger getEnergyVault() {
        return this.energyVault;
    }

    public void setEnergyVault(java.math.BigInteger energyVault) {
        this.energyVault = energyVault;
    }

    private BigInteger version;

    public BigInteger getVersion() {
        return this.version;
    }

    public void setVersion(BigInteger version) {
        this.version = version;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    private Set<String> shipIds;

    public Set<String> getShipIds() {
        return this.shipIds;
    }

    public void setShipIds(Set<String> shipIds) {
        this.shipIds = shipIds;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Set<RosterShipsItemState> protectedRosterShipsItems = new HashSet<>();

    protected Set<RosterShipsItemState> getProtectedRosterShipsItems() {
        return this.protectedRosterShipsItems;
    }

    protected void setProtectedRosterShipsItems(Set<RosterShipsItemState> protectedRosterShipsItems) {
        this.protectedRosterShipsItems = protectedRosterShipsItems;
    }

    private EntityStateCollection<String, RosterShipsItemState> rosterShipsItems;

    public EntityStateCollection<String, RosterShipsItemState> getRosterShipsItems() {
        return this.rosterShipsItems;
    }

    public void setRosterShipsItems(EntityStateCollection<String, RosterShipsItemState> rosterShipsItems) {
        this.rosterShipsItems = rosterShipsItems;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractRosterState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setRosterId(((RosterEvent.SqlRosterEvent) events.get(0)).getRosterEventId().getRosterId());
            for (Event e : events) {
                mutate(e);
                this.setOffChainVersion((this.getOffChainVersion() == null ? RosterState.VERSION_NULL : this.getOffChainVersion()) + 1);
            }
        }
    }


    public AbstractRosterState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        rosterShipsItems = new SimpleRosterShipsItemStateCollection();
    }

    @Override
    public int hashCode() {
        return getRosterId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof RosterState) {
            return Objects.equals(this.getRosterId(), ((RosterState)obj).getRosterId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else if (e instanceof AbstractRosterEvent.EnvironmentRosterCreated) {
            when((AbstractRosterEvent.EnvironmentRosterCreated)e);
        } else if (e instanceof AbstractRosterEvent.RosterShipsPositionAdjusted) {
            when((AbstractRosterEvent.RosterShipsPositionAdjusted)e);
        } else if (e instanceof AbstractRosterEvent.RosterShipTransferred) {
            when((AbstractRosterEvent.RosterShipTransferred)e);
        } else if (e instanceof AbstractRosterEvent.RosterShipInventoryTransferred) {
            when((AbstractRosterEvent.RosterShipInventoryTransferred)e);
        } else if (e instanceof AbstractRosterEvent.RosterShipInventoryTakenOut) {
            when((AbstractRosterEvent.RosterShipInventoryTakenOut)e);
        } else if (e instanceof AbstractRosterEvent.RosterShipInventoryPutIn) {
            when((AbstractRosterEvent.RosterShipInventoryPutIn)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(RosterState s) {
        if (s == this) {
            return;
        }
        this.setStatus(s.getStatus());
        this.setSpeed(s.getSpeed());
        this.setShipIds(s.getShipIds());
        this.setShips(s.getShips());
        this.setUpdatedCoordinates(s.getUpdatedCoordinates());
        this.setCoordinatesUpdatedAt(s.getCoordinatesUpdatedAt());
        this.setTargetCoordinates(s.getTargetCoordinates());
        this.setOriginCoordinates(s.getOriginCoordinates());
        this.setSailDuration(s.getSailDuration());
        this.setSetSailAt(s.getSetSailAt());
        this.setShipBattleId(s.getShipBattleId());
        this.setEnvironmentOwned(s.getEnvironmentOwned());
        this.setBaseExperience(s.getBaseExperience());
        this.setEnergyVault(s.getEnergyVault());
        this.setVersion(s.getVersion());
        this.setActive(s.getActive());

        if (s.getRosterShipsItems() != null) {
            Iterable<RosterShipsItemState> iterable;
            if (s.getRosterShipsItems().isLazy()) {
                iterable = s.getRosterShipsItems().getLoadedStates();
            } else {
                iterable = s.getRosterShipsItems();
            }
            if (iterable != null) {
                for (RosterShipsItemState ss : iterable) {
                    RosterShipsItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, RosterShipsItemState>)this.getRosterShipsItems()).getOrAddDefault(ss.getKey());
                    ((AbstractRosterShipsItemState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getRosterShipsItems() != null) {
            if (s.getRosterShipsItems() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getRosterShipsItems()).getRemovedStates() != null) {
                    for (RosterShipsItemState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, RosterShipsItemState>)s.getRosterShipsItems()).getRemovedStates()) {
                        RosterShipsItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, RosterShipsItemState>)this.getRosterShipsItems()).getOrAddDefault(ss.getKey());
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getRosterShipsItems()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getRosterShipsItems().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getRosterShipsItems().stream().map(i -> i.getKey()).collect(java.util.stream.Collectors.toList()));
                    s.getRosterShipsItems().forEach(i -> removedStateIds.remove(i.getKey()));
                    for (String i : removedStateIds) {
                        RosterShipsItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, RosterShipsItemState>)this.getRosterShipsItems()).getOrAddDefault(i);
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getRosterShipsItems()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(AbstractRosterEvent.RosterCreated e) {
        throwOnWrongEvent(e);

        Integer status = e.getStatus();
        Integer Status = status;
        Long speed = e.getSpeed();
        Long Speed = speed;
        Coordinates updatedCoordinates = e.getUpdatedCoordinates();
        Coordinates UpdatedCoordinates = updatedCoordinates;
        BigInteger coordinatesUpdatedAt = e.getCoordinatesUpdatedAt();
        BigInteger CoordinatesUpdatedAt = coordinatesUpdatedAt;
        Coordinates targetCoordinates = e.getTargetCoordinates();
        Coordinates TargetCoordinates = targetCoordinates;
        Coordinates originCoordinates = e.getOriginCoordinates();
        Coordinates OriginCoordinates = originCoordinates;
        String shipBattleId = e.getShipBattleId();
        String ShipBattleId = shipBattleId;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.CreateLogic",
                    "mutate",
                    new Class[]{RosterState.class, Integer.class, Long.class, Coordinates.class, BigInteger.class, Coordinates.class, Coordinates.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, status, speed, updatedCoordinates, coordinatesUpdatedAt, targetCoordinates, originCoordinates, shipBattleId, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class CreateLogic {
//    public static RosterState mutate(RosterState rosterState, Integer status, Long speed, Coordinates updatedCoordinates, BigInteger coordinatesUpdatedAt, Coordinates targetCoordinates, Coordinates originCoordinates, String shipBattleId, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.EnvironmentRosterCreated e) {
        throwOnWrongEvent(e);

        Coordinates coordinates = e.getCoordinates();
        Coordinates Coordinates = coordinates;
        Long shipResourceQuantity = e.getShipResourceQuantity();
        Long ShipResourceQuantity = shipResourceQuantity;
        Long shipBaseResourceQuantity = e.getShipBaseResourceQuantity();
        Long ShipBaseResourceQuantity = shipBaseResourceQuantity;
        Long baseExperience = e.getBaseExperience();
        Long BaseExperience = baseExperience;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.CreateEnvironmentRosterLogic",
                    "mutate",
                    new Class[]{RosterState.class, Coordinates.class, Long.class, Long.class, Long.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, coordinates, shipResourceQuantity, shipBaseResourceQuantity, baseExperience, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class CreateEnvironmentRosterLogic {
//    public static RosterState mutate(RosterState rosterState, Coordinates coordinates, Long shipResourceQuantity, Long shipBaseResourceQuantity, Long baseExperience, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.RosterShipAdded e) {
        throwOnWrongEvent(e);

        String ship = e.getShip();
        String Ship = ship;
        BigInteger position = e.getPosition();
        BigInteger Position = position;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.AddShipLogic",
                    "mutate",
                    new Class[]{RosterState.class, String.class, BigInteger.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, ship, position, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class AddShipLogic {
//    public static RosterState mutate(RosterState rosterState, String ship, BigInteger position, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.RosterSetSail e) {
        throwOnWrongEvent(e);

        Coordinates targetCoordinates = e.getTargetCoordinates();
        Coordinates TargetCoordinates = targetCoordinates;
        BigInteger sailDuration = e.getSailDuration();
        BigInteger SailDuration = sailDuration;
        BigInteger setSailAt = e.getSetSailAt();
        BigInteger SetSailAt = setSailAt;
        Coordinates updatedCoordinates = e.getUpdatedCoordinates();
        Coordinates UpdatedCoordinates = updatedCoordinates;
        BigInteger energyCost = e.getEnergyCost();
        BigInteger EnergyCost = energyCost;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.SetSailLogic",
                    "mutate",
                    new Class[]{RosterState.class, Coordinates.class, BigInteger.class, BigInteger.class, Coordinates.class, BigInteger.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, targetCoordinates, sailDuration, setSailAt, updatedCoordinates, energyCost, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class SetSailLogic {
//    public static RosterState mutate(RosterState rosterState, Coordinates targetCoordinates, BigInteger sailDuration, BigInteger setSailAt, Coordinates updatedCoordinates, BigInteger energyCost, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.RosterShipsPositionAdjusted e) {
        throwOnWrongEvent(e);

        BigInteger[] positions = e.getPositions();
        BigInteger[] Positions = positions;
        String[] shipIds = e.getShipIds();
        String[] ShipIds = shipIds;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.AdjustShipsPositionLogic",
                    "mutate",
                    new Class[]{RosterState.class, BigInteger[].class, String[].class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, positions, shipIds, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class AdjustShipsPositionLogic {
//    public static RosterState mutate(RosterState rosterState, BigInteger[] positions, String[] shipIds, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.RosterShipTransferred e) {
        throwOnWrongEvent(e);

        String shipId = e.getShipId();
        String ShipId = shipId;
        RosterId toRosterId = e.getToRosterId();
        RosterId ToRosterId = toRosterId;
        BigInteger toPosition = e.getToPosition();
        BigInteger ToPosition = toPosition;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.TransferShipLogic",
                    "mutate",
                    new Class[]{RosterState.class, String.class, RosterId.class, BigInteger.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, shipId, toRosterId, toPosition, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class TransferShipLogic {
//    public static RosterState mutate(RosterState rosterState, String shipId, RosterId toRosterId, BigInteger toPosition, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.RosterShipInventoryTransferred e) {
        throwOnWrongEvent(e);

        String fromShipId = e.getFromShipId();
        String FromShipId = fromShipId;
        String toShipId = e.getToShipId();
        String ToShipId = toShipId;
        ItemIdQuantityPairs itemIdQuantityPairs = e.getItemIdQuantityPairs();
        ItemIdQuantityPairs ItemIdQuantityPairs = itemIdQuantityPairs;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.TransferShipInventoryLogic",
                    "mutate",
                    new Class[]{RosterState.class, String.class, String.class, ItemIdQuantityPairs.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, fromShipId, toShipId, itemIdQuantityPairs, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class TransferShipInventoryLogic {
//    public static RosterState mutate(RosterState rosterState, String fromShipId, String toShipId, ItemIdQuantityPairs itemIdQuantityPairs, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.RosterShipInventoryTakenOut e) {
        throwOnWrongEvent(e);

        String shipId = e.getShipId();
        String ShipId = shipId;
        ItemIdQuantityPairs itemIdQuantityPairs = e.getItemIdQuantityPairs();
        ItemIdQuantityPairs ItemIdQuantityPairs = itemIdQuantityPairs;
        Coordinates updatedCoordinates = e.getUpdatedCoordinates();
        Coordinates UpdatedCoordinates = updatedCoordinates;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.TakeOutShipInventoryLogic",
                    "mutate",
                    new Class[]{RosterState.class, String.class, ItemIdQuantityPairs.class, Coordinates.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, shipId, itemIdQuantityPairs, updatedCoordinates, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class TakeOutShipInventoryLogic {
//    public static RosterState mutate(RosterState rosterState, String shipId, ItemIdQuantityPairs itemIdQuantityPairs, Coordinates updatedCoordinates, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.RosterShipInventoryPutIn e) {
        throwOnWrongEvent(e);

        String shipId = e.getShipId();
        String ShipId = shipId;
        ItemIdQuantityPairs itemIdQuantityPairs = e.getItemIdQuantityPairs();
        ItemIdQuantityPairs ItemIdQuantityPairs = itemIdQuantityPairs;
        Coordinates updatedCoordinates = e.getUpdatedCoordinates();
        Coordinates UpdatedCoordinates = updatedCoordinates;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.roster.PutInShipInventoryLogic",
                    "mutate",
                    new Class[]{RosterState.class, String.class, ItemIdQuantityPairs.class, Coordinates.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, shipId, itemIdQuantityPairs, updatedCoordinates, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.roster;
//
//public class PutInShipInventoryLogic {
//    public static RosterState mutate(RosterState rosterState, String shipId, ItemIdQuantityPairs itemIdQuantityPairs, Coordinates updatedCoordinates, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void save() {
        if (rosterShipsItems instanceof Saveable) {
            ((Saveable)rosterShipsItems).save();
        }
    }

    protected void throwOnWrongEvent(RosterEvent event) {
        RosterId stateEntityId = this.getRosterId(); // Aggregate Id
        RosterId eventEntityId = ((RosterEvent.SqlRosterEvent)event).getRosterEventId().getRosterId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getOffChainVersion();

    }


    public static class SimpleRosterState extends AbstractRosterState {

        public SimpleRosterState() {
        }

        public SimpleRosterState(List<Event> events) {
            super(events);
        }

        public static SimpleRosterState newForReapplying() {
            SimpleRosterState s = new SimpleRosterState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleRosterShipsItemStateCollection implements EntityStateCollection.ModifiableEntityStateCollection<String, RosterShipsItemState>, Collection<RosterShipsItemState> {

        @Override
        public RosterShipsItemState get(String key) {
            return protectedRosterShipsItems.stream().filter(
                            e -> e.getKey().equals(key))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<RosterShipsItemState> getLoadedStates() {
            return protectedRosterShipsItems;
        }

        @Override
        public RosterShipsItemState getOrAddDefault(String key) {
            RosterShipsItemState s = get(key);
            if (s == null) {
                RosterShipsItemId globalId = new RosterShipsItemId(getRosterId(), key);
                AbstractRosterShipsItemState state = new AbstractRosterShipsItemState.SimpleRosterShipsItemState();
                state.setRosterShipsItemId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedRosterShipsItems.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedRosterShipsItems.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedRosterShipsItems.contains(o);
        }

        @Override
        public Iterator<RosterShipsItemState> iterator() {
            return protectedRosterShipsItems.iterator();
        }

        @Override
        public java.util.stream.Stream<RosterShipsItemState> stream() {
            return protectedRosterShipsItems.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedRosterShipsItems.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedRosterShipsItems.toArray(a);
        }

        @Override
        public boolean add(RosterShipsItemState s) {
            if (s instanceof AbstractRosterShipsItemState) {
                AbstractRosterShipsItemState state = (AbstractRosterShipsItemState) s;
                state.setProtectedRosterState(AbstractRosterState.this);
            }
            return protectedRosterShipsItems.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractRosterShipsItemState) {
                AbstractRosterShipsItemState s = (AbstractRosterShipsItemState) o;
                s.setProtectedRosterState(null);
            }
            return protectedRosterShipsItems.remove(o);
        }

        @Override
        public boolean removeState(RosterShipsItemState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedRosterShipsItems.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends RosterShipsItemState> c) {
            return protectedRosterShipsItems.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedRosterShipsItems.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedRosterShipsItems.retainAll(c);
        }

        @Override
        public void clear() {
            protectedRosterShipsItems.clear();
        }
    }


}

