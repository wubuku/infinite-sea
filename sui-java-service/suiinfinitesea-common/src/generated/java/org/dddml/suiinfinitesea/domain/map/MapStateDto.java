// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain.map;

import java.util.*;
import java.math.*;
import java.util.Date;
import java.math.BigInteger;
import org.dddml.suiinfinitesea.domain.*;
import org.dddml.suiinfinitesea.specialization.*;


public class MapStateDto {

    private String id;

    public String getId()
    {
        return this.id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    private Integer claimIslandSetting;

    public Integer getClaimIslandSetting()
    {
        return this.claimIslandSetting;
    }

    public void setClaimIslandSetting(Integer claimIslandSetting)
    {
        this.claimIslandSetting = claimIslandSetting;
    }

    private Table claimIslandWhitelist;

    public Table getClaimIslandWhitelist()
    {
        return this.claimIslandWhitelist;
    }

    public void setClaimIslandWhitelist(Table claimIslandWhitelist)
    {
        this.claimIslandWhitelist = claimIslandWhitelist;
    }

    private Boolean active;

    public Boolean getActive()
    {
        return this.active;
    }

    public void setActive(Boolean active)
    {
        this.active = active;
    }

    private BigInteger version;

    public BigInteger getVersion()
    {
        return this.version;
    }

    public void setVersion(BigInteger version)
    {
        this.version = version;
    }

    private Long offChainVersion;

    public Long getOffChainVersion()
    {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion)
    {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy()
    {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy)
    {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt()
    {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt)
    {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy)
    {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt()
    {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt)
    {
        this.updatedAt = updatedAt;
    }

    private MapLocationStateDto[] locations;

    public MapLocationStateDto[] getLocations()
    {
        return this.locations;
    }    

    public void setLocations(MapLocationStateDto[] locations)
    {
        this.locations = locations;
    }

    private MapClaimIslandWhitelistItemStateDto[] mapClaimIslandWhitelistItems;

    public MapClaimIslandWhitelistItemStateDto[] getMapClaimIslandWhitelistItems()
    {
        return this.mapClaimIslandWhitelistItems;
    }    

    public void setMapClaimIslandWhitelistItems(MapClaimIslandWhitelistItemStateDto[] mapClaimIslandWhitelistItems)
    {
        this.mapClaimIslandWhitelistItems = mapClaimIslandWhitelistItems;
    }


    public static class DtoConverter extends AbstractStateDtoConverter
    {
        public static Collection<String> collectionFieldNames = Arrays.asList(new String[]{"Locations", "MapClaimIslandWhitelistItems"});

        @Override
        protected boolean isCollectionField(String fieldName) {
            return CollectionUtils.collectionContainsIgnoringCase(collectionFieldNames, fieldName);
        }

        public MapStateDto[] toMapStateDtoArray(Iterable<MapState> states) {
            return toMapStateDtoList(states).toArray(new MapStateDto[0]);
        }

        public List<MapStateDto> toMapStateDtoList(Iterable<MapState> states) {
            ArrayList<MapStateDto> stateDtos = new ArrayList();
            for (MapState s : states) {
                MapStateDto dto = toMapStateDto(s);
                stateDtos.add(dto);
            }
            return stateDtos;
        }

        public MapStateDto toMapStateDto(MapState state)
        {
            if(state == null) {
                return null;
            }
            MapStateDto dto = new MapStateDto();
            if (returnedFieldsContains("Id")) {
                dto.setId(state.getId());
            }
            if (returnedFieldsContains("ClaimIslandSetting")) {
                dto.setClaimIslandSetting(state.getClaimIslandSetting());
            }
            if (returnedFieldsContains("ClaimIslandWhitelist")) {
                dto.setClaimIslandWhitelist(state.getClaimIslandWhitelist());
            }
            if (returnedFieldsContains("Active")) {
                dto.setActive(state.getActive());
            }
            if (returnedFieldsContains("Version")) {
                dto.setVersion(state.getVersion());
            }
            if (returnedFieldsContains("OffChainVersion")) {
                dto.setOffChainVersion(state.getOffChainVersion());
            }
            if (returnedFieldsContains("CreatedBy")) {
                dto.setCreatedBy(state.getCreatedBy());
            }
            if (returnedFieldsContains("CreatedAt")) {
                dto.setCreatedAt(state.getCreatedAt());
            }
            if (returnedFieldsContains("UpdatedBy")) {
                dto.setUpdatedBy(state.getUpdatedBy());
            }
            if (returnedFieldsContains("UpdatedAt")) {
                dto.setUpdatedAt(state.getUpdatedAt());
            }
            if (returnedFieldsContains("Locations")) {
                ArrayList<MapLocationStateDto> arrayList = new ArrayList();
                if (state.getLocations() != null) {
                    MapLocationStateDto.DtoConverter conv = new MapLocationStateDto.DtoConverter();
                    String returnFS = CollectionUtils.mapGetValueIgnoringCase(getReturnedFields(), "Locations");
                    if(returnFS != null) { conv.setReturnedFieldsString(returnFS); } else { conv.setAllFieldsReturned(this.getAllFieldsReturned()); }
                    for (MapLocationState s : state.getLocations()) {
                        arrayList.add(conv.toMapLocationStateDto(s));
                    }
                }
                dto.setLocations(arrayList.toArray(new MapLocationStateDto[0]));
            }
            if (returnedFieldsContains("MapClaimIslandWhitelistItems")) {
                ArrayList<MapClaimIslandWhitelistItemStateDto> arrayList = new ArrayList();
                if (state.getMapClaimIslandWhitelistItems() != null) {
                    MapClaimIslandWhitelistItemStateDto.DtoConverter conv = new MapClaimIslandWhitelistItemStateDto.DtoConverter();
                    String returnFS = CollectionUtils.mapGetValueIgnoringCase(getReturnedFields(), "MapClaimIslandWhitelistItems");
                    if(returnFS != null) { conv.setReturnedFieldsString(returnFS); } else { conv.setAllFieldsReturned(this.getAllFieldsReturned()); }
                    for (MapClaimIslandWhitelistItemState s : state.getMapClaimIslandWhitelistItems()) {
                        arrayList.add(conv.toMapClaimIslandWhitelistItemStateDto(s));
                    }
                }
                dto.setMapClaimIslandWhitelistItems(arrayList.toArray(new MapClaimIslandWhitelistItemStateDto[0]));
            }
            return dto;
        }

    }
}

