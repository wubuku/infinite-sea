// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain.ship;

import java.util.*;
import java.math.*;
import org.dddml.suiinfinitesea.domain.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.suiinfinitesea.specialization.*;
import org.dddml.suiinfinitesea.domain.ship.ShipEvent.*;

public abstract class AbstractShipState implements ShipState.SqlShipState {

    private String id;

    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    private String owner;

    public String getOwner() {
        return this.owner;
    }

    public void setOwner(String owner) {
        this.owner = owner;
    }

    private Long healthPoints;

    public Long getHealthPoints() {
        return this.healthPoints;
    }

    public void setHealthPoints(Long healthPoints) {
        this.healthPoints = healthPoints;
    }

    private Long attack;

    public Long getAttack() {
        return this.attack;
    }

    public void setAttack(Long attack) {
        this.attack = attack;
    }

    private Long protection;

    public Long getProtection() {
        return this.protection;
    }

    public void setProtection(Long protection) {
        this.protection = protection;
    }

    private Long speed;

    public Long getSpeed() {
        return this.speed;
    }

    public void setSpeed(Long speed) {
        this.speed = speed;
    }

    private ItemIdQuantityPairs buildingExpenses;

    public ItemIdQuantityPairs getBuildingExpenses() {
        return this.buildingExpenses;
    }

    public void setBuildingExpenses(ItemIdQuantityPairs buildingExpenses) {
        this.buildingExpenses = buildingExpenses;
    }

    private BigInteger version;

    public BigInteger getVersion() {
        return this.version;
    }

    public void setVersion(BigInteger version) {
        this.version = version;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    private Set<ItemIdQuantityPair> inventory;

    public Set<ItemIdQuantityPair> getInventory() {
        return this.inventory;
    }

    public void setInventory(Set<ItemIdQuantityPair> inventory) {
        this.inventory = inventory;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractShipState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setId(((ShipEvent.SqlShipEvent) events.get(0)).getShipEventId().getId());
            for (Event e : events) {
                mutate(e);
                this.setOffChainVersion((this.getOffChainVersion() == null ? ShipState.VERSION_NULL : this.getOffChainVersion()) + 1);
            }
        }
    }


    public AbstractShipState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof ShipState) {
            return Objects.equals(this.getId(), ((ShipState)obj).getId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(ShipState s) {
        if (s == this) {
            return;
        }
        this.setOwner(s.getOwner());
        this.setHealthPoints(s.getHealthPoints());
        this.setAttack(s.getAttack());
        this.setProtection(s.getProtection());
        this.setSpeed(s.getSpeed());
        this.setBuildingExpenses(s.getBuildingExpenses());
        this.setInventory(s.getInventory());
        this.setVersion(s.getVersion());
        this.setActive(s.getActive());
    }

    public void when(AbstractShipEvent.ShipCreated e) {
        throwOnWrongEvent(e);

        String owner = e.getOwner();
        String Owner = owner;
        Long healthPoints = e.getHealthPoints();
        Long HealthPoints = healthPoints;
        Long attack = e.getAttack();
        Long Attack = attack;
        Long protection = e.getProtection();
        Long Protection = protection;
        Long speed = e.getSpeed();
        Long Speed = speed;
        ItemIdQuantityPairs buildingExpenses = e.getBuildingExpenses();
        ItemIdQuantityPairs BuildingExpenses = buildingExpenses;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        ShipState updatedShipState = (ShipState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.ship.CreateLogic",
                    "mutate",
                    new Class[]{ShipState.class, String.class, Long.class, Long.class, Long.class, Long.class, ItemIdQuantityPairs.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, owner, healthPoints, attack, protection, speed, buildingExpenses, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.ship;
//
//public class CreateLogic {
//    public static ShipState mutate(ShipState shipState, String owner, Long healthPoints, Long attack, Long protection, Long speed, ItemIdQuantityPairs buildingExpenses, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<ShipState, ShipState.MutableShipState> mutationContext) {
//    }
//}

        if (this != updatedShipState) { merge(updatedShipState); } //else do nothing

    }

    public void save() {
    }

    protected void throwOnWrongEvent(ShipEvent event) {
        String stateEntityId = this.getId(); // Aggregate Id
        String eventEntityId = ((ShipEvent.SqlShipEvent)event).getShipEventId().getId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getOffChainVersion();

    }


    public static class SimpleShipState extends AbstractShipState {

        public SimpleShipState() {
        }

        public SimpleShipState(List<Event> events) {
            super(events);
        }

        public static SimpleShipState newForReapplying() {
            SimpleShipState s = new SimpleShipState();
            s.initializeForReapplying();
            return s;
        }

    }



}

