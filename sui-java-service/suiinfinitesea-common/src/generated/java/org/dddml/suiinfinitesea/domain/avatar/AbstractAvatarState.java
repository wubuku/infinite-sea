// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain.avatar;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.suiinfinitesea.domain.*;
import org.dddml.suiinfinitesea.specialization.*;
import org.dddml.suiinfinitesea.domain.avatar.AvatarEvent.*;

public abstract class AbstractAvatarState implements AvatarState.SqlAvatarState {

    private String id;

    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    private String owner;

    public String getOwner() {
        return this.owner;
    }

    public void setOwner(String owner) {
        this.owner = owner;
    }

    private String name;

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    private String imageUrl;

    public String getImageUrl() {
        return this.imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    private String description;

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    private Long backgroundColor;

    public Long getBackgroundColor() {
        return this.backgroundColor;
    }

    public void setBackgroundColor(Long backgroundColor) {
        this.backgroundColor = backgroundColor;
    }

    private Integer race;

    public Integer getRace() {
        return this.race;
    }

    public void setRace(Integer race) {
        this.race = race;
    }

    private Integer eyes;

    public Integer getEyes() {
        return this.eyes;
    }

    public void setEyes(Integer eyes) {
        this.eyes = eyes;
    }

    private Integer mouth;

    public Integer getMouth() {
        return this.mouth;
    }

    public void setMouth(Integer mouth) {
        this.mouth = mouth;
    }

    private Integer haircut;

    public Integer getHaircut() {
        return this.haircut;
    }

    public void setHaircut(Integer haircut) {
        this.haircut = haircut;
    }

    private Long hairColor;

    public Long getHairColor() {
        return this.hairColor;
    }

    public void setHairColor(Long hairColor) {
        this.hairColor = hairColor;
    }

    private Integer skin;

    public Integer getSkin() {
        return this.skin;
    }

    public void setSkin(Integer skin) {
        this.skin = skin;
    }

    private Integer outfit;

    public Integer getOutfit() {
        return this.outfit;
    }

    public void setOutfit(Integer outfit) {
        this.outfit = outfit;
    }

    private int[] accessories;

    public int[] getAccessories() {
        return this.accessories;
    }

    public void setAccessories(int[] accessories) {
        this.accessories = accessories;
    }

    private Integer aura;

    public Integer getAura() {
        return this.aura;
    }

    public void setAura(Integer aura) {
        this.aura = aura;
    }

    private int[] symbols;

    public int[] getSymbols() {
        return this.symbols;
    }

    public void setSymbols(int[] symbols) {
        this.symbols = symbols;
    }

    private int[] effects;

    public int[] getEffects() {
        return this.effects;
    }

    public void setEffects(int[] effects) {
        this.effects = effects;
    }

    private int[] backgrounds;

    public int[] getBackgrounds() {
        return this.backgrounds;
    }

    public void setBackgrounds(int[] backgrounds) {
        this.backgrounds = backgrounds;
    }

    private int[] decorations;

    public int[] getDecorations() {
        return this.decorations;
    }

    public void setDecorations(int[] decorations) {
        this.decorations = decorations;
    }

    private int[] badges;

    public int[] getBadges() {
        return this.badges;
    }

    public void setBadges(int[] badges) {
        this.badges = badges;
    }

    private BigInteger version;

    public BigInteger getVersion() {
        return this.version;
    }

    public void setVersion(BigInteger version) {
        this.version = version;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractAvatarState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setId(((AvatarEvent.SqlAvatarEvent) events.get(0)).getAvatarEventId().getId());
            for (Event e : events) {
                mutate(e);
                this.setOffChainVersion((this.getOffChainVersion() == null ? AvatarState.VERSION_NULL : this.getOffChainVersion()) + 1);
            }
        }
    }


    public AbstractAvatarState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof AvatarState) {
            return Objects.equals(this.getId(), ((AvatarState)obj).getId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else if (e instanceof AbstractAvatarEvent.AvatarMinted) {
            when((AbstractAvatarEvent.AvatarMinted)e);
        } else if (e instanceof AbstractAvatarEvent.AvatarUpdated) {
            when((AbstractAvatarEvent.AvatarUpdated)e);
        } else if (e instanceof AbstractAvatarEvent.AvatarBurned) {
            when((AbstractAvatarEvent.AvatarBurned)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(AvatarState s) {
        if (s == this) {
            return;
        }
        this.setOwner(s.getOwner());
        this.setName(s.getName());
        this.setImageUrl(s.getImageUrl());
        this.setDescription(s.getDescription());
        this.setBackgroundColor(s.getBackgroundColor());
        this.setRace(s.getRace());
        this.setEyes(s.getEyes());
        this.setMouth(s.getMouth());
        this.setHaircut(s.getHaircut());
        this.setHairColor(s.getHairColor());
        this.setSkin(s.getSkin());
        this.setOutfit(s.getOutfit());
        this.setAccessories(s.getAccessories());
        this.setAura(s.getAura());
        this.setSymbols(s.getSymbols());
        this.setEffects(s.getEffects());
        this.setBackgrounds(s.getBackgrounds());
        this.setDecorations(s.getDecorations());
        this.setBadges(s.getBadges());
        this.setVersion(s.getVersion());
        this.setActive(s.getActive());
    }

    public void when(AbstractAvatarEvent.AvatarMinted e) {
        throwOnWrongEvent(e);

        String owner = e.getOwner();
        String Owner = owner;
        String name = e.getName();
        String Name = name;
        String imageUrl = e.getImageUrl();
        String ImageUrl = imageUrl;
        String description = e.getDescription();
        String Description = description;
        Long backgroundColor = e.getBackgroundColor();
        Long BackgroundColor = backgroundColor;
        Integer race = e.getRace();
        Integer Race = race;
        Integer eyes = e.getEyes();
        Integer Eyes = eyes;
        Integer mouth = e.getMouth();
        Integer Mouth = mouth;
        Integer haircut = e.getHaircut();
        Integer Haircut = haircut;
        Long hairColor = e.getHairColor();
        Long HairColor = hairColor;
        Integer skin = e.getSkin();
        Integer Skin = skin;
        Integer outfit = e.getOutfit();
        Integer Outfit = outfit;
        int[] accessories = e.getAccessories();
        int[] Accessories = accessories;
        Integer aura = e.getAura();
        Integer Aura = aura;
        int[] symbols = e.getSymbols();
        int[] Symbols = symbols;
        int[] effects = e.getEffects();
        int[] Effects = effects;
        int[] backgrounds = e.getBackgrounds();
        int[] Backgrounds = backgrounds;
        int[] decorations = e.getDecorations();
        int[] Decorations = decorations;
        int[] badges = e.getBadges();
        int[] Badges = badges;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        AvatarState updatedAvatarState = (AvatarState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.avatar.MintLogic",
                    "mutate",
                    new Class[]{AvatarState.class, String.class, String.class, String.class, String.class, Long.class, Integer.class, Integer.class, Integer.class, Integer.class, Long.class, Integer.class, Integer.class, int[].class, Integer.class, int[].class, int[].class, int[].class, int[].class, int[].class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, owner, name, imageUrl, description, backgroundColor, race, eyes, mouth, haircut, hairColor, skin, outfit, accessories, aura, symbols, effects, backgrounds, decorations, badges, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.avatar;
//
//public class MintLogic {
//    public static AvatarState mutate(AvatarState avatarState, String owner, String name, String imageUrl, String description, Long backgroundColor, Integer race, Integer eyes, Integer mouth, Integer haircut, Long hairColor, Integer skin, Integer outfit, int[] accessories, Integer aura, int[] symbols, int[] effects, int[] backgrounds, int[] decorations, int[] badges, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<AvatarState, AvatarState.MutableAvatarState> mutationContext) {
//    }
//}

        if (this != updatedAvatarState) { merge(updatedAvatarState); } //else do nothing

    }

    public void when(AbstractAvatarEvent.AvatarUpdated e) {
        throwOnWrongEvent(e);

        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        AvatarState updatedAvatarState = (AvatarState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.avatar.UpdateLogic",
                    "mutate",
                    new Class[]{AvatarState.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.avatar;
//
//public class UpdateLogic {
//    public static AvatarState mutate(AvatarState avatarState, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<AvatarState, AvatarState.MutableAvatarState> mutationContext) {
//    }
//}

        if (this != updatedAvatarState) { merge(updatedAvatarState); } //else do nothing

    }

    public void when(AbstractAvatarEvent.AvatarBurned e) {
        throwOnWrongEvent(e);

        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        AvatarState updatedAvatarState = (AvatarState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.avatar.BurnLogic",
                    "mutate",
                    new Class[]{AvatarState.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.suiinfinitesea.domain.avatar;
//
//public class BurnLogic {
//    public static AvatarState mutate(AvatarState avatarState, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String eventStatus, MutationContext<AvatarState, AvatarState.MutableAvatarState> mutationContext) {
//    }
//}

        if (this != updatedAvatarState) { merge(updatedAvatarState); } //else do nothing

    }

    public void save() {
    }

    protected void throwOnWrongEvent(AvatarEvent event) {
        String stateEntityId = this.getId(); // Aggregate Id
        String eventEntityId = ((AvatarEvent.SqlAvatarEvent)event).getAvatarEventId().getId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getOffChainVersion();

    }


    public static class SimpleAvatarState extends AbstractAvatarState {

        public SimpleAvatarState() {
        }

        public SimpleAvatarState(List<Event> events) {
            super(events);
        }

        public static SimpleAvatarState newForReapplying() {
            SimpleAvatarState s = new SimpleAvatarState();
            s.initializeForReapplying();
            return s;
        }

    }



}

