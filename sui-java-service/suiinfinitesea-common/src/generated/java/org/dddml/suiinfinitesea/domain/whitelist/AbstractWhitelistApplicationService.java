// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain.whitelist;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import java.util.Date;
import java.math.BigInteger;
import org.dddml.suiinfinitesea.domain.*;
import org.dddml.suiinfinitesea.specialization.*;

public abstract class AbstractWhitelistApplicationService implements WhitelistApplicationService {

    private EventStore eventStore;

    protected EventStore getEventStore()
    {
        return eventStore;
    }

    private WhitelistStateRepository stateRepository;

    protected WhitelistStateRepository getStateRepository() {
        return stateRepository;
    }

    private WhitelistStateQueryRepository stateQueryRepository;

    protected WhitelistStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    private AggregateEventListener<WhitelistAggregate, WhitelistState> aggregateEventListener;

    public AggregateEventListener<WhitelistAggregate, WhitelistState> getAggregateEventListener() {
        return aggregateEventListener;
    }

    public void setAggregateEventListener(AggregateEventListener<WhitelistAggregate, WhitelistState> eventListener) {
        this.aggregateEventListener = eventListener;
    }

    public AbstractWhitelistApplicationService(EventStore eventStore, WhitelistStateRepository stateRepository, WhitelistStateQueryRepository stateQueryRepository) {
        this.eventStore = eventStore;
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
    }

    public void when(WhitelistCommands.Update c) {
        update(c, ar -> ar.update(c.getPaused(), c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public void when(WhitelistCommands.AddWhitelistEntry c) {
        update(c, ar -> ar.addWhitelistEntry(c.getAccountAddress(), c.getName(), c.getImageUrl(), c.getDescription(), c.getBackgroundColor(), c.getRace(), c.getEyes(), c.getMouth(), c.getHaircut(), c.getSkin(), c.getOutfit(), c.getAccessories(), c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public void when(WhitelistCommands.UpdateWhitelistEntry c) {
        update(c, ar -> ar.updateWhitelistEntry(c.getAccountAddress(), c.getName(), c.getImageUrl(), c.getDescription(), c.getBackgroundColor(), c.getRace(), c.getEyes(), c.getMouth(), c.getHaircut(), c.getSkin(), c.getOutfit(), c.getAccessories(), c.getClaimed(), c.getPaused(), c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public void when(WhitelistCommands.Create c) {
        update(c, ar -> ar.create(c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public WhitelistState get(String id) {
        WhitelistState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<WhitelistState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<WhitelistState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<WhitelistState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<WhitelistState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public WhitelistEvent getEvent(String id, long version) {
        WhitelistEvent e = (WhitelistEvent)getEventStore().getEvent(toEventStoreAggregateId(id), version);
        if (e != null) {
            ((WhitelistEvent.SqlWhitelistEvent)e).setEventReadOnly(true); 
        } else if (version == -1) {
            return getEvent(id, 0);
        }
        return e;
    }

    public WhitelistState getHistoryState(String id, long version) {
        EventStream eventStream = getEventStore().loadEventStream(AbstractWhitelistEvent.class, toEventStoreAggregateId(id), version - 1);
        return new AbstractWhitelistState.SimpleWhitelistState(eventStream.getEvents());
    }

    public WhitelistEntryState getWhitelistEntry(String whitelistId, String accountAddress) {
        return getStateQueryRepository().getWhitelistEntry(whitelistId, accountAddress);
    }

    public Iterable<WhitelistEntryState> getWhitelistEntries(String whitelistId, Criterion filter, List<String> orders) {
        return getStateQueryRepository().getWhitelistEntries(whitelistId, filter, orders);
    }


    public WhitelistAggregate getWhitelistAggregate(WhitelistState state) {
        return new AbstractWhitelistAggregate.SimpleWhitelistAggregate(state);
    }

    public EventStoreAggregateId toEventStoreAggregateId(String aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(WhitelistCommand c, Consumer<WhitelistAggregate> action) {
        String aggregateId = c.getId();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        WhitelistState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        WhitelistAggregate aggregate = getWhitelistAggregate(state);
        aggregate.throwOnInvalidStateTransition(c);
        action.accept(aggregate);
        persist(eventStoreAggregateId, c.getOffChainVersion() == null ? WhitelistState.VERSION_NULL : c.getOffChainVersion(), aggregate, state); // State version may be null!

    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, WhitelistAggregate aggregate, WhitelistState state) {
        getEventStore().appendEvents(eventStoreAggregateId, version, 
            aggregate.getChanges(), (events) -> { 
                getStateRepository().save(state); 
            });
        if (aggregateEventListener != null) {
            aggregateEventListener.eventAppended(new AggregateEvent<>(aggregate, state, aggregate.getChanges()));
        }
    }

    protected boolean isDuplicateCommand(WhitelistCommand command, EventStoreAggregateId eventStoreAggregateId, WhitelistState state) {
        boolean duplicate = false;
        if (command.getOffChainVersion() == null) { command.setOffChainVersion(WhitelistState.VERSION_NULL); }
        if (state.getOffChainVersion() != null && state.getOffChainVersion() > command.getOffChainVersion()) {
            Event lastEvent = getEventStore().getEvent(AbstractWhitelistEvent.class, eventStoreAggregateId, command.getOffChainVersion());
            if (lastEvent != null && lastEvent instanceof AbstractEvent
               && command.getCommandId() != null && command.getCommandId().equals(((AbstractEvent) lastEvent).getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    public static class SimpleWhitelistApplicationService extends AbstractWhitelistApplicationService {
        public SimpleWhitelistApplicationService(EventStore eventStore, WhitelistStateRepository stateRepository, WhitelistStateQueryRepository stateQueryRepository)
        {
            super(eventStore, stateRepository, stateQueryRepository);
        }
    }

}

