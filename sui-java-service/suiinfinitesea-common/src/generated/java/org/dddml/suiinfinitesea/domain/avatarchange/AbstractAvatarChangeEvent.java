// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain.avatarchange;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.suiinfinitesea.domain.*;
import org.dddml.suiinfinitesea.specialization.*;
import org.dddml.suiinfinitesea.domain.AbstractEvent;

public abstract class AbstractAvatarChangeEvent extends AbstractEvent implements AvatarChangeEvent.SqlAvatarChangeEvent, SuiEventEnvelope.MutableSuiEventEnvelope, SuiMoveEvent.MutableSuiMoveEvent, HasEventStatus.MutableHasEventStatus {
    private AvatarChangeEventId avatarChangeEventId = new AvatarChangeEventId();

    public AvatarChangeEventId getAvatarChangeEventId() {
        return this.avatarChangeEventId;
    }

    public void setAvatarChangeEventId(AvatarChangeEventId eventId) {
        this.avatarChangeEventId = eventId;
    }
    
    public String getAvatarId() {
        return getAvatarChangeEventId().getAvatarId();
    }

    public void setAvatarId(String avatarId) {
        getAvatarChangeEventId().setAvatarId(avatarId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public BigInteger getVersion() {
        return getAvatarChangeEventId().getVersion();
    }
    
    public void setVersion(BigInteger version) {
        getAvatarChangeEventId().setVersion(version);
    }

    private String id_;

    public String getId_() {
        return this.id_;
    }
    
    public void setId_(String id) {
        this.id_ = id;
    }

    private Long suiTimestamp;

    public Long getSuiTimestamp() {
        return this.suiTimestamp;
    }
    
    public void setSuiTimestamp(Long suiTimestamp) {
        this.suiTimestamp = suiTimestamp;
    }

    private String suiTxDigest;

    public String getSuiTxDigest() {
        return this.suiTxDigest;
    }
    
    public void setSuiTxDigest(String suiTxDigest) {
        this.suiTxDigest = suiTxDigest;
    }

    private BigInteger suiEventSeq;

    public BigInteger getSuiEventSeq() {
        return this.suiEventSeq;
    }
    
    public void setSuiEventSeq(BigInteger suiEventSeq) {
        this.suiEventSeq = suiEventSeq;
    }

    private String suiPackageId;

    public String getSuiPackageId() {
        return this.suiPackageId;
    }
    
    public void setSuiPackageId(String suiPackageId) {
        this.suiPackageId = suiPackageId;
    }

    private String suiTransactionModule;

    public String getSuiTransactionModule() {
        return this.suiTransactionModule;
    }
    
    public void setSuiTransactionModule(String suiTransactionModule) {
        this.suiTransactionModule = suiTransactionModule;
    }

    private String suiSender;

    public String getSuiSender() {
        return this.suiSender;
    }
    
    public void setSuiSender(String suiSender) {
        this.suiSender = suiSender;
    }

    private String suiType;

    public String getSuiType() {
        return this.suiType;
    }
    
    public void setSuiType(String suiType) {
        this.suiType = suiType;
    }

    private String eventStatus;

    public String getEventStatus() {
        return this.eventStatus;
    }
    
    public void setEventStatus(String eventStatus) {
        this.eventStatus = eventStatus;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractAvatarChangeEvent() {
    }

    protected AbstractAvatarChangeEvent(AvatarChangeEventId eventId) {
        this.avatarChangeEventId = eventId;
    }


    public abstract String getEventType();

    public static class AvatarChangeClobEvent extends AbstractAvatarChangeEvent {

        protected Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        protected void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        protected String getDynamicPropertiesLob() {
            return ApplicationContext.current.getClobConverter().toString(getDynamicProperties());
        }

        protected void setDynamicPropertiesLob(String text) {
            getDynamicProperties().clear();
            Map<String, Object> ps = ApplicationContext.current.getClobConverter().parseLobProperties(text);
            if (ps != null) {
                for (Map.Entry<String, Object> kv : ps.entrySet()) {
                    getDynamicProperties().put(kv.getKey(), kv.getValue());
                }
            }
        }

        @Override
        public String getEventType() {
            return "AvatarChangeClobEvent";
        }

    }

    public static class AvatarChangeCreated extends AvatarChangeClobEvent implements AvatarChangeEvent.AvatarChangeCreated {

        @Override
        public String getEventType() {
            return "AvatarChangeCreated";
        }

        public String getImageUrl() {
            Object val = getDynamicProperties().get("imageUrl");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setImageUrl(String value) {
            getDynamicProperties().put("imageUrl", value);
        }

        public Long getBackgroundColor() {
            Object val = getDynamicProperties().get("backgroundColor");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setBackgroundColor(Long value) {
            getDynamicProperties().put("backgroundColor", value);
        }

        public Integer getHaircut() {
            Object val = getDynamicProperties().get("haircut");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setHaircut(Integer value) {
            getDynamicProperties().put("haircut", value);
        }

        public Integer getOutfit() {
            Object val = getDynamicProperties().get("outfit");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setOutfit(Integer value) {
            getDynamicProperties().put("outfit", value);
        }

        public Integer getAccessories() {
            Object val = getDynamicProperties().get("accessories");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setAccessories(Integer value) {
            getDynamicProperties().put("accessories", value);
        }

        public int[] getAura() {
            Object val = getDynamicProperties().get("aura");
            if (val instanceof int[]) {
                return (int[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, int[].class);
        }

        public void setAura(int[] value) {
            getDynamicProperties().put("aura", value);
        }

        public int[] getSymbols() {
            Object val = getDynamicProperties().get("symbols");
            if (val instanceof int[]) {
                return (int[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, int[].class);
        }

        public void setSymbols(int[] value) {
            getDynamicProperties().put("symbols", value);
        }

        public int[] getEffects() {
            Object val = getDynamicProperties().get("effects");
            if (val instanceof int[]) {
                return (int[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, int[].class);
        }

        public void setEffects(int[] value) {
            getDynamicProperties().put("effects", value);
        }

        public int[] getBackgrounds() {
            Object val = getDynamicProperties().get("backgrounds");
            if (val instanceof int[]) {
                return (int[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, int[].class);
        }

        public void setBackgrounds(int[] value) {
            getDynamicProperties().put("backgrounds", value);
        }

        public int[] getDecorations() {
            Object val = getDynamicProperties().get("decorations");
            if (val instanceof int[]) {
                return (int[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, int[].class);
        }

        public void setDecorations(int[] value) {
            getDynamicProperties().put("decorations", value);
        }

        public int[] getBadges() {
            Object val = getDynamicProperties().get("badges");
            if (val instanceof int[]) {
                return (int[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, int[].class);
        }

        public void setBadges(int[] value) {
            getDynamicProperties().put("badges", value);
        }

    }

    public static class AvatarChangeUpdated extends AvatarChangeClobEvent implements AvatarChangeEvent.AvatarChangeUpdated {

        @Override
        public String getEventType() {
            return "AvatarChangeUpdated";
        }

        public String getImageUrl() {
            Object val = getDynamicProperties().get("imageUrl");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setImageUrl(String value) {
            getDynamicProperties().put("imageUrl", value);
        }

        public Long getBackgroundColor() {
            Object val = getDynamicProperties().get("backgroundColor");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setBackgroundColor(Long value) {
            getDynamicProperties().put("backgroundColor", value);
        }

        public Integer getHaircut() {
            Object val = getDynamicProperties().get("haircut");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setHaircut(Integer value) {
            getDynamicProperties().put("haircut", value);
        }

        public Integer getOutfit() {
            Object val = getDynamicProperties().get("outfit");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setOutfit(Integer value) {
            getDynamicProperties().put("outfit", value);
        }

        public Integer getAccessories() {
            Object val = getDynamicProperties().get("accessories");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setAccessories(Integer value) {
            getDynamicProperties().put("accessories", value);
        }

        public int[] getAura() {
            Object val = getDynamicProperties().get("aura");
            if (val instanceof int[]) {
                return (int[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, int[].class);
        }

        public void setAura(int[] value) {
            getDynamicProperties().put("aura", value);
        }

        public int[] getSymbols() {
            Object val = getDynamicProperties().get("symbols");
            if (val instanceof int[]) {
                return (int[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, int[].class);
        }

        public void setSymbols(int[] value) {
            getDynamicProperties().put("symbols", value);
        }

        public int[] getEffects() {
            Object val = getDynamicProperties().get("effects");
            if (val instanceof int[]) {
                return (int[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, int[].class);
        }

        public void setEffects(int[] value) {
            getDynamicProperties().put("effects", value);
        }

        public int[] getBackgrounds() {
            Object val = getDynamicProperties().get("backgrounds");
            if (val instanceof int[]) {
                return (int[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, int[].class);
        }

        public void setBackgrounds(int[] value) {
            getDynamicProperties().put("backgrounds", value);
        }

        public int[] getDecorations() {
            Object val = getDynamicProperties().get("decorations");
            if (val instanceof int[]) {
                return (int[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, int[].class);
        }

        public void setDecorations(int[] value) {
            getDynamicProperties().put("decorations", value);
        }

        public int[] getBadges() {
            Object val = getDynamicProperties().get("badges");
            if (val instanceof int[]) {
                return (int[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, int[].class);
        }

        public void setBadges(int[] value) {
            getDynamicProperties().put("badges", value);
        }

    }

    public static class AvatarChangeDeleted extends AvatarChangeClobEvent implements AvatarChangeEvent.AvatarChangeDeleted {

        @Override
        public String getEventType() {
            return "AvatarChangeDeleted";
        }

    }


}

