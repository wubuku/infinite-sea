// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.suiinfinitesea.domain.map;

import java.util.*;
import java.util.Date;
import java.math.BigInteger;
import org.dddml.suiinfinitesea.domain.*;
import org.dddml.suiinfinitesea.specialization.*;

public abstract class AbstractMapAggregate extends AbstractAggregate implements MapAggregate {
    private MapState.MutableMapState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractMapAggregate(MapState state) {
        this.state = (MapState.MutableMapState)state;
    }

    public MapState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        MapCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleMapAggregate extends AbstractMapAggregate {
        public SimpleMapAggregate(MapState state) {
            super(state);
        }

        @Override
        public void addIsland(Coordinates coordinates, ItemIdQuantityPairs resources, Long offChainVersion, String commandId, String requesterId, MapCommands.AddIsland c) {
            java.util.function.Supplier<MapEvent.IslandAdded> eventFactory = () -> newIslandAdded(coordinates, resources, offChainVersion, commandId, requesterId);
            MapEvent.IslandAdded e;
            try {
                e = verifyAddIsland(eventFactory, coordinates, resources, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void claimIsland(Coordinates coordinates, String claimedBy, BigInteger claimedAt, Long offChainVersion, String commandId, String requesterId, MapCommands.ClaimIsland c) {
            java.util.function.Supplier<MapEvent.MapIslandClaimed> eventFactory = () -> newMapIslandClaimed(coordinates, claimedBy, claimedAt, offChainVersion, commandId, requesterId);
            MapEvent.MapIslandClaimed e;
            try {
                e = verifyClaimIsland(eventFactory, coordinates, claimedBy, claimedAt, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void updateSettings(Integer claimIslandSetting, Long offChainVersion, String commandId, String requesterId, MapCommands.UpdateSettings c) {
            java.util.function.Supplier<MapEvent.MapSettingsUpdated> eventFactory = () -> newMapSettingsUpdated(claimIslandSetting, offChainVersion, commandId, requesterId);
            MapEvent.MapSettingsUpdated e;
            try {
                e = verifyUpdateSettings(eventFactory, claimIslandSetting, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void addToWhitelist(String accountAddress, Long offChainVersion, String commandId, String requesterId, MapCommands.AddToWhitelist c) {
            java.util.function.Supplier<MapEvent.WhitelistedForClaimingIsland> eventFactory = () -> newWhitelistedForClaimingIsland(accountAddress, offChainVersion, commandId, requesterId);
            MapEvent.WhitelistedForClaimingIsland e;
            try {
                e = verifyAddToWhitelist(eventFactory, accountAddress, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void removeFromWhitelist(String accountAddress, Long offChainVersion, String commandId, String requesterId, MapCommands.RemoveFromWhitelist c) {
            java.util.function.Supplier<MapEvent.UnWhitelistedForClaimingIsland> eventFactory = () -> newUnWhitelistedForClaimingIsland(accountAddress, offChainVersion, commandId, requesterId);
            MapEvent.UnWhitelistedForClaimingIsland e;
            try {
                e = verifyRemoveFromWhitelist(eventFactory, accountAddress, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected MapEvent.InitMapEvent verify__Init__(java.util.function.Supplier<MapEvent.InitMapEvent> eventFactory, MapCommands.__Init__ c) {

            MapEvent.InitMapEvent e = (MapEvent.InitMapEvent) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.map.__Init__Logic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, MapState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.map;
//
//public class __Init__Logic {
//    public static MapEvent.InitMapEvent verify(java.util.function.Supplier<MapEvent.InitMapEvent> eventFactory, MapState mapState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected MapEvent.IslandAdded verifyAddIsland(java.util.function.Supplier<MapEvent.IslandAdded> eventFactory, Coordinates coordinates, ItemIdQuantityPairs resources, MapCommands.AddIsland c) {
            Coordinates Coordinates = coordinates;
            ItemIdQuantityPairs Resources = resources;

            MapEvent.IslandAdded e = (MapEvent.IslandAdded) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.map.AddIslandLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, MapState.class, Coordinates.class, ItemIdQuantityPairs.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), coordinates, resources, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.map;
//
//public class AddIslandLogic {
//    public static MapEvent.IslandAdded verify(java.util.function.Supplier<MapEvent.IslandAdded> eventFactory, MapState mapState, Coordinates coordinates, ItemIdQuantityPairs resources, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected MapEvent.MapIslandClaimed verifyClaimIsland(java.util.function.Supplier<MapEvent.MapIslandClaimed> eventFactory, Coordinates coordinates, String claimedBy, BigInteger claimedAt, MapCommands.ClaimIsland c) {
            Coordinates Coordinates = coordinates;
            String ClaimedBy = claimedBy;
            BigInteger ClaimedAt = claimedAt;

            MapEvent.MapIslandClaimed e = (MapEvent.MapIslandClaimed) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.map.ClaimIslandLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, MapState.class, Coordinates.class, String.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), coordinates, claimedBy, claimedAt, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.map;
//
//public class ClaimIslandLogic {
//    public static MapEvent.MapIslandClaimed verify(java.util.function.Supplier<MapEvent.MapIslandClaimed> eventFactory, MapState mapState, Coordinates coordinates, String claimedBy, BigInteger claimedAt, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected MapEvent.IslandResourcesGathered verifyGatherIslandResources(java.util.function.Supplier<MapEvent.IslandResourcesGathered> eventFactory, String playerId, Coordinates coordinates, MapCommands.GatherIslandResources c) {
            String PlayerId = playerId;
            Coordinates Coordinates = coordinates;

            MapEvent.IslandResourcesGathered e = (MapEvent.IslandResourcesGathered) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.map.GatherIslandResourcesLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, MapState.class, String.class, Coordinates.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), playerId, coordinates, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.map;
//
//public class GatherIslandResourcesLogic {
//    public static MapEvent.IslandResourcesGathered verify(java.util.function.Supplier<MapEvent.IslandResourcesGathered> eventFactory, MapState mapState, String playerId, Coordinates coordinates, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected MapEvent.MapSettingsUpdated verifyUpdateSettings(java.util.function.Supplier<MapEvent.MapSettingsUpdated> eventFactory, Integer claimIslandSetting, MapCommands.UpdateSettings c) {
            Integer ClaimIslandSetting = claimIslandSetting;

            MapEvent.MapSettingsUpdated e = (MapEvent.MapSettingsUpdated) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.map.UpdateSettingsLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, MapState.class, Integer.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), claimIslandSetting, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.map;
//
//public class UpdateSettingsLogic {
//    public static MapEvent.MapSettingsUpdated verify(java.util.function.Supplier<MapEvent.MapSettingsUpdated> eventFactory, MapState mapState, Integer claimIslandSetting, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected MapEvent.WhitelistedForClaimingIsland verifyAddToWhitelist(java.util.function.Supplier<MapEvent.WhitelistedForClaimingIsland> eventFactory, String accountAddress, MapCommands.AddToWhitelist c) {
            String AccountAddress = accountAddress;

            MapEvent.WhitelistedForClaimingIsland e = (MapEvent.WhitelistedForClaimingIsland) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.map.AddToWhitelistLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, MapState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), accountAddress, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.map;
//
//public class AddToWhitelistLogic {
//    public static MapEvent.WhitelistedForClaimingIsland verify(java.util.function.Supplier<MapEvent.WhitelistedForClaimingIsland> eventFactory, MapState mapState, String accountAddress, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected MapEvent.UnWhitelistedForClaimingIsland verifyRemoveFromWhitelist(java.util.function.Supplier<MapEvent.UnWhitelistedForClaimingIsland> eventFactory, String accountAddress, MapCommands.RemoveFromWhitelist c) {
            String AccountAddress = accountAddress;

            MapEvent.UnWhitelistedForClaimingIsland e = (MapEvent.UnWhitelistedForClaimingIsland) ReflectUtils.invokeStaticMethod(
                    "org.dddml.suiinfinitesea.domain.map.RemoveFromWhitelistLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, MapState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), accountAddress, VerificationContext.forCommand(c)}
            );

//package org.dddml.suiinfinitesea.domain.map;
//
//public class RemoveFromWhitelistLogic {
//    public static MapEvent.UnWhitelistedForClaimingIsland verify(java.util.function.Supplier<MapEvent.UnWhitelistedForClaimingIsland> eventFactory, MapState mapState, String accountAddress, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractMapEvent.InitMapEvent newInitMapEvent(Long offChainVersion, String commandId, String requesterId) {
            MapEventId eventId = new MapEventId(getState().getId(), null);
            AbstractMapEvent.InitMapEvent e = new AbstractMapEvent.InitMapEvent();

            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setMapEventId(eventId);
            return e;
        }

        protected AbstractMapEvent.IslandAdded newIslandAdded(Coordinates coordinates, ItemIdQuantityPairs resources, Long offChainVersion, String commandId, String requesterId) {
            MapEventId eventId = new MapEventId(getState().getId(), null);
            AbstractMapEvent.IslandAdded e = new AbstractMapEvent.IslandAdded();

            e.getDynamicProperties().put("coordinates", coordinates);
            e.getDynamicProperties().put("resources", resources);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setMapEventId(eventId);
            return e;
        }

        protected AbstractMapEvent.MapIslandClaimed newMapIslandClaimed(Coordinates coordinates, String claimedBy, BigInteger claimedAt, Long offChainVersion, String commandId, String requesterId) {
            MapEventId eventId = new MapEventId(getState().getId(), null);
            AbstractMapEvent.MapIslandClaimed e = new AbstractMapEvent.MapIslandClaimed();

            e.getDynamicProperties().put("coordinates", coordinates);
            e.getDynamicProperties().put("claimedBy", claimedBy);
            e.getDynamicProperties().put("claimedAt", claimedAt);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setMapEventId(eventId);
            return e;
        }

        protected AbstractMapEvent.IslandResourcesGathered newIslandResourcesGathered(String playerId, Coordinates coordinates, String clock, Long offChainVersion, String commandId, String requesterId) {
            MapEventId eventId = new MapEventId(getState().getId(), null);
            AbstractMapEvent.IslandResourcesGathered e = new AbstractMapEvent.IslandResourcesGathered();

            e.getDynamicProperties().put("playerId", playerId);
            e.getDynamicProperties().put("coordinates", coordinates);
            e.setResources(null);
            e.setGatheredAt(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setMapEventId(eventId);
            return e;
        }

        protected AbstractMapEvent.MapSettingsUpdated newMapSettingsUpdated(Integer claimIslandSetting, Long offChainVersion, String commandId, String requesterId) {
            MapEventId eventId = new MapEventId(getState().getId(), null);
            AbstractMapEvent.MapSettingsUpdated e = new AbstractMapEvent.MapSettingsUpdated();

            e.getDynamicProperties().put("claimIslandSetting", claimIslandSetting);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setMapEventId(eventId);
            return e;
        }

        protected AbstractMapEvent.WhitelistedForClaimingIsland newWhitelistedForClaimingIsland(String accountAddress, Long offChainVersion, String commandId, String requesterId) {
            MapEventId eventId = new MapEventId(getState().getId(), null);
            AbstractMapEvent.WhitelistedForClaimingIsland e = new AbstractMapEvent.WhitelistedForClaimingIsland();

            e.getDynamicProperties().put("accountAddress", accountAddress);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setMapEventId(eventId);
            return e;
        }

        protected AbstractMapEvent.UnWhitelistedForClaimingIsland newUnWhitelistedForClaimingIsland(String accountAddress, Long offChainVersion, String commandId, String requesterId) {
            MapEventId eventId = new MapEventId(getState().getId(), null);
            AbstractMapEvent.UnWhitelistedForClaimingIsland e = new AbstractMapEvent.UnWhitelistedForClaimingIsland();

            e.getDynamicProperties().put("accountAddress", accountAddress);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setMapEventId(eventId);
            return e;
        }

    }

}

