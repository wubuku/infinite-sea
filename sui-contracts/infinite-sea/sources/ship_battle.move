// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_sea::ship_battle {
    use infinite_sea_common::coordinates::Coordinates;
    use infinite_sea_common::item_id_quantity_pair::ItemIdQuantityPair;
    use std::option::{Self, Option};
    use sui::event;
    use sui::object::{Self, ID, UID};
    use sui::transfer;
    use sui::tx_context::TxContext;
    friend infinite_sea::ship_battle_initiate_battle_logic;
    friend infinite_sea::ship_battle_make_move_logic;
    friend infinite_sea::ship_battle_take_loot_logic;
    friend infinite_sea::ship_battle_aggregate;

    #[allow(unused_const)]
    const EDataTooLong: u64 = 102;
    #[allow(unused_const)]
    const EInappropriateVersion: u64 = 103;
    const EEmptyObjectID: u64 = 107;

    struct ShipBattle has key {
        id: UID,
        version: u64,
        initiator: ID,
        responder: ID,
        status: u8,
        initiator_experiences: vector<u32>,
        responder_experiences: vector<u32>,
        ended_at: Option<u64>,
        winner: Option<u8>,
        round_number: u32,
        round_started_at: u64,
        round_mover: Option<u8>,
        round_attacker_ship: Option<ID>,
        round_defender_ship: Option<ID>,
    }

    public fun id(ship_battle: &ShipBattle): object::ID {
        object::uid_to_inner(&ship_battle.id)
    }

    public fun version(ship_battle: &ShipBattle): u64 {
        ship_battle.version
    }

    public fun initiator(ship_battle: &ShipBattle): ID {
        ship_battle.initiator
    }

    public(friend) fun set_initiator(ship_battle: &mut ShipBattle, initiator: ID) {
        ship_battle.initiator = initiator;
    }

    public fun responder(ship_battle: &ShipBattle): ID {
        ship_battle.responder
    }

    public(friend) fun set_responder(ship_battle: &mut ShipBattle, responder: ID) {
        ship_battle.responder = responder;
    }

    public fun status(ship_battle: &ShipBattle): u8 {
        ship_battle.status
    }

    public(friend) fun set_status(ship_battle: &mut ShipBattle, status: u8) {
        ship_battle.status = status;
    }

    public fun borrow_initiator_experiences(ship_battle: &ShipBattle): &vector<u32> {
        &ship_battle.initiator_experiences
    }

    public(friend) fun borrow_mut_initiator_experiences(ship_battle: &mut ShipBattle): &mut vector<u32> {
        &mut ship_battle.initiator_experiences
    }

    public fun initiator_experiences(ship_battle: &ShipBattle): vector<u32> {
        ship_battle.initiator_experiences
    }

    public(friend) fun set_initiator_experiences(ship_battle: &mut ShipBattle, initiator_experiences: vector<u32>) {
        ship_battle.initiator_experiences = initiator_experiences;
    }

    public fun borrow_responder_experiences(ship_battle: &ShipBattle): &vector<u32> {
        &ship_battle.responder_experiences
    }

    public(friend) fun borrow_mut_responder_experiences(ship_battle: &mut ShipBattle): &mut vector<u32> {
        &mut ship_battle.responder_experiences
    }

    public fun responder_experiences(ship_battle: &ShipBattle): vector<u32> {
        ship_battle.responder_experiences
    }

    public(friend) fun set_responder_experiences(ship_battle: &mut ShipBattle, responder_experiences: vector<u32>) {
        ship_battle.responder_experiences = responder_experiences;
    }

    public fun ended_at(ship_battle: &ShipBattle): Option<u64> {
        ship_battle.ended_at
    }

    public(friend) fun set_ended_at(ship_battle: &mut ShipBattle, ended_at: Option<u64>) {
        ship_battle.ended_at = ended_at;
    }

    public fun winner(ship_battle: &ShipBattle): Option<u8> {
        ship_battle.winner
    }

    public(friend) fun set_winner(ship_battle: &mut ShipBattle, winner: Option<u8>) {
        ship_battle.winner = winner;
    }

    public fun round_number(ship_battle: &ShipBattle): u32 {
        ship_battle.round_number
    }

    public(friend) fun set_round_number(ship_battle: &mut ShipBattle, round_number: u32) {
        ship_battle.round_number = round_number;
    }

    public fun round_started_at(ship_battle: &ShipBattle): u64 {
        ship_battle.round_started_at
    }

    public(friend) fun set_round_started_at(ship_battle: &mut ShipBattle, round_started_at: u64) {
        ship_battle.round_started_at = round_started_at;
    }

    public fun round_mover(ship_battle: &ShipBattle): Option<u8> {
        ship_battle.round_mover
    }

    public(friend) fun set_round_mover(ship_battle: &mut ShipBattle, round_mover: Option<u8>) {
        ship_battle.round_mover = round_mover;
    }

    public fun round_attacker_ship(ship_battle: &ShipBattle): Option<ID> {
        ship_battle.round_attacker_ship
    }

    public(friend) fun set_round_attacker_ship(ship_battle: &mut ShipBattle, round_attacker_ship: Option<ID>) {
        ship_battle.round_attacker_ship = round_attacker_ship;
    }

    public fun round_defender_ship(ship_battle: &ShipBattle): Option<ID> {
        ship_battle.round_defender_ship
    }

    public(friend) fun set_round_defender_ship(ship_battle: &mut ShipBattle, round_defender_ship: Option<ID>) {
        ship_battle.round_defender_ship = round_defender_ship;
    }

    public(friend) fun new_ship_battle(
        initiator: ID,
        responder: ID,
        status: u8,
        round_started_at: u64,
        round_mover: Option<u8>,
        round_attacker_ship: Option<ID>,
        round_defender_ship: Option<ID>,
        ctx: &mut TxContext,
    ): ShipBattle {
        ShipBattle {
            id: object::new(ctx),
            version: 0,
            initiator,
            responder,
            status,
            initiator_experiences: std::vector::empty(),
            responder_experiences: std::vector::empty(),
            ended_at: std::option::none(),
            winner: std::option::none(),
            round_number: 1,
            round_started_at,
            round_mover,
            round_attacker_ship,
            round_defender_ship,
        }
    }

    struct ShipBattleInitiated has copy, drop {
        id: option::Option<object::ID>,
        initiator_coordinates: Coordinates,
        responder_coordinates: Coordinates,
        initiator_id: ID,
        responder_id: ID,
        started_at: u64,
        first_round_mover: Option<u8>,
        first_round_attacker_ship: Option<ID>,
        first_round_defender_ship: Option<ID>,
    }

    public fun ship_battle_initiated_id(ship_battle_initiated: &ShipBattleInitiated): option::Option<object::ID> {
        ship_battle_initiated.id
    }

    public(friend) fun set_ship_battle_initiated_id(ship_battle_initiated: &mut ShipBattleInitiated, id: object::ID) {
        ship_battle_initiated.id = option::some(id);
    }

    public fun ship_battle_initiated_initiator_coordinates(ship_battle_initiated: &ShipBattleInitiated): Coordinates {
        ship_battle_initiated.initiator_coordinates
    }

    public fun ship_battle_initiated_responder_coordinates(ship_battle_initiated: &ShipBattleInitiated): Coordinates {
        ship_battle_initiated.responder_coordinates
    }

    public fun ship_battle_initiated_initiator_id(ship_battle_initiated: &ShipBattleInitiated): ID {
        ship_battle_initiated.initiator_id
    }

    public fun ship_battle_initiated_responder_id(ship_battle_initiated: &ShipBattleInitiated): ID {
        ship_battle_initiated.responder_id
    }

    public fun ship_battle_initiated_started_at(ship_battle_initiated: &ShipBattleInitiated): u64 {
        ship_battle_initiated.started_at
    }

    public fun ship_battle_initiated_first_round_mover(ship_battle_initiated: &ShipBattleInitiated): Option<u8> {
        ship_battle_initiated.first_round_mover
    }

    public(friend) fun set_ship_battle_initiated_first_round_mover(ship_battle_initiated: &mut ShipBattleInitiated, first_round_mover: Option<u8>) {
        ship_battle_initiated.first_round_mover = first_round_mover;
    }

    public fun ship_battle_initiated_first_round_attacker_ship(ship_battle_initiated: &ShipBattleInitiated): Option<ID> {
        ship_battle_initiated.first_round_attacker_ship
    }

    public(friend) fun set_ship_battle_initiated_first_round_attacker_ship(ship_battle_initiated: &mut ShipBattleInitiated, first_round_attacker_ship: Option<ID>) {
        ship_battle_initiated.first_round_attacker_ship = first_round_attacker_ship;
    }

    public fun ship_battle_initiated_first_round_defender_ship(ship_battle_initiated: &ShipBattleInitiated): Option<ID> {
        ship_battle_initiated.first_round_defender_ship
    }

    public(friend) fun set_ship_battle_initiated_first_round_defender_ship(ship_battle_initiated: &mut ShipBattleInitiated, first_round_defender_ship: Option<ID>) {
        ship_battle_initiated.first_round_defender_ship = first_round_defender_ship;
    }

    public(friend) fun new_ship_battle_initiated(
        initiator_coordinates: Coordinates,
        responder_coordinates: Coordinates,
        initiator_id: ID,
        responder_id: ID,
        started_at: u64,
        first_round_mover: Option<u8>,
        first_round_attacker_ship: Option<ID>,
        first_round_defender_ship: Option<ID>,
    ): ShipBattleInitiated {
        ShipBattleInitiated {
            id: option::none(),
            initiator_coordinates,
            responder_coordinates,
            initiator_id,
            responder_id,
            started_at,
            first_round_mover,
            first_round_attacker_ship,
            first_round_defender_ship,
        }
    }

    struct ShipBattleMoveMade has copy, drop {
        id: object::ID,
        version: u64,
        attacker_command: u8,
        defender_command: u8,
        round_number: u32,
        defender_damage_taken: u32,
        attacker_damage_taken: u32,
        is_battle_ended: bool,
        winner: Option<u8>,
        next_round_started_at: u64,
        next_round_mover: Option<u8>,
        next_round_attacker_ship: Option<ID>,
        next_round_defender_ship: Option<ID>,
    }

    public fun ship_battle_move_made_id(ship_battle_move_made: &ShipBattleMoveMade): object::ID {
        ship_battle_move_made.id
    }

    public fun ship_battle_move_made_attacker_command(ship_battle_move_made: &ShipBattleMoveMade): u8 {
        ship_battle_move_made.attacker_command
    }

    public fun ship_battle_move_made_defender_command(ship_battle_move_made: &ShipBattleMoveMade): u8 {
        ship_battle_move_made.defender_command
    }

    public fun ship_battle_move_made_round_number(ship_battle_move_made: &ShipBattleMoveMade): u32 {
        ship_battle_move_made.round_number
    }

    public fun ship_battle_move_made_defender_damage_taken(ship_battle_move_made: &ShipBattleMoveMade): u32 {
        ship_battle_move_made.defender_damage_taken
    }

    public fun ship_battle_move_made_attacker_damage_taken(ship_battle_move_made: &ShipBattleMoveMade): u32 {
        ship_battle_move_made.attacker_damage_taken
    }

    public fun ship_battle_move_made_is_battle_ended(ship_battle_move_made: &ShipBattleMoveMade): bool {
        ship_battle_move_made.is_battle_ended
    }

    public fun ship_battle_move_made_winner(ship_battle_move_made: &ShipBattleMoveMade): Option<u8> {
        ship_battle_move_made.winner
    }

    public(friend) fun set_ship_battle_move_made_winner(ship_battle_move_made: &mut ShipBattleMoveMade, winner: Option<u8>) {
        ship_battle_move_made.winner = winner;
    }

    public fun ship_battle_move_made_next_round_started_at(ship_battle_move_made: &ShipBattleMoveMade): u64 {
        ship_battle_move_made.next_round_started_at
    }

    public fun ship_battle_move_made_next_round_mover(ship_battle_move_made: &ShipBattleMoveMade): Option<u8> {
        ship_battle_move_made.next_round_mover
    }

    public(friend) fun set_ship_battle_move_made_next_round_mover(ship_battle_move_made: &mut ShipBattleMoveMade, next_round_mover: Option<u8>) {
        ship_battle_move_made.next_round_mover = next_round_mover;
    }

    public fun ship_battle_move_made_next_round_attacker_ship(ship_battle_move_made: &ShipBattleMoveMade): Option<ID> {
        ship_battle_move_made.next_round_attacker_ship
    }

    public(friend) fun set_ship_battle_move_made_next_round_attacker_ship(ship_battle_move_made: &mut ShipBattleMoveMade, next_round_attacker_ship: Option<ID>) {
        ship_battle_move_made.next_round_attacker_ship = next_round_attacker_ship;
    }

    public fun ship_battle_move_made_next_round_defender_ship(ship_battle_move_made: &ShipBattleMoveMade): Option<ID> {
        ship_battle_move_made.next_round_defender_ship
    }

    public(friend) fun set_ship_battle_move_made_next_round_defender_ship(ship_battle_move_made: &mut ShipBattleMoveMade, next_round_defender_ship: Option<ID>) {
        ship_battle_move_made.next_round_defender_ship = next_round_defender_ship;
    }

    public(friend) fun new_ship_battle_move_made(
        ship_battle: &ShipBattle,
        attacker_command: u8,
        defender_command: u8,
        round_number: u32,
        defender_damage_taken: u32,
        attacker_damage_taken: u32,
        is_battle_ended: bool,
        winner: Option<u8>,
        next_round_started_at: u64,
        next_round_mover: Option<u8>,
        next_round_attacker_ship: Option<ID>,
        next_round_defender_ship: Option<ID>,
    ): ShipBattleMoveMade {
        ShipBattleMoveMade {
            id: id(ship_battle),
            version: version(ship_battle),
            attacker_command,
            defender_command,
            round_number,
            defender_damage_taken,
            attacker_damage_taken,
            is_battle_ended,
            winner,
            next_round_started_at,
            next_round_mover,
            next_round_attacker_ship,
            next_round_defender_ship,
        }
    }

    struct ShipBattleLootTaken has copy, drop {
        id: object::ID,
        version: u64,
        choice: u8,
        loot: vector<ItemIdQuantityPair>,
        looted_at: u64,
        increased_experience: u32,
        new_level: u16,
        loser_increased_experience: u32,
        loser_new_level: u16,
    }

    public fun ship_battle_loot_taken_id(ship_battle_loot_taken: &ShipBattleLootTaken): object::ID {
        ship_battle_loot_taken.id
    }

    public fun ship_battle_loot_taken_choice(ship_battle_loot_taken: &ShipBattleLootTaken): u8 {
        ship_battle_loot_taken.choice
    }

    public fun ship_battle_loot_taken_loot(ship_battle_loot_taken: &ShipBattleLootTaken): vector<ItemIdQuantityPair> {
        ship_battle_loot_taken.loot
    }

    public fun ship_battle_loot_taken_looted_at(ship_battle_loot_taken: &ShipBattleLootTaken): u64 {
        ship_battle_loot_taken.looted_at
    }

    public fun ship_battle_loot_taken_increased_experience(ship_battle_loot_taken: &ShipBattleLootTaken): u32 {
        ship_battle_loot_taken.increased_experience
    }

    public fun ship_battle_loot_taken_new_level(ship_battle_loot_taken: &ShipBattleLootTaken): u16 {
        ship_battle_loot_taken.new_level
    }

    public fun ship_battle_loot_taken_loser_increased_experience(ship_battle_loot_taken: &ShipBattleLootTaken): u32 {
        ship_battle_loot_taken.loser_increased_experience
    }

    public fun ship_battle_loot_taken_loser_new_level(ship_battle_loot_taken: &ShipBattleLootTaken): u16 {
        ship_battle_loot_taken.loser_new_level
    }

    public(friend) fun new_ship_battle_loot_taken(
        ship_battle: &ShipBattle,
        choice: u8,
        loot: vector<ItemIdQuantityPair>,
        looted_at: u64,
        increased_experience: u32,
        new_level: u16,
        loser_increased_experience: u32,
        loser_new_level: u16,
    ): ShipBattleLootTaken {
        ShipBattleLootTaken {
            id: id(ship_battle),
            version: version(ship_battle),
            choice,
            loot,
            looted_at,
            increased_experience,
            new_level,
            loser_increased_experience,
            loser_new_level,
        }
    }


    #[lint_allow(share_owned)]
    public fun share_object(ship_battle: ShipBattle) {
        transfer::share_object(ship_battle);
    }

    public(friend) fun update_object_version(ship_battle: &mut ShipBattle) {
        ship_battle.version = ship_battle.version + 1;
        //assert!(ship_battle.version != 0, EInappropriateVersion);
    }

    public(friend) fun drop_ship_battle(ship_battle: ShipBattle) {
        let ShipBattle {
            id,
            version: _version,
            initiator: _initiator,
            responder: _responder,
            status: _status,
            initiator_experiences: _initiator_experiences,
            responder_experiences: _responder_experiences,
            ended_at: _ended_at,
            winner: _winner,
            round_number: _round_number,
            round_started_at: _round_started_at,
            round_mover: _round_mover,
            round_attacker_ship: _round_attacker_ship,
            round_defender_ship: _round_defender_ship,
        } = ship_battle;
        object::delete(id);
    }

    public(friend) fun emit_ship_battle_initiated(ship_battle_initiated: ShipBattleInitiated) {
        assert!(std::option::is_some(&ship_battle_initiated.id), EEmptyObjectID);
        event::emit(ship_battle_initiated);
    }

    public(friend) fun emit_ship_battle_move_made(ship_battle_move_made: ShipBattleMoveMade) {
        event::emit(ship_battle_move_made);
    }

    public(friend) fun emit_ship_battle_loot_taken(ship_battle_loot_taken: ShipBattleLootTaken) {
        event::emit(ship_battle_loot_taken);
    }

}
