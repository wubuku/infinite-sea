// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_sea_nft::whitelist_entry {
    use std::string::String;
    friend infinite_sea_nft::whitelist_update_logic;
    friend infinite_sea_nft::whitelist_add_whitelist_entry_logic;
    friend infinite_sea_nft::whitelist_update_whitelist_entry_logic;
    friend infinite_sea_nft::whitelist_claim_logic;
    friend infinite_sea_nft::whitelist;

    #[allow(unused_const)]
    const EDataTooLong: u64 = 102;

    struct WhitelistEntry has store {
        account_address: address,
        name: String,
        image_url: String,
        description: String,
        background_color: u32,
        race: u8,
        eyes: u8,
        mouth: u8,
        haircut: u8,
        skin: u8,
        outfit: u8,
        accessories: u8,
        claimed: bool,
        paused: bool,
    }

    public fun account_address(whitelist_entry: &WhitelistEntry): address {
        whitelist_entry.account_address
    }

    public fun name(whitelist_entry: &WhitelistEntry): String {
        whitelist_entry.name
    }

    public(friend) fun set_name(whitelist_entry: &mut WhitelistEntry, name: String) {
        assert!(std::string::length(&name) <= 100, EDataTooLong);
        whitelist_entry.name = name;
    }

    public fun image_url(whitelist_entry: &WhitelistEntry): String {
        whitelist_entry.image_url
    }

    public(friend) fun set_image_url(whitelist_entry: &mut WhitelistEntry, image_url: String) {
        assert!(std::string::length(&image_url) <= 200, EDataTooLong);
        whitelist_entry.image_url = image_url;
    }

    public fun description(whitelist_entry: &WhitelistEntry): String {
        whitelist_entry.description
    }

    public(friend) fun set_description(whitelist_entry: &mut WhitelistEntry, description: String) {
        assert!(std::string::length(&description) <= 500, EDataTooLong);
        whitelist_entry.description = description;
    }

    public fun background_color(whitelist_entry: &WhitelistEntry): u32 {
        whitelist_entry.background_color
    }

    public(friend) fun set_background_color(whitelist_entry: &mut WhitelistEntry, background_color: u32) {
        whitelist_entry.background_color = background_color;
    }

    public fun race(whitelist_entry: &WhitelistEntry): u8 {
        whitelist_entry.race
    }

    public(friend) fun set_race(whitelist_entry: &mut WhitelistEntry, race: u8) {
        whitelist_entry.race = race;
    }

    public fun eyes(whitelist_entry: &WhitelistEntry): u8 {
        whitelist_entry.eyes
    }

    public(friend) fun set_eyes(whitelist_entry: &mut WhitelistEntry, eyes: u8) {
        whitelist_entry.eyes = eyes;
    }

    public fun mouth(whitelist_entry: &WhitelistEntry): u8 {
        whitelist_entry.mouth
    }

    public(friend) fun set_mouth(whitelist_entry: &mut WhitelistEntry, mouth: u8) {
        whitelist_entry.mouth = mouth;
    }

    public fun haircut(whitelist_entry: &WhitelistEntry): u8 {
        whitelist_entry.haircut
    }

    public(friend) fun set_haircut(whitelist_entry: &mut WhitelistEntry, haircut: u8) {
        whitelist_entry.haircut = haircut;
    }

    public fun skin(whitelist_entry: &WhitelistEntry): u8 {
        whitelist_entry.skin
    }

    public(friend) fun set_skin(whitelist_entry: &mut WhitelistEntry, skin: u8) {
        whitelist_entry.skin = skin;
    }

    public fun outfit(whitelist_entry: &WhitelistEntry): u8 {
        whitelist_entry.outfit
    }

    public(friend) fun set_outfit(whitelist_entry: &mut WhitelistEntry, outfit: u8) {
        whitelist_entry.outfit = outfit;
    }

    public fun accessories(whitelist_entry: &WhitelistEntry): u8 {
        whitelist_entry.accessories
    }

    public(friend) fun set_accessories(whitelist_entry: &mut WhitelistEntry, accessories: u8) {
        whitelist_entry.accessories = accessories;
    }

    public fun claimed(whitelist_entry: &WhitelistEntry): bool {
        whitelist_entry.claimed
    }

    public(friend) fun set_claimed(whitelist_entry: &mut WhitelistEntry, claimed: bool) {
        whitelist_entry.claimed = claimed;
    }

    public fun paused(whitelist_entry: &WhitelistEntry): bool {
        whitelist_entry.paused
    }

    public(friend) fun set_paused(whitelist_entry: &mut WhitelistEntry, paused: bool) {
        whitelist_entry.paused = paused;
    }

    public(friend) fun new_whitelist_entry(
        account_address: address,
        name: String,
        image_url: String,
        description: String,
        background_color: u32,
        race: u8,
        eyes: u8,
        mouth: u8,
        haircut: u8,
        skin: u8,
        outfit: u8,
        accessories: u8,
    ): WhitelistEntry {
        assert!(std::string::length(&name) <= 100, EDataTooLong);
        assert!(std::string::length(&image_url) <= 200, EDataTooLong);
        assert!(std::string::length(&description) <= 500, EDataTooLong);
        WhitelistEntry {
            account_address,
            name,
            image_url,
            description,
            background_color,
            race,
            eyes,
            mouth,
            haircut,
            skin,
            outfit,
            accessories,
            claimed: false,
            paused: false,
        }
    }

    public(friend) fun drop_whitelist_entry(whitelist_entry: WhitelistEntry) {
        let WhitelistEntry {
            account_address: _,
            name: _,
            image_url: _,
            description: _,
            background_color: _,
            race: _,
            eyes: _,
            mouth: _,
            haircut: _,
            skin: _,
            outfit: _,
            accessories: _,
            claimed: _,
            paused: _,
        } = whitelist_entry;
    }


}
