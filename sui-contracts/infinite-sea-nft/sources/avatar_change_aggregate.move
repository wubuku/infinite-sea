// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_sea_nft::avatar_change_aggregate {
    use infinite_sea_nft::avatar_change;
    use infinite_sea_nft::avatar_change_create_logic;
    use infinite_sea_nft::avatar_change_delete_logic;
    use infinite_sea_nft::avatar_change_update_logic;
    use std::option::Option;
    use std::string::String;
    use sui::object::ID;
    use sui::tx_context;

    const EInvalidPublisher: u64 = 50;

    #[allow(unused_mut_ref)]
    public entry fun create(
        avatar_id: ID,
        publisher: &sui::package::Publisher,
        image_url: String,
        background_color: Option<u32>,
        haircut: Option<u8>,
        outfit: Option<u8>,
        accessories: vector<u8>,
        aura: Option<u8>,
        symbols: vector<u8>,
        effects: vector<u8>,
        backgrounds: vector<u8>,
        decorations: vector<u8>,
        badges: vector<u8>,
        avatar_change_table: &mut avatar_change::AvatarChangeTable,
        ctx: &mut tx_context::TxContext,
    ) {
        assert!(sui::package::from_package<avatar_change::AvatarChange>(publisher), EInvalidPublisher);
        let avatar_change_created = avatar_change_create_logic::verify(
            avatar_id,
            image_url,
            background_color,
            haircut,
            outfit,
            accessories,
            aura,
            symbols,
            effects,
            backgrounds,
            decorations,
            badges,
            avatar_change_table,
            ctx,
        );
        let avatar_change = avatar_change_create_logic::mutate(
            &mut avatar_change_created,
            avatar_change_table,
            ctx,
        );
        avatar_change::set_avatar_change_created_id(&mut avatar_change_created, avatar_change::id(&avatar_change));
        avatar_change::share_object(avatar_change);
        avatar_change::emit_avatar_change_created(avatar_change_created);
    }

    #[allow(unused_mut_ref)]
    public entry fun update(
        avatar_change: &mut avatar_change::AvatarChange,
        publisher: &sui::package::Publisher,
        image_url: String,
        background_color: Option<u32>,
        haircut: Option<u8>,
        outfit: Option<u8>,
        accessories: vector<u8>,
        aura: Option<u8>,
        symbols: vector<u8>,
        effects: vector<u8>,
        backgrounds: vector<u8>,
        decorations: vector<u8>,
        badges: vector<u8>,
        ctx: &mut tx_context::TxContext,
    ) {
        assert!(sui::package::from_package<avatar_change::AvatarChange>(publisher), EInvalidPublisher);
        let avatar_change_updated = avatar_change_update_logic::verify(
            image_url,
            background_color,
            haircut,
            outfit,
            accessories,
            aura,
            symbols,
            effects,
            backgrounds,
            decorations,
            badges,
            avatar_change,
            ctx,
        );
        avatar_change_update_logic::mutate(
            &mut avatar_change_updated,
            avatar_change,
            ctx,
        );
        avatar_change::update_object_version(avatar_change);
        avatar_change::emit_avatar_change_updated(avatar_change_updated);
    }

    public entry fun delete(
        avatar_change: avatar_change::AvatarChange,
        publisher: &sui::package::Publisher,
        ctx: &mut tx_context::TxContext,
    ) {
        assert!(sui::package::from_package<avatar_change::AvatarChange>(publisher), EInvalidPublisher);
        let avatar_change_deleted = avatar_change_delete_logic::verify(
            &avatar_change,
            ctx,
        );
        let updated_avatar_change = avatar_change_delete_logic::mutate(
            &avatar_change_deleted,
            avatar_change,
            ctx,
        );
        avatar_change::drop_avatar_change(updated_avatar_change);
        avatar_change::emit_avatar_change_deleted(avatar_change_deleted);
    }

}
