// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_sea_nft::avatar_change {
    use std::option::{Self, Option};
    use std::string::String;
    use sui::event;
    use sui::object::{Self, ID, UID};
    use sui::table;
    use sui::transfer;
    use sui::tx_context::TxContext;
    friend infinite_sea_nft::avatar_change_create_logic;
    friend infinite_sea_nft::avatar_change_update_logic;
    friend infinite_sea_nft::avatar_change_delete_logic;
    friend infinite_sea_nft::avatar_change_aggregate;

    const EIdAlreadyExists: u64 = 101;
    #[allow(unused_const)]
    const EDataTooLong: u64 = 102;
    #[allow(unused_const)]
    const EInappropriateVersion: u64 = 103;
    const EEmptyObjectID: u64 = 107;

    struct AvatarChangeTable has key {
        id: UID,
        table: table::Table<ID, object::ID>,
    }

    struct AvatarChangeTableCreated has copy, drop {
        id: object::ID,
    }

    fun init(ctx: &mut TxContext) {
        let id_generator_table = AvatarChangeTable {
            id: object::new(ctx),
            table: table::new(ctx),
        };
        let id_generator_table_id = object::uid_to_inner(&id_generator_table.id);
        transfer::share_object(id_generator_table);
        event::emit(AvatarChangeTableCreated {
            id: id_generator_table_id,
        });
    }

    struct AvatarChange has key {
        id: UID,
        avatar_id: ID,
        version: u64,
        image_url: String,
        background_color: Option<u32>,
        haircut: Option<u8>,
        outfit: Option<u8>,
        accessories: vector<u8>,
        aura: Option<u8>,
        symbols: vector<u8>,
        effects: vector<u8>,
        backgrounds: vector<u8>,
        decorations: vector<u8>,
        badges: vector<u8>,
    }

    public fun id(avatar_change: &AvatarChange): object::ID {
        object::uid_to_inner(&avatar_change.id)
    }

    public fun avatar_id(avatar_change: &AvatarChange): ID {
        avatar_change.avatar_id
    }

    public fun version(avatar_change: &AvatarChange): u64 {
        avatar_change.version
    }

    public fun image_url(avatar_change: &AvatarChange): String {
        avatar_change.image_url
    }

    public(friend) fun set_image_url(avatar_change: &mut AvatarChange, image_url: String) {
        assert!(std::string::length(&image_url) <= 200, EDataTooLong);
        avatar_change.image_url = image_url;
    }

    public fun background_color(avatar_change: &AvatarChange): Option<u32> {
        avatar_change.background_color
    }

    public(friend) fun set_background_color(avatar_change: &mut AvatarChange, background_color: Option<u32>) {
        avatar_change.background_color = background_color;
    }

    public fun haircut(avatar_change: &AvatarChange): Option<u8> {
        avatar_change.haircut
    }

    public(friend) fun set_haircut(avatar_change: &mut AvatarChange, haircut: Option<u8>) {
        avatar_change.haircut = haircut;
    }

    public fun outfit(avatar_change: &AvatarChange): Option<u8> {
        avatar_change.outfit
    }

    public(friend) fun set_outfit(avatar_change: &mut AvatarChange, outfit: Option<u8>) {
        avatar_change.outfit = outfit;
    }

    public fun accessories(avatar_change: &AvatarChange): vector<u8> {
        avatar_change.accessories
    }

    public(friend) fun set_accessories(avatar_change: &mut AvatarChange, accessories: vector<u8>) {
        avatar_change.accessories = accessories;
    }

    public fun aura(avatar_change: &AvatarChange): Option<u8> {
        avatar_change.aura
    }

    public(friend) fun set_aura(avatar_change: &mut AvatarChange, aura: Option<u8>) {
        avatar_change.aura = aura;
    }

    public fun symbols(avatar_change: &AvatarChange): vector<u8> {
        avatar_change.symbols
    }

    public(friend) fun set_symbols(avatar_change: &mut AvatarChange, symbols: vector<u8>) {
        avatar_change.symbols = symbols;
    }

    public fun effects(avatar_change: &AvatarChange): vector<u8> {
        avatar_change.effects
    }

    public(friend) fun set_effects(avatar_change: &mut AvatarChange, effects: vector<u8>) {
        avatar_change.effects = effects;
    }

    public fun backgrounds(avatar_change: &AvatarChange): vector<u8> {
        avatar_change.backgrounds
    }

    public(friend) fun set_backgrounds(avatar_change: &mut AvatarChange, backgrounds: vector<u8>) {
        avatar_change.backgrounds = backgrounds;
    }

    public fun decorations(avatar_change: &AvatarChange): vector<u8> {
        avatar_change.decorations
    }

    public(friend) fun set_decorations(avatar_change: &mut AvatarChange, decorations: vector<u8>) {
        avatar_change.decorations = decorations;
    }

    public fun badges(avatar_change: &AvatarChange): vector<u8> {
        avatar_change.badges
    }

    public(friend) fun set_badges(avatar_change: &mut AvatarChange, badges: vector<u8>) {
        avatar_change.badges = badges;
    }

    fun new_avatar_change(
        avatar_id: ID,
        image_url: String,
        background_color: Option<u32>,
        haircut: Option<u8>,
        outfit: Option<u8>,
        accessories: vector<u8>,
        aura: Option<u8>,
        symbols: vector<u8>,
        effects: vector<u8>,
        backgrounds: vector<u8>,
        decorations: vector<u8>,
        badges: vector<u8>,
        ctx: &mut TxContext,
    ): AvatarChange {
        assert!(std::string::length(&image_url) <= 200, EDataTooLong);
        AvatarChange {
            id: object::new(ctx),
            avatar_id,
            version: 0,
            image_url,
            background_color,
            haircut,
            outfit,
            accessories,
            aura,
            symbols,
            effects,
            backgrounds,
            decorations,
            badges,
        }
    }

    struct AvatarChangeCreated has copy, drop {
        id: option::Option<object::ID>,
        avatar_id: ID,
        image_url: String,
        background_color: Option<u32>,
        haircut: Option<u8>,
        outfit: Option<u8>,
        accessories: vector<u8>,
        aura: Option<u8>,
        symbols: vector<u8>,
        effects: vector<u8>,
        backgrounds: vector<u8>,
        decorations: vector<u8>,
        badges: vector<u8>,
    }

    public fun avatar_change_created_id(avatar_change_created: &AvatarChangeCreated): option::Option<object::ID> {
        avatar_change_created.id
    }

    public(friend) fun set_avatar_change_created_id(avatar_change_created: &mut AvatarChangeCreated, id: object::ID) {
        avatar_change_created.id = option::some(id);
    }

    public fun avatar_change_created_avatar_id(avatar_change_created: &AvatarChangeCreated): ID {
        avatar_change_created.avatar_id
    }

    public fun avatar_change_created_image_url(avatar_change_created: &AvatarChangeCreated): String {
        avatar_change_created.image_url
    }

    public fun avatar_change_created_background_color(avatar_change_created: &AvatarChangeCreated): Option<u32> {
        avatar_change_created.background_color
    }

    public(friend) fun set_avatar_change_created_background_color(avatar_change_created: &mut AvatarChangeCreated, background_color: Option<u32>) {
        avatar_change_created.background_color = background_color;
    }

    public fun avatar_change_created_haircut(avatar_change_created: &AvatarChangeCreated): Option<u8> {
        avatar_change_created.haircut
    }

    public(friend) fun set_avatar_change_created_haircut(avatar_change_created: &mut AvatarChangeCreated, haircut: Option<u8>) {
        avatar_change_created.haircut = haircut;
    }

    public fun avatar_change_created_outfit(avatar_change_created: &AvatarChangeCreated): Option<u8> {
        avatar_change_created.outfit
    }

    public(friend) fun set_avatar_change_created_outfit(avatar_change_created: &mut AvatarChangeCreated, outfit: Option<u8>) {
        avatar_change_created.outfit = outfit;
    }

    public fun avatar_change_created_accessories(avatar_change_created: &AvatarChangeCreated): vector<u8> {
        avatar_change_created.accessories
    }

    public fun avatar_change_created_aura(avatar_change_created: &AvatarChangeCreated): Option<u8> {
        avatar_change_created.aura
    }

    public(friend) fun set_avatar_change_created_aura(avatar_change_created: &mut AvatarChangeCreated, aura: Option<u8>) {
        avatar_change_created.aura = aura;
    }

    public fun avatar_change_created_symbols(avatar_change_created: &AvatarChangeCreated): vector<u8> {
        avatar_change_created.symbols
    }

    public fun avatar_change_created_effects(avatar_change_created: &AvatarChangeCreated): vector<u8> {
        avatar_change_created.effects
    }

    public fun avatar_change_created_backgrounds(avatar_change_created: &AvatarChangeCreated): vector<u8> {
        avatar_change_created.backgrounds
    }

    public fun avatar_change_created_decorations(avatar_change_created: &AvatarChangeCreated): vector<u8> {
        avatar_change_created.decorations
    }

    public fun avatar_change_created_badges(avatar_change_created: &AvatarChangeCreated): vector<u8> {
        avatar_change_created.badges
    }

    public(friend) fun new_avatar_change_created(
        avatar_id: ID,
        image_url: String,
        background_color: Option<u32>,
        haircut: Option<u8>,
        outfit: Option<u8>,
        accessories: vector<u8>,
        aura: Option<u8>,
        symbols: vector<u8>,
        effects: vector<u8>,
        backgrounds: vector<u8>,
        decorations: vector<u8>,
        badges: vector<u8>,
    ): AvatarChangeCreated {
        AvatarChangeCreated {
            id: option::none(),
            avatar_id,
            image_url,
            background_color,
            haircut,
            outfit,
            accessories,
            aura,
            symbols,
            effects,
            backgrounds,
            decorations,
            badges,
        }
    }

    struct AvatarChangeUpdated has copy, drop {
        id: object::ID,
        avatar_id: ID,
        version: u64,
        image_url: String,
        background_color: Option<u32>,
        haircut: Option<u8>,
        outfit: Option<u8>,
        accessories: vector<u8>,
        aura: Option<u8>,
        symbols: vector<u8>,
        effects: vector<u8>,
        backgrounds: vector<u8>,
        decorations: vector<u8>,
        badges: vector<u8>,
    }

    public fun avatar_change_updated_id(avatar_change_updated: &AvatarChangeUpdated): object::ID {
        avatar_change_updated.id
    }

    public fun avatar_change_updated_avatar_id(avatar_change_updated: &AvatarChangeUpdated): ID {
        avatar_change_updated.avatar_id
    }

    public fun avatar_change_updated_image_url(avatar_change_updated: &AvatarChangeUpdated): String {
        avatar_change_updated.image_url
    }

    public fun avatar_change_updated_background_color(avatar_change_updated: &AvatarChangeUpdated): Option<u32> {
        avatar_change_updated.background_color
    }

    public(friend) fun set_avatar_change_updated_background_color(avatar_change_updated: &mut AvatarChangeUpdated, background_color: Option<u32>) {
        avatar_change_updated.background_color = background_color;
    }

    public fun avatar_change_updated_haircut(avatar_change_updated: &AvatarChangeUpdated): Option<u8> {
        avatar_change_updated.haircut
    }

    public(friend) fun set_avatar_change_updated_haircut(avatar_change_updated: &mut AvatarChangeUpdated, haircut: Option<u8>) {
        avatar_change_updated.haircut = haircut;
    }

    public fun avatar_change_updated_outfit(avatar_change_updated: &AvatarChangeUpdated): Option<u8> {
        avatar_change_updated.outfit
    }

    public(friend) fun set_avatar_change_updated_outfit(avatar_change_updated: &mut AvatarChangeUpdated, outfit: Option<u8>) {
        avatar_change_updated.outfit = outfit;
    }

    public fun avatar_change_updated_accessories(avatar_change_updated: &AvatarChangeUpdated): vector<u8> {
        avatar_change_updated.accessories
    }

    public fun avatar_change_updated_aura(avatar_change_updated: &AvatarChangeUpdated): Option<u8> {
        avatar_change_updated.aura
    }

    public(friend) fun set_avatar_change_updated_aura(avatar_change_updated: &mut AvatarChangeUpdated, aura: Option<u8>) {
        avatar_change_updated.aura = aura;
    }

    public fun avatar_change_updated_symbols(avatar_change_updated: &AvatarChangeUpdated): vector<u8> {
        avatar_change_updated.symbols
    }

    public fun avatar_change_updated_effects(avatar_change_updated: &AvatarChangeUpdated): vector<u8> {
        avatar_change_updated.effects
    }

    public fun avatar_change_updated_backgrounds(avatar_change_updated: &AvatarChangeUpdated): vector<u8> {
        avatar_change_updated.backgrounds
    }

    public fun avatar_change_updated_decorations(avatar_change_updated: &AvatarChangeUpdated): vector<u8> {
        avatar_change_updated.decorations
    }

    public fun avatar_change_updated_badges(avatar_change_updated: &AvatarChangeUpdated): vector<u8> {
        avatar_change_updated.badges
    }

    public(friend) fun new_avatar_change_updated(
        avatar_change: &AvatarChange,
        image_url: String,
        background_color: Option<u32>,
        haircut: Option<u8>,
        outfit: Option<u8>,
        accessories: vector<u8>,
        aura: Option<u8>,
        symbols: vector<u8>,
        effects: vector<u8>,
        backgrounds: vector<u8>,
        decorations: vector<u8>,
        badges: vector<u8>,
    ): AvatarChangeUpdated {
        AvatarChangeUpdated {
            id: id(avatar_change),
            avatar_id: avatar_id(avatar_change),
            version: version(avatar_change),
            image_url,
            background_color,
            haircut,
            outfit,
            accessories,
            aura,
            symbols,
            effects,
            backgrounds,
            decorations,
            badges,
        }
    }

    struct AvatarChangeDeleted has copy, drop {
        id: object::ID,
        avatar_id: ID,
        version: u64,
    }

    public fun avatar_change_deleted_id(avatar_change_deleted: &AvatarChangeDeleted): object::ID {
        avatar_change_deleted.id
    }

    public fun avatar_change_deleted_avatar_id(avatar_change_deleted: &AvatarChangeDeleted): ID {
        avatar_change_deleted.avatar_id
    }

    public(friend) fun new_avatar_change_deleted(
        avatar_change: &AvatarChange,
    ): AvatarChangeDeleted {
        AvatarChangeDeleted {
            id: id(avatar_change),
            avatar_id: avatar_id(avatar_change),
            version: version(avatar_change),
        }
    }


    public(friend) fun create_avatar_change(
        avatar_id: ID,
        image_url: String,
        background_color: Option<u32>,
        haircut: Option<u8>,
        outfit: Option<u8>,
        accessories: vector<u8>,
        aura: Option<u8>,
        symbols: vector<u8>,
        effects: vector<u8>,
        backgrounds: vector<u8>,
        decorations: vector<u8>,
        badges: vector<u8>,
        avatar_change_table: &mut AvatarChangeTable,
        ctx: &mut TxContext,
    ): AvatarChange {
        let avatar_change = new_avatar_change(
            avatar_id,
            image_url,
            background_color,
            haircut,
            outfit,
            accessories,
            aura,
            symbols,
            effects,
            backgrounds,
            decorations,
            badges,
            ctx,
        );
        asset_avatar_id_not_exists_then_add(avatar_id, avatar_change_table, object::uid_to_inner(&avatar_change.id));
        avatar_change
    }

    public(friend) fun asset_avatar_id_not_exists(
        avatar_id: ID,
        avatar_change_table: &AvatarChangeTable,
    ) {
        assert!(!table::contains(&avatar_change_table.table, avatar_id), EIdAlreadyExists);
    }

    fun asset_avatar_id_not_exists_then_add(
        avatar_id: ID,
        avatar_change_table: &mut AvatarChangeTable,
        id: object::ID,
    ) {
        asset_avatar_id_not_exists(avatar_id, avatar_change_table);
        table::add(&mut avatar_change_table.table, avatar_id, id);
    }

    public(friend) fun update_version_and_transfer_object(avatar_change: AvatarChange, recipient: address) {
        update_object_version(&mut avatar_change);
        transfer::transfer(avatar_change, recipient);
    }

    #[lint_allow(share_owned)]
    public(friend) fun share_object(avatar_change: AvatarChange) {
        assert!(avatar_change.version == 0, EInappropriateVersion);
        transfer::share_object(avatar_change);
    }

    public(friend) fun update_object_version(avatar_change: &mut AvatarChange) {
        avatar_change.version = avatar_change.version + 1;
        //assert!(avatar_change.version != 0, EInappropriateVersion);
    }

    public(friend) fun drop_avatar_change(avatar_change: AvatarChange) {
        let AvatarChange {
            id,
            avatar_id: _avatar_id,
            version: _version,
            image_url: _image_url,
            background_color: _background_color,
            haircut: _haircut,
            outfit: _outfit,
            accessories: _accessories,
            aura: _aura,
            symbols: _symbols,
            effects: _effects,
            backgrounds: _backgrounds,
            decorations: _decorations,
            badges: _badges,
        } = avatar_change;
        object::delete(id);
    }

    public(friend) fun emit_avatar_change_created(avatar_change_created: AvatarChangeCreated) {
        assert!(std::option::is_some(&avatar_change_created.id), EEmptyObjectID);
        event::emit(avatar_change_created);
    }

    public(friend) fun emit_avatar_change_updated(avatar_change_updated: AvatarChangeUpdated) {
        event::emit(avatar_change_updated);
    }

    public(friend) fun emit_avatar_change_deleted(avatar_change_deleted: AvatarChangeDeleted) {
        event::emit(avatar_change_deleted);
    }

    #[test_only]
    /// Wrapper of module initializer for testing
    public fun test_init(ctx: &mut TxContext) {
        init(ctx)
    }

}
